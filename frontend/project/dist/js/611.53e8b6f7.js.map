{"version":3,"file":"js/611.53e8b6f7.js","mappings":"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","sources":["webpack://project/./src/stores/cart.js","webpack://project/./src/views/Buyer/ProductDetail.vue","webpack://project/./src/views/Buyer/ProductDetail.vue?6e34"],"sourcesContent":["// stores/cart.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\n// 解析JWT token的辅助函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const useCartStore = defineStore('cart', () => {\r\n  const items = ref([])\r\n  const selectedItems = ref(new Set())\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n  \r\n  // 获取商品详情\r\n  const fetchProductDetail = async (productId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://algorineko.top:8080/api/merchant/product/detail/${productId}`\r\n      )\r\n      return response.data\r\n    } catch (err) {\r\n      console.error(`获取商品详情失败 (ID: ${productId}):`, err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 添加商品（本地方法）\r\n  const addItem = (item) => {\r\n    const existing = items.value.find(i => i.id === item.id)\r\n    if (existing) {\r\n      existing.quantity += Number(item.quantity) || 1\r\n    } else {\r\n      items.value.push({\r\n        id: item.id,\r\n        name: item.name || '未知商品',\r\n        price: Number(item.price) || 0,\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.image || '/placeholder-product.jpg',\r\n        cartItemId: item.cartItemId\r\n      })\r\n    }\r\n  }\r\n\r\n  // 新增：API方式添加商品到购物车\r\n  const addItemToCart = async (item) => {\r\n    const token = localStorage.getItem('token')\r\n    if (!token) {\r\n      throw new Error('请先登录后再添加商品到购物车')\r\n    }\r\n    \r\n    // 从token解析用户信息\r\n    const payload = parseJwt(token)\r\n    if (!payload || !payload.customerId) {\r\n      throw new Error('用户信息不完整，请重新登录')\r\n    }\r\n    \r\n    // 构造请求数据\r\n    const requestData = {\r\n      customerId: Number(payload.customerId),\r\n      productId: Number(item.id),\r\n      quantity: Number(item.quantity),\r\n      selectedOptions: \"\"\r\n    }\r\n    \r\n    try {\r\n      // 调用后端加入购物车API\r\n      const response = await axios.post(\r\n        'http://algorineko.top:8080/api/customer/cart/add', \r\n        requestData,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地购物车状态\r\n      addItem({\r\n        id: item.id,\r\n        name: item.name,\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: item.image\r\n      })\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      let errorMsg = '加入购物车失败'\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 400) {\r\n          errorMsg = error.response.data?.message || '请求参数错误'\r\n        } else if (error.response.status === 401) {\r\n          errorMsg = '身份验证失败，请重新登录'\r\n        } else if (error.response.status === 500) {\r\n          errorMsg = error.response.data?.message || '服务器内部错误'\r\n        } else {\r\n          errorMsg = error.response.data?.message || '未知错误'\r\n        }\r\n      } else {\r\n        errorMsg = error.message || '网络错误，请检查连接'\r\n      }\r\n      \r\n      throw new Error(errorMsg)\r\n    }\r\n  }\r\n  \r\n  // 从后端获取购物车数据\r\n  const fetchCart = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n    \r\n      const response = await axios.get(\r\n        'http://algorineko.top:8080/api/customer/cart/get',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 创建临时数组存储购物车项\r\n      const tempItems = []\r\n      \r\n      // 遍历购物车项并获取商品详情\r\n      for (const cartItem of response.data) {\r\n        const productDetail = await fetchProductDetail(cartItem.productId)\r\n        \r\n        // 合并购物车项和商品详情数据\r\n        tempItems.push({\r\n          id: cartItem.productId,\r\n          cartItemId: cartItem.cartItemId,\r\n          name: productDetail?.productName || cartItem.productName || '未知商品',\r\n          price: Number(productDetail?.price) || Number(cartItem.price) || 0,\r\n          quantity: Math.max(1, Number(cartItem.quantity) || 1),\r\n          image: cartItem.image || '/placeholder-product.jpg'\r\n        })\r\n      }\r\n      \r\n      // 更新购物车项\r\n      items.value = tempItems\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('获取购物车失败:', err)\r\n      // 错误时保持现有数据\r\n      if (!items.value.length) {\r\n        items.value = []\r\n      }\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新购物车项数量\r\n  const updateQuantity = async (cartItemId, quantity) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 从token解析用户信息\r\n      const payload = parseJwt(token)\r\n      if (!payload || !payload.customerId) {\r\n        throw new Error('用户信息不完整，请重新登录')\r\n      }\r\n      \r\n      // 查找商品信息\r\n      const item = items.value.find(i => i.cartItemId === cartItemId)\r\n      if (!item) {\r\n        throw new Error('购物车项不存在')\r\n      }\r\n      \r\n      // 构建符合后端要求的请求体\r\n      const requestData = {\r\n        cartItemId: Number(cartItemId),\r\n        customerId: Number(payload.customerId),\r\n        productId: Number(item.id),\r\n        quantity: Number(quantity),\r\n        selectedOptions: \"\"\r\n      }\r\n      \r\n      // 发送PUT请求\r\n      await axios.put(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        requestData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      if (item) {\r\n        item.quantity = quantity\r\n      }\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('更新购物车项失败:', err)\r\n      // 重新获取最新数据\r\n      await fetchCart()\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 移除商品 - 修正URL格式\r\n  const removeItem = async (cartItemId) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 使用正确的URL格式\r\n      await axios.delete(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId)\r\n      selectedItems.value.delete(cartItemId)\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 批量移除商品 - 修正URL格式\r\n  const removeItems = async (cartItemIds) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 并行删除所有选中项\r\n      await Promise.all(\r\n        cartItemIds.map(id => \r\n          axios.delete(\r\n            `http://algorineko.top:8080/api/customer/cart/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }\r\n          )\r\n        )\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId))\r\n      cartItemIds.forEach(id => selectedItems.value.delete(id))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('批量删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 总价计算\r\n  const totalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      const price = Number(item.price) || 0\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中商品总价\r\n  const selectedTotalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      if (selectedItems.value.has(item.cartItemId)) {\r\n        const price = Number(item.price) || 0\r\n        const quantity = Number(item.quantity) || 1\r\n        return sum + (price * quantity)\r\n      }\r\n      return sum\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中的商品列表\r\n  const selectedItemsList = computed(() => \r\n    items.value.filter(item => selectedItems.value.has(item.cartItemId))\r\n  )\r\n\r\n  const toggleSelection = (cartItemId) => {\r\n    if (selectedItems.value.has(cartItemId)) {\r\n      selectedItems.value.delete(cartItemId)\r\n    } else {\r\n      selectedItems.value.add(cartItemId)\r\n    }\r\n  }\r\n  \r\n  // 全选/取消全选\r\n  const toggleSelectAll = () => {\r\n    if (selectedItems.value.size === items.value.length) {\r\n      selectedItems.value.clear()\r\n    } else {\r\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId))\r\n    }\r\n  }\r\n\r\n  const clearSelected = () => selectedItems.value.clear()\r\n\r\n  return {\r\n    items: computed(() => items.value),\r\n    totalPrice,\r\n    selectedTotalPrice,\r\n    selectedItems: computed(() => selectedItems.value),\r\n    selectedItemsList,\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    fetchCart,\r\n    updateQuantity,\r\n    addItemToCart,\r\n    removeItem,\r\n    removeItems,\r\n    toggleSelection,\r\n    toggleSelectAll,\r\n    clearSelected\r\n  }\r\n})","<template>\r\n  <div class=\"product-detail\">\r\n    <el-button type=\"text\" @click=\"$router.go(-1)\">返回</el-button>\r\n    \r\n    <div class=\"detail-content\">\r\n      <el-carousel :interval=\"4000\" height=\"400px\" v-if=\"product.images?.length > 0\">\r\n        <el-carousel-item \r\n          v-for=\"(img, index) in product.images\" \r\n          :key=\"index\"\r\n          style=\"height: 400px;\"\r\n        >\r\n          <el-image \r\n            :src=\"img\" \r\n            fit=\"cover\" \r\n            style=\"width: 100%; height: 100%;\"\r\n          />\r\n        </el-carousel-item>\r\n      </el-carousel>\r\n      \r\n      <!-- 无图片提示 -->\r\n      <div v-else class=\"no-images\">\r\n        <el-empty description=\"暂无商品图片\" />\r\n      </div>\r\n\r\n      <div class=\"product-info\">\r\n        <h1>{{ product.name }}</h1>\r\n        <p class=\"price\">¥{{ product.price }}</p>\r\n        \r\n        <div class=\"action-group\">\r\n          <el-input-number \r\n            v-model=\"quantity\" \r\n            :min=\"1\"\r\n          />\r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"addToCart\"\r\n            :loading=\"isAddingToCart\"\r\n          >\r\n            加入购物车\r\n          </el-button>\r\n        </div>\r\n\r\n        <el-divider />\r\n        <div class=\"description\">\r\n          <h3>商品详情</h3>\r\n          <p>{{ product.description || '暂无详情描述' }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\nimport { useCartStore } from '@/stores/cart'\r\nimport axios from 'axios'\r\n\r\nconst route = useRoute()\r\nconst router = useRouter()\r\nconst cartStore = useCartStore()\r\n\r\nconst product = ref({\r\n  id: '',\r\n  name: '',\r\n  price: 0,\r\n  images: [],\r\n  description: ''\r\n})\r\n\r\nconst quantity = ref(1)\r\nconst isAddingToCart = ref(false) // 加载状态\r\n\r\n// 从API获取商品详情\r\nconst fetchProductDetail = async (id) => {\r\n  if (!id) {\r\n    ElMessage.error('无效的商品ID')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/merchant/product/detail/${id}`\r\n    )\r\n    \r\n    const apiData = response.data\r\n    \r\n    // 转换API数据结构以适应前端需求\r\n    product.value = {\r\n      id: apiData.productId,\r\n      name: apiData.productName,\r\n      price: apiData.price,\r\n      description: apiData.description,\r\n      // 确保images是数组，如果为null则转换为空数组\r\n      images: apiData.images || []\r\n    }\r\n    \r\n  } catch (error) {\r\n    ElMessage.error('商品加载失败')\r\n    console.error('商品加载错误:', error)\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  const productId = route.params.id\r\n  if (productId) fetchProductDetail(productId)\r\n})\r\n\r\n// 从JWT token解析payload\r\nconst addToCart = async () => {\r\n  isAddingToCart.value = true // 开始加载\r\n  \r\n  try {\r\n    await cartStore.addItemToCart({\r\n      id: product.value.id,\r\n      productName: product.value.name,\r\n      price: product.value.price,\r\n      quantity: quantity.value,\r\n      image: product.value.images?.[0] || ''\r\n    })\r\n     // 新增：添加成功后刷新购物车数据\r\n    await cartStore.fetchCart()\r\n    \r\n    ElMessage.success('已加入购物车')\r\n  } catch (error) {\r\n    // 处理错误\r\n    console.error('加入购物车失败:', error)\r\n    const errorMsg = error.message || '加入购物车失败'\r\n    ElMessage.error(errorMsg)\r\n    \r\n    // 处理未登录情况\r\n    if (error.response?.status === 401) {\r\n      router.push('/login')\r\n    }\r\n  } finally {\r\n    isAddingToCart.value = false // 结束加载\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.product-detail {\r\n  padding: 20px;\r\n}\r\n\r\n.detail-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 40px;\r\n}\r\n\r\n.action-group {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n\r\n.description {\r\n  margin-top: 30px;\r\n}\r\n\r\n.price {\r\n  font-size: 24px;\r\n  color: #f56c6c;\r\n  font-weight: bold;\r\n}\r\n\r\n.no-images {\r\n  height: 400px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #f5f7fa;\r\n  border-radius: 8px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .detail-content {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style>","import script from \"./ProductDetail.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ProductDetail.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ProductDetail.vue?vue&type=style&index=0&id=1626a91b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1626a91b\"]])\n\nexport default __exports__"],"names":["parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","useCartStore","defineStore","items","ref","selectedItems","Set","loading","fetchProductDetail","async","response","axios","get","productId","data","err","addItem","item","existing","value","find","i","id","quantity","Number","push","name","price","Math","max","image","cartItemId","addItemToCart","localStorage","getItem","Error","payload","customerId","requestData","selectedOptions","post","headers","errorMsg","status","message","fetchCart","Authorization","tempItems","cartItem","productDetail","productName","length","updateQuantity","put","removeItem","delete","filter","removeItems","Promise","all","cartItemIds","includes","forEach","totalPrice","computed","reduce","sum","selectedTotalPrice","has","selectedItemsList","toggleSelection","add","toggleSelectAll","size","clear","clearSelected","route","useRoute","router","useRouter","cartStore","product","images","description","isAddingToCart","apiData","ElMessage","onMounted","params","addToCart","success","__exports__"],"sourceRoot":""}