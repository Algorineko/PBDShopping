{"version":3,"file":"js/208.407928c1.js","mappings":"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","sources":["webpack://project/./src/views/business/OrderManagement.vue","webpack://project/./src/views/business/OrderManagement.vue?d4a5"],"sourcesContent":["<template>\r\n  <div class=\"order-section\">\r\n    <h2><i class=\"el-icon-tickets\"></i> 订单管理</h2>\r\n    <div class=\"filter-bar\">\r\n      <div class=\"filter-group\">\r\n        <el-select \r\n          v-model=\"orderFilter.status\" \r\n          placeholder=\"订单状态\" \r\n          style=\"width: 150px\"\r\n        >\r\n          <el-option label=\"全部\" value=\"all\" />\r\n          <el-option label=\"待付款\" value=\"pending\" />\r\n          <el-option label=\"已付款\" value=\"paid\" />\r\n          <el-option label=\"已发货\" value=\"shipped\" />\r\n          <el-option label=\"已完成\" value=\"completed\" />\r\n        </el-select>\r\n        <el-date-picker\r\n          v-model=\"orderFilter.dateRange\"\r\n          type=\"daterange\"\r\n          range-separator=\"至\"\r\n          start-placeholder=\"开始日期\"\r\n          end-placeholder=\"结束日期\"\r\n          style=\"width: 350px\"\r\n        />\r\n      </div>\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"loadOrders\">搜索</el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"flattenedOrders\" border style=\"width: 100%\" class=\"data-table\">\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"180\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      \r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-row\">\r\n            <el-image \r\n              :src=\"row.item.image || '/placeholder-product.jpg'\"\r\n              style=\"width: 60px; height: 60px; border-radius: 4px;\"\r\n              fit=\"cover\"\r\n            />\r\n            <div class=\"product-details\">\r\n              <div class=\"product-name\">{{ row.item.name }}</div>\r\n              <div class=\"product-meta\">\r\n                <span class=\"product-price\">¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}</span>\r\n                <span class=\"product-subtotal\">小计: ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row?.status]?.type || 'info'\">\r\n            {{ statusMap[row?.status]?.text || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 操作列：增加发货按钮 -->\r\n      <el-table-column label=\"操作\" width=\"150\">\r\n        <template #default=\"{ row }\">\r\n          <div v-if=\"row\">\r\n            <!-- 发货按钮：只对已付款订单显示 -->\r\n            <el-button \r\n              v-if=\"(row.status === 'paid' || row.status === 'PAID') && row.isFirstItem\"\r\n              size=\"small\" \r\n              type=\"success\"\r\n              icon=\"el-icon-truck\"\r\n              @click=\"handleShip(row.orderId)\"\r\n            >发货</el-button>\r\n            <!-- 已发货状态显示 -->\r\n            <span v-else-if=\"(row.status === 'shipped' || row.status === 'SHIPPED') && row.isFirstItem\">\r\n              <el-tag type=\"success\">已发货</el-tag>\r\n            </span>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    \r\n    <!-- 发货对话框 -->\r\n    <el-dialog v-model=\"shipDialogVisible\" title=\"订单发货\" width=\"500px\">\r\n      <el-form :model=\"shipForm\" label-width=\"100px\">\r\n        <el-form-item label=\"订单号\">\r\n          <el-input v-model=\"currentOrderId\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流公司\" required>\r\n          <el-input v-model=\"shipForm.trackingCompany\" placeholder=\"请输入物流公司名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号\">\r\n          <div class=\"tracking-input\">\r\n            <el-input \r\n              v-model=\"shipForm.trackingNumber\" \r\n              placeholder=\"请输入物流单号\" \r\n              clearable\r\n            />\r\n            <el-button \r\n              type=\"primary\" \r\n              plain \r\n              size=\"small\" \r\n              @click=\"shipForm.trackingNumber = generateTrackingNumber()\"\r\n            >\r\n              生成单号\r\n            </el-button>\r\n          </div>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"shipDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmShip\">确定发货</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\nconst orderFilter = ref({ status: 'all', dateRange: [] })\r\nconst orders = ref([])\r\n\r\n// 发货相关状态\r\nconst shipDialogVisible = ref(false)\r\nconst currentOrderId = ref('')\r\nconst shipForm = ref({\r\n  trackingCompany: '',\r\n  trackingNumber: ''\r\n})\r\n\r\n// 从token解析商家ID\r\nconst getMerchantIdFromToken = () => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    ElMessage.error('用户未登录，请先登录')\r\n    return null\r\n  }\r\n  \r\n  try {\r\n    // 解析JWT Token\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    const payload = JSON.parse(jsonPayload)\r\n    return payload.merchantId || null\r\n  } catch (error) {\r\n    console.error('Token解析失败:', error)\r\n    ElMessage.error('商家信息解析失败')\r\n    return null\r\n  }\r\n}\r\n\r\n// 状态映射（支持大小写状态）\r\nconst statusMap = {\r\n  pending: { text: '待付款', type: 'warning' },\r\n  PENDING: { text: '待付款', type: 'warning' },\r\n  paid: { text: '已付款', type: 'primary' },\r\n  PAID: { text: '已付款', type: 'primary' },\r\n  shipped: { text: '已发货', type: 'success' },\r\n  SHIPPED: { text: '已发货', type: 'success' },\r\n  completed: { text: '已完成', type: 'info' },\r\n  COMPLETED: { text: '已完成', type: 'info' }\r\n}\r\n\r\n// 更新订单状态 - 使用新的发货API\r\nconst shipOrder = async (orderId, trackingCompany, trackingNumber) => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return false\r\n    }\r\n    \r\n    // 查找当前订单的所有订单项\r\n    const order = orders.value.find(o => o.orderId === orderId)\r\n    if (!order || !order.items) {\r\n      ElMessage.error('未找到订单项信息')\r\n      return false\r\n    }\r\n    \r\n    // 构建物流列表 - 使用正确的订单项ID\r\n    const logisticsList = order.items.map(item => ({\r\n      orderItemId: item.orderItemId, // 使用正确的订单项ID\r\n      logisticsCompany: trackingCompany,\r\n      trackingNumber: trackingNumber,\r\n      status: \"SHIPPED\" // 发货状态\r\n    }))\r\n    console.log('物流列表:', logisticsList)\r\n    // 调用发货API\r\n    const response = await axios.post(\r\n      `http://algorineko.top:8080/api/order/shipping`,\r\n      {\r\n        orderId: orderId,\r\n        logisticsList: logisticsList\r\n      },\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    return response.status === 200\r\n  } catch (error) {\r\n    console.error('发货操作失败:', error)\r\n    \r\n    let errorMessage = '发货失败'\r\n    if (error.response) {\r\n      if (error.response.status === 400) {\r\n        errorMessage = '请求参数错误'\r\n      } else if (error.response.status === 401) {\r\n        errorMessage = '未授权操作'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    return false\r\n  }\r\n}\r\n\r\n// 创建扁平化的订单数据结构（每个商品一行）\r\nconst flattenedOrders = computed(() => {\r\n  const result = []\r\n  \r\n  filteredOrders.value.forEach(order => {\r\n    order.items.forEach((item, index) => {\r\n      result.push({\r\n        ...order,\r\n        item,\r\n        isFirstItem: index === 0  // 标记是否是订单中的第一个商品\r\n      })\r\n    })\r\n  })\r\n  \r\n  return result\r\n})\r\n\r\n// 过滤订单\r\nconst filteredOrders = computed(() => {\r\n  return (orders.value || [])\r\n    .filter(o => {\r\n      // 状态筛选\r\n      const statusMatch = orderFilter.value.status === 'all' || \r\n                       o.status.toLowerCase() === orderFilter.value.status.toLowerCase()\r\n      \r\n      // 日期筛选\r\n      const dateMatch = !orderFilter.value.dateRange?.length || (\r\n        new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) &&\r\n        new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]))\r\n      \r\n      return statusMatch && dateMatch\r\n    })\r\n})\r\n\r\n// 生成递增的物流单号\r\nconst generateTrackingNumber = () => {\r\n  let lastNumber = localStorage.getItem('lastTrackingNumber') || 0\r\n  lastNumber = parseInt(lastNumber) + 1\r\n  localStorage.setItem('lastTrackingNumber', lastNumber.toString())\r\n  return lastNumber.toString().padStart(10, '0') // 生成10位数字，不足前面补0\r\n}\r\n\r\n// 发货操作 - 打开发货对话框\r\nconst handleShip = (orderId) => {\r\n  currentOrderId.value = orderId\r\n  // 生成物流单号（作为默认值）\r\n  shipForm.value.trackingNumber = generateTrackingNumber()\r\n  shipForm.value.trackingCompany = '' // 清空物流公司\r\n  shipDialogVisible.value = true\r\n}\r\n\r\n// 确认发货\r\nconst confirmShip = async () => {\r\n  if (!shipForm.value.trackingCompany) {\r\n    ElMessage.warning('请输入物流公司')\r\n    return\r\n  }\r\n  \r\n  if (!shipForm.value.trackingNumber) {\r\n    ElMessage.warning('请输入物流单号')\r\n    return\r\n  }\r\n  \r\n  // 使用发货API\r\n  const success = await shipOrder(\r\n    currentOrderId.value,\r\n    shipForm.value.trackingCompany,\r\n    shipForm.value.trackingNumber\r\n  )\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(o => {\r\n      if (o.orderId === currentOrderId.value) {\r\n        return {\r\n          ...o,\r\n          status: 'SHIPPED', // 使用大写状态保持一致性\r\n          shipTime: new Date().toLocaleString(),\r\n          trackingCompany: shipForm.value.trackingCompany,\r\n          trackingNumber: shipForm.value.trackingNumber\r\n        }\r\n      }\r\n      return o\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success('发货成功！')\r\n    shipDialogVisible.value = false\r\n    loadOrders() // 重新加载订单\r\n  }\r\n}\r\n\r\n// 从后端加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return\r\n    }\r\n    \r\n    // 调用后端API获取订单\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/merchant/${merchantId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 转换数据结构 - 保留订单项ID\r\n    const backendOrders = response.data.map(order => ({\r\n      orderId: order.orderId,\r\n      merchantId: order.merchantId,\r\n      totalPrice: order.totalPrice,\r\n      status: order.status, // 保持大写状态\r\n      createTime: new Date().toLocaleString(), // 添加时间字段\r\n      items: order.items.map(item => ({\r\n        orderItemId: item.orderItemId, // 保留订单项ID (后端返回的订单项ID)\r\n        productId: item.productId, // 商品ID\r\n        name: `商品 ${item.productId}`, // 默认商品名称（稍后会替换）\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: '/placeholder-product.jpg' // 默认图片（稍后会替换）\r\n      }))\r\n    }))\r\n    console.log('订单列表:', backendOrders)\r\n    // 获取所有唯一商品ID\r\n    const productIds = [...new Set(\r\n      backendOrders.flatMap(order => \r\n        order.items.map(item => item.productId) // 使用商品ID获取详情\r\n      )\r\n    )]\r\n\r\n    // 并发获取所有商品详情\r\n    const productRequests = productIds.map(id => \r\n      axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }).catch(error => {\r\n        console.error(`获取商品${id}详情失败:`, error)\r\n        return null\r\n      })\r\n    )\r\n\r\n    // 等待所有商品详情请求完成\r\n    const productResponses = await Promise.all(productRequests)\r\n    \r\n    // 构建商品信息映射表\r\n    const productMap = {}\r\n    productResponses.forEach((res, index) => {\r\n      if (res && res.data) {\r\n        const product = res.data\r\n        productMap[productIds[index]] = {\r\n          name: product.productName,\r\n          // 使用第一张图片或默认图片\r\n          image: product.images && product.images.length > 0 \r\n            ? product.images[0] \r\n            : '/placeholder-product.jpg'\r\n        }\r\n      }\r\n    })\r\n\r\n    // 更新订单中的商品信息\r\n    backendOrders.forEach(order => {\r\n      order.items.forEach(item => {\r\n        const productInfo = productMap[item.productId] // 使用商品ID获取详情\r\n        if (productInfo) {\r\n          item.name = productInfo.name\r\n          item.image = productInfo.image\r\n        }\r\n      })\r\n    })\r\n\r\n    // 保存到本地存储（保持原有功能）\r\n    localStorage.setItem('orders', JSON.stringify(backendOrders))\r\n    \r\n    orders.value = backendOrders\r\n  } catch (error) {\r\n    console.error('加载订单失败:', error)\r\n    \r\n    // 更详细的错误信息\r\n    let errorMessage = '订单加载失败'\r\n    if (error.response) {\r\n      // 服务器响应了错误状态码\r\n      if (error.response.status === 401) {\r\n        errorMessage = '用户未认证，请重新登录'\r\n      } else if (error.response.status === 403) {\r\n        errorMessage = '没有权限访问订单数据'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发出但没有收到响应\r\n      errorMessage = '无法连接到服务器，请检查网络连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    orders.value = []\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  loadOrders() // 加载订单数据\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.order-section h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 25px;\r\n  color: #303133;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.order-section h2 i {\r\n  margin-right: 12px;\r\n  font-size: 24px;\r\n  color: #409eff;\r\n}\r\n\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.data-table {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\n.product-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  font-size: 14px;\r\n}\r\n\r\n.product-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.product-price {\r\n  color: #666;\r\n  font-size: 13px;\r\n}\r\n\r\n.product-subtotal {\r\n  font-weight: 600;\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 物流单号输入框样式 */\r\n.tracking-input {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.tracking-input .el-input {\r\n  flex: 1;\r\n}\r\n</style>","import script from \"./OrderManagement.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./OrderManagement.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./OrderManagement.vue?vue&type=style&index=0&id=26dafb9e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-26dafb9e\"]])\n\nexport default __exports__"],"names":["orderFilter","ref","status","dateRange","orders","shipDialogVisible","currentOrderId","shipForm","trackingCompany","trackingNumber","getMerchantIdFromToken","token","localStorage","getItem","ElMessage","error","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","merchantId","console","statusMap","pending","text","type","PENDING","paid","PAID","shipped","SHIPPED","completed","COMPLETED","shipOrder","async","orderId","order","value","find","o","items","logisticsList","item","orderItemId","logisticsCompany","log","response","axios","post","headers","errorMessage","data","message","flattenedOrders","computed","result","filteredOrders","forEach","index","push","isFirstItem","filter","statusMatch","toLowerCase","dateMatch","length","Date","createTime","generateTrackingNumber","lastNumber","parseInt","setItem","padStart","handleShip","confirmShip","warning","success","savedOrders","updatedOrders","shipTime","toLocaleString","stringify","loadOrders","get","backendOrders","totalPrice","productId","name","price","quantity","image","productIds","Set","flatMap","productRequests","id","catch","productResponses","Promise","all","productMap","res","product","productName","images","productInfo","request","onMounted","__exports__"],"sourceRoot":""}