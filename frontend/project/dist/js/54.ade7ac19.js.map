{"version":3,"file":"js/54.ade7ac19.js","mappings":"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","sources":["webpack://project/./src/components/UserOrders.vue","webpack://project/./src/components/UserOrders.vue?2788"],"sourcesContent":["<template>\r\n  <div class=\"user-orders\">\r\n    <h2>我的订单</h2>\r\n    \r\n    <!-- 订单筛选 -->\r\n    <div class=\"filter-section\">\r\n      <el-select v-model=\"filterStatus\" placeholder=\"全部状态\" @change=\"loadOrders\">\r\n        <el-option\r\n          v-for=\"status in statusOptions\"\r\n          :key=\"status.value\"\r\n          :label=\"status.label\"\r\n          :value=\"status.value\"\r\n        />\r\n      </el-select>\r\n      <el-date-picker\r\n        v-model=\"filterDate\"\r\n        type=\"daterange\"\r\n        range-separator=\"至\"\r\n        start-placeholder=\"开始日期\"\r\n        end-placeholder=\"结束日期\"\r\n        @change=\"loadOrders\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 订单列表 -->\r\n    <el-table \r\n      :data=\"orderLines\"\r\n      v-if=\"orderLines.length > 0\"\r\n      border \r\n      style=\"width: 100%\"\r\n    >\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"200\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-list\">\r\n            <div class=\"product-item\">\r\n              <router-link :to=\"`/buyer/${username}/product/${row.item.id}`\">\r\n                <el-image \r\n                  :src=\"row.item.image\"\r\n                  style=\"width: 60px; height: 60px; cursor: pointer\"\r\n                  fit=\"cover\"\r\n                />\r\n              </router-link>\r\n              <div class=\"product-details\">\r\n                <router-link \r\n                  :to=\"`/buyer/${username}/product/${row.item.id}`\"\r\n                  class=\"product-name\"\r\n                >\r\n                  {{ row.item.name }}\r\n                </router-link>\r\n                <div class=\"product-price\">\r\n                  ¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"scope\">\r\n          ¥{{ (scope.row.item.price * scope.row.item.quantity).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"scope\">\r\n          <el-tag :type=\"statusType[scope.row.status] || 'info'\">\r\n            {{ statusText[scope.row.status] || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"250\">\r\n        <template #default=\"scope\">\r\n          <!-- 订单操作按钮（仅在第一行显示） -->\r\n          <div v-if=\"scope.row.isFirst\">\r\n            <!-- 付款按钮：仅待付款状态显示 -->\r\n            <el-button \r\n              v-if=\"scope.row.status === 'pending' || scope.row.status === 'PENDING'\"\r\n              type=\"success\" \r\n              size=\"small\"\r\n              @click=\"payOrder(scope.row.orderId)\"\r\n            >\r\n              付款\r\n            </el-button>\r\n            \r\n            <!-- 确认收货按钮：仅已发货状态显示 -->\r\n            <el-button \r\n              v-if=\"scope.row.status === 'shipped' || scope.row.status === 'SHIPPED'\"\r\n              type=\"warning\" \r\n              size=\"small\"\r\n              @click=\"confirmReceipt(scope.row.orderId)\"\r\n            >\r\n              确认收货\r\n            </el-button>\r\n            \r\n            <!-- 物流详情按钮：仅已发货和已完成状态显示 -->\r\n            <el-button \r\n              v-if=\"(scope.row.status === 'shipped' || scope.row.status === 'SHIPPED' || scope.row.status === 'completed' || scope.row.status === 'COMPLETED')\"\r\n              type=\"info\" \r\n              size=\"small\"\r\n              @click=\"showTrackingInfo(scope.row)\"\r\n            >\r\n              物流详情\r\n            </el-button>\r\n          </div>\r\n          \r\n          <!-- 商品评价按钮（每个商品行都显示） -->\r\n          <el-button \r\n            v-if=\"(scope.row.status === 'completed' || scope.row.status === 'COMPLETED') && scope.row.isPaid && !scope.row.item.reviewed\"\r\n            type=\"warning\" \r\n            size=\"small\"\r\n            @click=\"openReviewDialog(scope.row)\"\r\n          >\r\n            评价\r\n          </el-button>\r\n          \r\n          <!-- 已评价标记 -->\r\n          <el-tag v-if=\"(scope.row.status === 'completed' || scope.row.status === 'COMPLETED') && scope.row.isPaid && scope.row.item.reviewed\" type=\"success\">\r\n            已评价\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 空状态提示 -->\r\n    <el-empty v-else description=\"暂无订单数据\" class=\"empty-placeholder\" />\r\n\r\n    <!-- 分页 -->\r\n    <div class=\"pagination\" v-if=\"orderLines.length > 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"prev, pager, next\"\r\n        :total=\"total\"\r\n        :page-size=\"pageSize\"\r\n        @current-change=\"handlePageChange\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 评价对话框 -->\r\n    <el-dialog v-model=\"reviewDialogVisible\" title=\"商品评价\">\r\n      <el-form :model=\"reviewForm\">\r\n        <el-form-item label=\"评分\">\r\n          <el-rate v-model=\"reviewForm.rating\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"评价内容\">\r\n          <el-input\r\n            v-model=\"reviewForm.content\"\r\n            type=\"textarea\"\r\n            :rows=\"4\"\r\n            placeholder=\"请输入您的使用体验\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"reviewDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitReview\">提交评价</el-button>\r\n      </template>\r\n    </el-dialog>\r\n    \r\n    <!-- 物流详情对话框（修改后） -->\r\n    <el-dialog v-model=\"trackingDialogVisible\" title=\"物流详情\">\r\n      <el-form label-width=\"100px\">\r\n        <el-form-item label=\"物流公司：\">\r\n          <span>{{ currentTrackingInfo.logisticsCompany }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号：\">\r\n          <span>{{ currentTrackingInfo.trackingNumber }}</span>\r\n        </el-form-item>\r\n        <!-- 移除了物流状态显示 -->\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button type=\"primary\" @click=\"trackingDialogVisible = false\">关闭</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\n// 订单状态配置\r\nconst statusText = {\r\n  PENDING: '待付款',\r\n  PAID: '待发货',\r\n  SHIPPED: '已发货',\r\n  COMPLETED: '已完成',\r\n  CANCELED: '已取消',\r\n  // 添加小写状态映射以兼容原有逻辑\r\n  pending: '待付款',\r\n  paid: '待发货',\r\n  shipped: '已发货',\r\n  completed: '已完成',\r\n  canceled: '已取消'\r\n}\r\n\r\nconst statusType = {\r\n  PENDING: 'warning',\r\n  PAID: 'primary',\r\n  SHIPPED: 'primary',\r\n  COMPLETED: 'success',\r\n  CANCELED: 'info',\r\n  // 添加小写状态映射以兼容原有逻辑\r\n  pending: 'warning',\r\n  paid: 'primary',\r\n  shipped: 'primary',\r\n  completed: 'success',\r\n  canceled: 'info'\r\n}\r\n\r\n// JWT 解析函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\n// 从token获取用户名\r\nconst token = localStorage.getItem('token')\r\nconst username = computed(() => {\r\n  if (token) {\r\n    const payload = parseJwt(token)\r\n    return payload.sub|| 'guest'\r\n  }\r\n  return 'guest'\r\n})\r\n\r\n// 筛选选项\r\nconst statusOptions = ref([\r\n  { value: 'all', label: '全部状态' },\r\n  { value: 'PENDING', label: '待付款' },\r\n  { value: 'PAID', label: '待发货' },\r\n  { value: 'SHIPPED', label: '已发货' },\r\n  { value: 'COMPLETED', label: '已完成' }\r\n])\r\n\r\n// 订单数据\r\nconst orderLines = ref([]) // 用于存储拆分后的订单行\r\nconst filterStatus = ref('all')\r\nconst filterDate = ref([])\r\nconst total = ref(0)\r\nconst pageSize = ref(10)\r\nconst currentPage = ref(1)\r\n\r\n// 评价相关\r\nconst reviewDialogVisible = ref(false)\r\nconst reviewForm = ref({\r\n  orderItemId: '', // 新增：订单项ID\r\n  customerId: '', // 新增：用户ID\r\n  rating: 5,\r\n  content: ''\r\n})\r\nconst currentReviewOrderLine = ref(null)\r\n\r\n// 物流详情相关\r\nconst trackingDialogVisible = ref(false)\r\nconst currentTrackingInfo = ref({\r\n  logisticsCompany: '',\r\n  trackingNumber: ''\r\n})\r\n\r\n// 从Token获取用户ID\r\nconst getCustomerIdFromToken = () => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    ElMessage.error('用户未登录，请先登录')\r\n    return null\r\n  }\r\n  try {\r\n    // 使用自定义函数解析JWT Token\r\n    const decoded = parseJwt(token)\r\n    // 假设用户ID存储在decoded.id字段中\r\n    return decoded.customerId || null\r\n  } catch (error) {\r\n    console.error('Token解析失败:', error)\r\n    ElMessage.error('用户信息解析失败')\r\n    return null\r\n  }\r\n}\r\n\r\n// 更新订单状态（直接使用大写的英文状态字符串）\r\nconst updateOrderStatus = async (orderId, newStatus) => {\r\n  try {\r\n    const response = await axios.put(\r\n      `http://algorineko.top:8080/api/order/updateStatus?orderId=${orderId}&status=${newStatus}`,\r\n      {},\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    return response.data === true\r\n  } catch (error) {\r\n    console.error('更新订单状态失败:', error)\r\n    ElMessage.error('更新订单状态失败')\r\n    return false\r\n  }\r\n}\r\n\r\n// 从后端API加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    // 从Token获取用户ID\r\n    const customerId = getCustomerIdFromToken()\r\n    if (!customerId) {\r\n      ElMessage.error('无法获取用户信息')\r\n      return\r\n    }\r\n\r\n    // 调用后端API获取订单\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/customer/${customerId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 转换数据结构\r\n    const backendOrders = response.data.map(order => ({\r\n      orderId: order.orderId,\r\n      merchantId: order.merchantId,\r\n      totalPrice: order.totalPrice,\r\n      status: order.status, // 保持大写状态\r\n      createTime: new Date().toLocaleString(), // 添加时间字段（后端未提供）\r\n      items: order.items.map(item => ({\r\n        id: item.productId,\r\n        name: `商品 ${item.productId}`, // 默认商品名称\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: 'https://via.placeholder.com/60', // 默认图片\r\n        orderItemId: item.orderItemId // 新增：保存订单项ID\r\n      }))\r\n    }))\r\n\r\n    // 获取所有唯一商品ID\r\n    const productIds = [...new Set(\r\n      backendOrders.flatMap(order => \r\n        order.items.map(item => item.id)\r\n      )\r\n    )]\r\n\r\n    // 并发获取所有商品详情\r\n    const productRequests = productIds.map(id => \r\n      axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }).catch(error => {\r\n        console.error(`获取商品${id}详情失败:`, error)\r\n        return null\r\n      })\r\n    )\r\n\r\n    // 等待所有商品详情请求完成\r\n    const productResponses = await Promise.all(productRequests)\r\n    \r\n    // 构建商品信息映射表\r\n    const productMap = {}\r\n    productResponses.forEach((res, index) => {\r\n      if (res && res.data) {\r\n        const product = res.data\r\n        productMap[productIds[index]] = {\r\n          name: product.productName,\r\n          // 使用第一张图片或默认图片\r\n          image: product.images && product.images.length > 0 \r\n            ? product.images[0] \r\n            : 'https://via.placeholder.com/60'\r\n        }\r\n      }\r\n    })\r\n\r\n    // 更新订单中的商品信息\r\n    backendOrders.forEach(order => {\r\n      order.items.forEach(item => {\r\n        const productInfo = productMap[item.id]\r\n        if (productInfo) {\r\n          item.name = productInfo.name\r\n          item.image = productInfo.image\r\n        }\r\n      })\r\n    })\r\n\r\n    // 添加评价状态逻辑\r\n    const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\r\n    \r\n    backendOrders.forEach(order => {\r\n      // 设置订单支付状态\r\n      order.isPaid = ['PAID', 'SHIPPED', 'COMPLETED'].includes(order.status)\r\n      \r\n      // 设置每个商品项的评价状态\r\n      order.items.forEach(item => {\r\n        // 检查该商品是否已有评价\r\n        const hasReview = reviews.some(review => \r\n          review.orderItemId === item.orderItemId\r\n        )\r\n        item.reviewed = hasReview\r\n      })\r\n    })\r\n\r\n    // 保存到localStorage（保持原有功能）\r\n    localStorage.setItem('orders', JSON.stringify(backendOrders))\r\n    \r\n    // 应用筛选条件（原有逻辑）\r\n    let filteredOrders = [...backendOrders]\r\n    \r\n    // 状态筛选\r\n    if (filterStatus.value !== 'all') {\r\n      filteredOrders = filteredOrders.filter(order => \r\n        order.status === filterStatus.value\r\n      )\r\n    }\r\n    \r\n    // 日期筛选\r\n    if (filterDate.value && filterDate.value.length === 2) {\r\n      const startDate = new Date(filterDate.value[0])\r\n      const endDate = new Date(filterDate.value[1])\r\n      endDate.setHours(23, 59, 59, 999) // 包含结束日期的全天\r\n      \r\n      filteredOrders = filteredOrders.filter(order => {\r\n        const orderDate = new Date(order.createTime)\r\n        return orderDate >= startDate && orderDate <= endDate\r\n      })\r\n    }\r\n    \r\n    // 拆分订单为商品行\r\n    const lines = []\r\n    filteredOrders.forEach(order => {\r\n      order.items.forEach((item, index) => {\r\n        lines.push({\r\n          ...order,\r\n          item, // 当前商品项\r\n          isFirst: index === 0 // 标记是否是订单的第一行\r\n        })\r\n      })\r\n    })\r\n    \r\n    // 分页处理\r\n    const start = (currentPage.value - 1) * pageSize.value\r\n    orderLines.value = lines.slice(start, start + pageSize.value)\r\n    total.value = lines.length\r\n    \r\n  } catch (error) {\r\n    console.error('订单加载失败:', error)\r\n    \r\n    // 更详细的错误信息\r\n    let errorMessage = '订单加载失败'\r\n    if (error.response) {\r\n      // 服务器响应了错误状态码\r\n      if (error.response.status === 401) {\r\n        errorMessage = '用户未认证，请重新登录'\r\n      } else if (error.response.status === 403) {\r\n        errorMessage = '没有权限访问订单数据'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发出但没有收到响应\r\n      errorMessage = '无法连接到服务器，请检查网络连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    orderLines.value = []\r\n  }\r\n}\r\n\r\nconst openReviewDialog = (orderLine) => {\r\n  currentReviewOrderLine.value = orderLine\r\n  const customerId = getCustomerIdFromToken()\r\n  \r\n  reviewForm.value = {\r\n    orderItemId: orderLine.item.orderItemId, // 使用订单项ID\r\n    customerId: customerId, // 设置用户ID\r\n    rating: 5,\r\n    content: ''\r\n  }\r\n  reviewDialogVisible.value = true\r\n}\r\n\r\nconst submitReview = async () => {\r\n  try {\r\n    const token = localStorage.getItem('token')\r\n    if (!token) {\r\n      ElMessage.error('用户未登录')\r\n      return\r\n    }\r\n    \r\n    // 调用后端评价接口\r\n    const response = await axios.post(\r\n      'http://algorineko.top:8080/api/customer/review/add',\r\n      {\r\n        orderItemId: reviewForm.value.orderItemId,\r\n        customerId: reviewForm.value.customerId,\r\n        rating: reviewForm.value.rating,\r\n        comment: reviewForm.value.content\r\n      },\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n    \r\n    if (response.data === '评论提交成功') {\r\n      // 获取本地存储的评价记录\r\n      const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\r\n      \r\n      // 添加新的评价记录（使用订单项ID作为标识）\r\n      reviews.push({\r\n        orderItemId: reviewForm.value.orderItemId,\r\n        rating: reviewForm.value.rating,\r\n        content: reviewForm.value.content,\r\n        date: new Date().toLocaleString(),\r\n        itemSnapshot: {\r\n          id: currentReviewOrderLine.value.item.id,\r\n          name: currentReviewOrderLine.value.item.name,\r\n          price: currentReviewOrderLine.value.item.price,\r\n          quantity: currentReviewOrderLine.value.item.quantity,\r\n          image: currentReviewOrderLine.value.item.image\r\n        }\r\n      })\r\n      \r\n      // 更新本地存储\r\n      localStorage.setItem('productReviews', JSON.stringify(reviews))\r\n      \r\n      ElMessage.success('评价提交成功')\r\n      reviewDialogVisible.value = false\r\n      \r\n      // 重新加载订单数据更新评价状态\r\n      loadOrders()\r\n    } else {\r\n      ElMessage.error('评价提交失败：' + response.data)\r\n    }\r\n  } catch (error) {\r\n    console.error('评价提交失败:', error)\r\n    let errorMessage = '评价提交失败'\r\n    if (error.response) {\r\n      if (error.response.data) {\r\n        errorMessage += `: ${error.response.data}`\r\n      }\r\n    }\r\n    ElMessage.error(errorMessage)\r\n  }\r\n}\r\n\r\n// 支付订单\r\nconst payOrder = async (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  \r\n  // 调用API更新订单状态为已付款（使用大写状态字符串）\r\n  const success = await updateOrderStatus(orderId, 'PAID')\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(order => {\r\n      if (order.orderId === orderId) {\r\n        return {\r\n          ...order,\r\n          status: 'PAID', // 状态变为待发货\r\n          isPaid: true\r\n        }\r\n      }\r\n      return order\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success(`订单 #${orderId} 支付成功，等待商家发货`)\r\n    loadOrders()\r\n  }\r\n}\r\n\r\n// 确认收货\r\nconst confirmReceipt = async (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  \r\n  // 调用API更新订单状态为已完成（使用大写状态字符串）\r\n  const success = await updateOrderStatus(orderId, 'COMPLETED')\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(order => {\r\n      if (order.orderId === orderId) {\r\n        return {\r\n          ...order,\r\n          status: 'COMPLETED'\r\n        }\r\n      }\r\n      return order\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success(`订单 #${orderId} 确认收货成功`)\r\n    loadOrders()\r\n  }\r\n}\r\n\r\n// 分页处理\r\nconst handlePageChange = (page) => {\r\n  currentPage.value = page\r\n  loadOrders()\r\n}\r\n\r\n// 显示物流详情\r\nconst showTrackingInfo = async (orderLine) => {\r\n  try {\r\n    // 重置物流信息\r\n    currentTrackingInfo.value = {\r\n      logisticsCompany: '',\r\n      trackingNumber: ''\r\n    }\r\n    \r\n    // 调用物流接口\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/tracking/${orderLine.orderId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 获取当前订单项的物流信息\r\n    const itemLogistics = response.data.itemLogistics\r\n    const orderItemId = orderLine.item.orderItemId\r\n    \r\n    if (itemLogistics && itemLogistics[orderItemId]) {\r\n      const logisticsInfo = itemLogistics[orderItemId]\r\n      currentTrackingInfo.value = {\r\n        logisticsCompany: logisticsInfo.logisticsCompany || '未知',\r\n        trackingNumber: logisticsInfo.trackingNumber || '暂无'\r\n      }\r\n    } else {\r\n      ElMessage.warning('未找到该订单项的物流信息')\r\n    }\r\n    \r\n    trackingDialogVisible.value = true\r\n  } catch (error) {\r\n    console.error('获取物流信息失败:', error)\r\n    ElMessage.error('获取物流信息失败')\r\n  }\r\n}\r\n\r\n// 初始化加载\r\nonMounted(() => {\r\n  loadOrders()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.user-orders {\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n}\r\n\r\n.filter-section {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.el-table {\r\n  margin-top: 15px;\r\n}\r\n\r\n.empty-placeholder {\r\n  margin-top: 50px;\r\n}\r\n\r\n.el-tag {\r\n  margin: 2px 0;\r\n}\r\n\r\n.product-list {\r\n  padding: 10px 0;\r\n}\r\n\r\n.product-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 10px 0;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  color: #606266;\r\n  text-decoration: none;\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  &:hover {\r\n    color: #409eff;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n.product-price {\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 响应式适配 */\r\n@media (max-width: 768px) {\r\n  .filter-section {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .el-table {\r\n    overflow-x: auto;\r\n  }\r\n}\r\n</style>","import script from \"./UserOrders.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UserOrders.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UserOrders.vue?vue&type=style&index=0&id=1ffe6f27&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1ffe6f27\"]])\n\nexport default __exports__"],"names":["statusText","PENDING","PAID","SHIPPED","COMPLETED","CANCELED","pending","paid","shipped","completed","canceled","statusType","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","localStorage","getItem","username","computed","payload","sub","statusOptions","ref","value","label","orderLines","filterStatus","filterDate","total","pageSize","currentPage","reviewDialogVisible","reviewForm","orderItemId","customerId","rating","content","currentReviewOrderLine","trackingDialogVisible","currentTrackingInfo","logisticsCompany","trackingNumber","getCustomerIdFromToken","ElMessage","decoded","updateOrderStatus","async","orderId","newStatus","response","axios","put","headers","data","loadOrders","get","backendOrders","order","merchantId","totalPrice","status","createTime","Date","toLocaleString","items","item","id","productId","name","price","quantity","image","productIds","Set","flatMap","productRequests","catch","productResponses","Promise","all","productMap","forEach","res","index","product","productName","images","length","productInfo","reviews","isPaid","includes","hasReview","some","review","reviewed","setItem","stringify","filteredOrders","filter","startDate","endDate","setHours","orderDate","lines","push","isFirst","start","errorMessage","message","request","openReviewDialog","orderLine","submitReview","post","comment","date","itemSnapshot","success","payOrder","warning","savedOrders","updatedOrders","confirmReceipt","handlePageChange","page","showTrackingInfo","itemLogistics","logisticsInfo","onMounted","__exports__"],"sourceRoot":""}