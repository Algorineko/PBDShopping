{"version":3,"file":"js/906.836c60c6.js","mappings":"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","sources":["webpack://project/./src/components/ShoppingCart.vue","webpack://project/./src/components/ShoppingCart.vue?d705","webpack://project/./src/stores/cart.js"],"sourcesContent":["<template>\r\n  <div class=\"shopping-cart\">\r\n    <h2>购物车 ({{ cartItems?.length || 0 }})</h2>\r\n    \r\n    <div v-if=\"loading\" class=\"loading-overlay\">\r\n      <el-progress :percentage=\"50\" :indeterminate=\"true\" />\r\n      <p>加载购物车中...</p>\r\n    </div>\r\n    \r\n    <div v-if=\"error\" class=\"error-message\">\r\n      <el-alert :title=\"error\" type=\"error\" show-icon />\r\n      <el-button type=\"primary\" @click=\"retryFetch\">重试</el-button>\r\n    </div>\r\n    \r\n    <template v-else>\r\n      <div class=\"cart-actions\" v-if=\"cartItems?.length > 0\">\r\n        <el-checkbox \r\n          :model-value=\"allSelected\"\r\n          @change=\"handleToggleSelectAll\"\r\n        >\r\n          全选\r\n        </el-checkbox>\r\n        <el-button \r\n          type=\"danger\" \r\n          size=\"small\"\r\n          :disabled=\"selectedItems.size === 0 || cartStore.loading\"\r\n          :loading=\"cartStore.loading\"\r\n          @click=\"removeSelectedItems\"\r\n        >\r\n          删除选中\r\n        </el-button>\r\n      </div>\r\n      \r\n      <el-table \r\n        :data=\"cartItems\"\r\n        v-if=\"cartItems?.length > 0\"\r\n        border\r\n        style=\"width: 100%\"\r\n      >\r\n        <!-- 选择列 -->\r\n        <el-table-column width=\"50\" align=\"center\">\r\n          <template #header>\r\n            <el-checkbox \r\n              :model-value=\"allSelected\"\r\n              @change=\"handleToggleSelectAll\" \r\n            />\r\n          </template>\r\n          <template #default=\"{ row }\">\r\n            <el-checkbox \r\n              :model-value=\"selectedItems.has(row.cartItemId)\" \r\n              @change=\"handleToggleSelection(row.cartItemId)\"\r\n            />\r\n          </template>\r\n        </el-table-column>\r\n        \r\n        <!-- 商品列 -->\r\n        <el-table-column label=\"商品\" width=\"300\">\r\n          <template #default=\"{ row }\">\r\n            <div class=\"product-info\" v-if=\"row\">\r\n              <router-link :to=\"`/buyer/${username}/product/${row.id}`\">\r\n                <el-image \r\n                  :src=\"row.image || '/placeholder-product.jpg'\"\r\n                  width=\"80\"\r\n                  style=\"cursor: pointer\"\r\n                />\r\n              </router-link>\r\n              <router-link \r\n                :to=\"`/buyer/${username}/product/${row.id}`\"\r\n                class=\"product-link\"\r\n              >\r\n                {{ row.name || '未知商品' }}\r\n              </router-link>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <!-- 单价列 -->\r\n        <el-table-column label=\"单价\" width=\"120\">\r\n          <template #default=\"{ row }\">\r\n            ¥{{ (row.price || 0).toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <!-- 数量列 -->\r\n        <el-table-column label=\"数量\" width=\"150\">\r\n          <template #default=\"{ row }\">\r\n            <el-input-number \r\n              v-model=\"row.quantity\"\r\n              :min=\"1\"\r\n              :max=\"99\"\r\n              :disabled=\"cartStore.loading\"\r\n              @change=\"updateQuantity(row)\"\r\n            />\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <!-- 小计列 -->\r\n        <el-table-column label=\"小计\" width=\"120\">\r\n          <template #default=\"{ row }\">\r\n            ¥{{ ((row.price || 0) * (row.quantity || 1)).toFixed(2) }}\r\n          </template>\r\n        </el-table-column>\r\n        \r\n        <!-- 操作列 -->\r\n        <el-table-column label=\"操作\" width=\"120\">\r\n          <template #default=\"{ row }\">\r\n            <el-button \r\n              type=\"danger\" \r\n              :disabled=\"cartStore.loading\"\r\n              :loading=\"cartStore.loading\"\r\n              @click=\"removeItem(row)\"\r\n            >\r\n              删除\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 空购物车提示 -->\r\n      <el-empty\r\n        v-else\r\n        description=\"您的购物车还是空的，快去选购商品吧！\"\r\n        class=\"empty-tip\"\r\n      />\r\n\r\n      <!-- 结算区域 -->\r\n      <div class=\"checkout\" v-if=\"cartItems?.length > 0\">\r\n        <div class=\"selected-info\">\r\n          已选 <span class=\"highlight\">{{ selectedItems.size }}</span> 件商品\r\n        </div>\r\n        <div class=\"total\">\r\n          合计：<span class=\"highlight\">¥{{ (selectedTotalPrice || 0).toFixed(2) }}</span>\r\n        </div>\r\n        <el-button \r\n          type=\"primary\" \r\n          size=\"large\"\r\n          :disabled=\"selectedItems.size === 0 || cartStore.loading || checkoutLoading\"\r\n          :loading=\"checkoutLoading\"\r\n          @click=\"checkout\"\r\n        >\r\n          去结算\r\n        </el-button>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ElMessage } from 'element-plus'\r\nimport { useCartStore } from '@/stores/cart'\r\nimport { storeToRefs } from 'pinia'\r\nimport { computed, onMounted, ref } from 'vue'\r\nimport axios from 'axios'\r\n\r\nconst cartStore = useCartStore()\r\nconst { \r\n  items: cartItems, \r\n  selectedItems,\r\n  selectedTotalPrice,\r\n  selectedItemsList,\r\n  loading,\r\n  error\r\n} = storeToRefs(cartStore)\r\n\r\n// 添加结算加载状态\r\nconst checkoutLoading = ref(false)\r\n// 从token获取用户名\r\nconst token = localStorage.getItem('token')\r\nconst username = computed(() => {\r\n  if (token) {\r\n    const payload = parseJwt(token)\r\n    return payload.sub || 'guest'\r\n  }\r\n  return 'guest'\r\n})\r\n\r\n// 计算是否全选\r\nconst allSelected = computed(() => {\r\n  return selectedItems.value.size === cartItems.value.length && cartItems.value.length > 0\r\n})\r\n\r\n// 初始化获取购物车数据\r\nonMounted(async () => {\r\n  if (!cartItems.value.length) {\r\n    await cartStore.fetchCart()\r\n  }\r\n})\r\n\r\n// 重试获取购物车\r\nconst retryFetch = async () => {\r\n  await cartStore.fetchCart()\r\n}\r\n\r\n// 处理全选/取消全选\r\nconst handleToggleSelectAll = () => {\r\n  cartStore.toggleSelectAll()\r\n}\r\n\r\n// 处理单个选择项切换\r\nconst handleToggleSelection = (id) => {\r\n  cartStore.toggleSelection(id)\r\n}\r\n\r\nconst updateQuantity = async (item) => {\r\n  if (!item?.cartItemId) {\r\n    ElMessage.error('无效的商品数据')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    await cartStore.updateQuantity(item.cartItemId, item.quantity)\r\n    ElMessage.success('数量更新成功')\r\n  } catch (err) {\r\n    ElMessage.error(`数量更新失败: ${err.message || '未知错误'}`)\r\n  }\r\n}\r\n\r\nconst removeItem = async (item) => {\r\n  if (!item?.cartItemId) {\r\n    ElMessage.error('无效操作')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    await cartStore.removeItem(item.cartItemId)\r\n    ElMessage.success('已移除商品')\r\n  } catch (err) {\r\n    ElMessage.error(`移除商品失败: ${err.message || '未知错误'}`)\r\n  }\r\n}\r\n\r\n// 删除选中的商品\r\nconst removeSelectedItems = async () => {\r\n  if (selectedItems.value.size === 0) return\r\n  \r\n  const selectedIds = [...selectedItems.value]\r\n  try {\r\n    await cartStore.removeItems(selectedIds)\r\n    ElMessage.success(`已删除 ${selectedIds.length} 件商品`)\r\n  } catch (err) {\r\n    ElMessage.error(`删除商品失败: ${err.message || '未知错误'}`)\r\n  }\r\n}\r\n\r\n// 获取商品商家信息\r\nconst fetchProductMerchant = async (productId) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/merchant/product/detail/${productId}`\r\n    )\r\n    \r\n    if (response.data && response.data.merchantId) {\r\n      return response.data.merchantId\r\n    }\r\n    \r\n    throw new Error('未获取到商家信息')\r\n  } catch (error) {\r\n    console.error(`获取商品 ${productId} 的商家信息失败:`, error)\r\n    throw new Error(`获取商品商家信息失败: ${error.message || '未知错误'}`)\r\n  }\r\n}\r\n\r\n// JWT 解析函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\n// 结算功能\r\nconst checkout = async () => {\r\n  if (selectedItems.value.size === 0) {\r\n    ElMessage.warning('请选择要结算的商品')\r\n    return\r\n  }\r\n  \r\n  checkoutLoading.value = true\r\n  \r\n  try {\r\n    // 1. 获取所有商品的商家ID\r\n    const merchantPromises = selectedItemsList.value.map(item => \r\n      fetchProductMerchant(item.id)\r\n    )\r\n    \r\n    const merchantIds = await Promise.all(merchantPromises)\r\n    \r\n    // 2. 检查所有商品是否属于同一商家\r\n    const uniqueMerchantIds = [...new Set(merchantIds)]\r\n    \r\n    if (uniqueMerchantIds.length === 0) {\r\n      throw new Error('无法确定商家信息')\r\n    }\r\n    \r\n    if (uniqueMerchantIds.length > 1) {\r\n      throw new Error('您选择的商品来自不同商家，请分开结算')\r\n    }\r\n    \r\n    const merchantId = uniqueMerchantIds[0]\r\n    \r\n    // 3. 调用后端API创建订单\r\n    const token = localStorage.getItem('token')\r\n    if (!token) {\r\n      throw new Error('请先登录后再结算')\r\n    }\r\n    \r\n    // 解析token获取用户ID\r\n    const payload = parseJwt(token)\r\n    if (!payload || !payload.customerId) {\r\n      throw new Error('用户信息不完整，请重新登录')\r\n    }\r\n    console.log('payload',payload)\r\n    // 构造请求数据\r\n    const orderItems = selectedItemsList.value.map(item => ({\r\n      productId: item.id,\r\n      quantity: item.quantity\r\n    }))\r\n    \r\n    const requestData = {\r\n      customerId: Number(payload.customerId),\r\n      merchantId: merchantId,\r\n      items: orderItems\r\n    }\r\n    console.log('requestData',requestData)  \r\n    // 调用创建订单API\r\n    const response = await axios.post(\r\n      'http://algorineko.top:8080/api/order/create',\r\n      requestData,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n    \r\n    if (!response.data) {\r\n      throw new Error('订单创建失败')\r\n    }\r\n    \r\n    // 4. 从购物车中移除已结算商品\r\n    const selectedIds = [...selectedItems.value]\r\n    await cartStore.removeItems(selectedIds)\r\n    \r\n    ElMessage.success('订单创建成功！')\r\n    \r\n    // 跳转到订单页面\r\n    // router.push(`/buyer/user/orders`)\r\n  } catch (error) {\r\n    let errorMsg = '订单创建失败'\r\n    \r\n    // 处理特定错误类型\r\n    if (error.message.includes('不同商家')) {\r\n      errorMsg = error.message\r\n    } else if (error.message.includes('商家信息')) {\r\n      errorMsg = error.message\r\n    } else if (error.response) {\r\n      if (error.response.status === 400) {\r\n        errorMsg = error.response.data?.message || '请求参数错误'\r\n      } else if (error.response.status === 401) {\r\n        errorMsg = '身份验证失败，请重新登录'\r\n      } else if (error.response.status === 500) {\r\n        errorMsg = error.response.data?.message || '服务器内部错误'\r\n      } else {\r\n        errorMsg = error.response.data?.message || '未知错误'\r\n      }\r\n    } else {\r\n      errorMsg = error.message || '网络错误，请检查连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMsg)\r\n    console.error('结算失败:', error)\r\n  } finally {\r\n    checkoutLoading.value = false\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.product-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-link {\r\n  color: #606266;\r\n  text-decoration: none;\r\n  &:hover {\r\n    color: #409eff;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n.checkout {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  gap: 30px;\r\n}\r\n\r\n.total {\r\n  font-size: 20px;\r\n  color: #f56c6c;\r\n}\r\n\r\n.empty-tip {\r\n  margin-top: 50px;\r\n  padding: 40px 0;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.cart-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.selected-info {\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.highlight {\r\n  color: #f56c6c;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n}\r\n\r\n.loading-overlay {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  border-radius: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.error-message {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 15px;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  margin-bottom: 20px;\r\n}\r\n</style>","import script from \"./ShoppingCart.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ShoppingCart.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ShoppingCart.vue?vue&type=style&index=0&id=a9ef86cc&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-a9ef86cc\"]])\n\nexport default __exports__","// stores/cart.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\n// 解析JWT token的辅助函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const useCartStore = defineStore('cart', () => {\r\n  const items = ref([])\r\n  const selectedItems = ref(new Set())\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n  \r\n  // 获取商品详情\r\n  const fetchProductDetail = async (productId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://algorineko.top:8080/api/merchant/product/detail/${productId}`\r\n      )\r\n      return response.data\r\n    } catch (err) {\r\n      console.error(`获取商品详情失败 (ID: ${productId}):`, err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 添加商品（本地方法）\r\n  const addItem = (item) => {\r\n    const existing = items.value.find(i => i.id === item.id)\r\n    if (existing) {\r\n      existing.quantity += Number(item.quantity) || 1\r\n    } else {\r\n      items.value.push({\r\n        id: item.id,\r\n        name: item.name || '未知商品',\r\n        price: Number(item.price) || 0,\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.image || '/placeholder-product.jpg',\r\n        cartItemId: item.cartItemId\r\n      })\r\n    }\r\n  }\r\n\r\n  // 新增：API方式添加商品到购物车\r\n  const addItemToCart = async (item) => {\r\n    const token = localStorage.getItem('token')\r\n    if (!token) {\r\n      throw new Error('请先登录后再添加商品到购物车')\r\n    }\r\n    \r\n    // 从token解析用户信息\r\n    const payload = parseJwt(token)\r\n    if (!payload || !payload.customerId) {\r\n      throw new Error('用户信息不完整，请重新登录')\r\n    }\r\n    \r\n    // 构造请求数据\r\n    const requestData = {\r\n      customerId: Number(payload.customerId),\r\n      productId: Number(item.id),\r\n      quantity: Number(item.quantity),\r\n      selectedOptions: \"\"\r\n    }\r\n    \r\n    try {\r\n      // 调用后端加入购物车API\r\n      const response = await axios.post(\r\n        'http://algorineko.top:8080/api/customer/cart/add', \r\n        requestData,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地购物车状态\r\n      addItem({\r\n        id: item.id,\r\n        name: item.name,\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: item.image\r\n      })\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      let errorMsg = '加入购物车失败'\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 400) {\r\n          errorMsg = error.response.data?.message || '请求参数错误'\r\n        } else if (error.response.status === 401) {\r\n          errorMsg = '身份验证失败，请重新登录'\r\n        } else if (error.response.status === 500) {\r\n          errorMsg = error.response.data?.message || '服务器内部错误'\r\n        } else {\r\n          errorMsg = error.response.data?.message || '未知错误'\r\n        }\r\n      } else {\r\n        errorMsg = error.message || '网络错误，请检查连接'\r\n      }\r\n      \r\n      throw new Error(errorMsg)\r\n    }\r\n  }\r\n  \r\n  // 从后端获取购物车数据\r\n  const fetchCart = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n    \r\n      const response = await axios.get(\r\n        'http://algorineko.top:8080/api/customer/cart/get',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 创建临时数组存储购物车项\r\n      const tempItems = []\r\n      \r\n      // 遍历购物车项并获取商品详情\r\n      for (const cartItem of response.data) {\r\n        const productDetail = await fetchProductDetail(cartItem.productId)\r\n        \r\n        // 合并购物车项和商品详情数据\r\n        tempItems.push({\r\n          id: cartItem.productId,\r\n          cartItemId: cartItem.cartItemId,\r\n          name: productDetail?.productName || cartItem.productName || '未知商品',\r\n          price: Number(productDetail?.price) || Number(cartItem.price) || 0,\r\n          quantity: Math.max(1, Number(cartItem.quantity) || 1),\r\n          image: cartItem.image || '/placeholder-product.jpg'\r\n        })\r\n      }\r\n      \r\n      // 更新购物车项\r\n      items.value = tempItems\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('获取购物车失败:', err)\r\n      // 错误时保持现有数据\r\n      if (!items.value.length) {\r\n        items.value = []\r\n      }\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新购物车项数量\r\n  const updateQuantity = async (cartItemId, quantity) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 从token解析用户信息\r\n      const payload = parseJwt(token)\r\n      if (!payload || !payload.customerId) {\r\n        throw new Error('用户信息不完整，请重新登录')\r\n      }\r\n      \r\n      // 查找商品信息\r\n      const item = items.value.find(i => i.cartItemId === cartItemId)\r\n      if (!item) {\r\n        throw new Error('购物车项不存在')\r\n      }\r\n      \r\n      // 构建符合后端要求的请求体\r\n      const requestData = {\r\n        cartItemId: Number(cartItemId),\r\n        customerId: Number(payload.customerId),\r\n        productId: Number(item.id),\r\n        quantity: Number(quantity),\r\n        selectedOptions: \"\"\r\n      }\r\n      \r\n      // 发送PUT请求\r\n      await axios.put(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        requestData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      if (item) {\r\n        item.quantity = quantity\r\n      }\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('更新购物车项失败:', err)\r\n      // 重新获取最新数据\r\n      await fetchCart()\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 移除商品 - 修正URL格式\r\n  const removeItem = async (cartItemId) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 使用正确的URL格式\r\n      await axios.delete(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId)\r\n      selectedItems.value.delete(cartItemId)\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 批量移除商品 - 修正URL格式\r\n  const removeItems = async (cartItemIds) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 并行删除所有选中项\r\n      await Promise.all(\r\n        cartItemIds.map(id => \r\n          axios.delete(\r\n            `http://algorineko.top:8080/api/customer/cart/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }\r\n          )\r\n        )\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId))\r\n      cartItemIds.forEach(id => selectedItems.value.delete(id))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('批量删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 总价计算\r\n  const totalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      const price = Number(item.price) || 0\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中商品总价\r\n  const selectedTotalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      if (selectedItems.value.has(item.cartItemId)) {\r\n        const price = Number(item.price) || 0\r\n        const quantity = Number(item.quantity) || 1\r\n        return sum + (price * quantity)\r\n      }\r\n      return sum\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中的商品列表\r\n  const selectedItemsList = computed(() => \r\n    items.value.filter(item => selectedItems.value.has(item.cartItemId))\r\n  )\r\n\r\n  const toggleSelection = (cartItemId) => {\r\n    if (selectedItems.value.has(cartItemId)) {\r\n      selectedItems.value.delete(cartItemId)\r\n    } else {\r\n      selectedItems.value.add(cartItemId)\r\n    }\r\n  }\r\n  \r\n  // 全选/取消全选\r\n  const toggleSelectAll = () => {\r\n    if (selectedItems.value.size === items.value.length) {\r\n      selectedItems.value.clear()\r\n    } else {\r\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId))\r\n    }\r\n  }\r\n\r\n  const clearSelected = () => selectedItems.value.clear()\r\n\r\n  return {\r\n    items: computed(() => items.value),\r\n    totalPrice,\r\n    selectedTotalPrice,\r\n    selectedItems: computed(() => selectedItems.value),\r\n    selectedItemsList,\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    fetchCart,\r\n    updateQuantity,\r\n    addItemToCart,\r\n    removeItem,\r\n    removeItems,\r\n    toggleSelection,\r\n    toggleSelectAll,\r\n    clearSelected\r\n  }\r\n})"],"names":["cartStore","useCartStore","items","cartItems","selectedItems","selectedTotalPrice","selectedItemsList","loading","error","storeToRefs","checkoutLoading","ref","token","localStorage","getItem","username","computed","payload","parseJwt","sub","allSelected","value","size","length","onMounted","async","fetchCart","retryFetch","handleToggleSelectAll","toggleSelectAll","handleToggleSelection","id","toggleSelection","updateQuantity","item","cartItemId","quantity","ElMessage","success","err","message","removeItem","removeSelectedItems","selectedIds","removeItems","fetchProductMerchant","response","axios","get","productId","data","merchantId","Error","console","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","checkout","merchantPromises","merchantIds","Promise","all","uniqueMerchantIds","Set","customerId","log","orderItems","requestData","Number","post","headers","errorMsg","includes","status","warning","__exports__","defineStore","fetchProductDetail","addItem","existing","find","i","push","name","price","Math","max","image","addItemToCart","selectedOptions","Authorization","tempItems","cartItem","productDetail","productName","put","delete","filter","cartItemIds","forEach","totalPrice","reduce","sum","has","add","clear","clearSelected"],"sourceRoot":""}