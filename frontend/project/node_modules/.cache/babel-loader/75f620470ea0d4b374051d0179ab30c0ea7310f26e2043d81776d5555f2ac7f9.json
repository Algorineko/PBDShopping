{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { ref, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport axios from 'axios';\n\n// 订单状态配置\n\nexport default {\n  __name: 'UserOrders',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const statusText = {\n      PENDING: '待付款',\n      PAID: '待发货',\n      SHIPPED: '已发货',\n      COMPLETED: '已完成',\n      CANCELED: '已取消',\n      // 添加小写状态映射以兼容原有逻辑\n      pending: '待付款',\n      paid: '待发货',\n      shipped: '已发货',\n      completed: '已完成',\n      canceled: '已取消'\n    };\n    const statusType = {\n      PENDING: 'warning',\n      PAID: 'primary',\n      SHIPPED: 'primary',\n      COMPLETED: 'success',\n      CANCELED: 'info',\n      // 添加小写状态映射以兼容原有逻辑\n      pending: 'warning',\n      paid: 'primary',\n      shipped: 'primary',\n      completed: 'success',\n      canceled: 'info'\n    };\n\n    // JWT 解析函数\n    const parseJwt = token => {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (e) {\n        console.error('Token解析失败:', e);\n        return null;\n      }\n    };\n\n    // 筛选选项\n    const statusOptions = ref([{\n      value: 'all',\n      label: '全部状态'\n    }, {\n      value: 'PENDING',\n      label: '待付款'\n    }, {\n      value: 'PAID',\n      label: '待发货'\n    }, {\n      value: 'SHIPPED',\n      label: '已发货'\n    }, {\n      value: 'COMPLETED',\n      label: '已完成'\n    }]);\n\n    // 订单数据\n    const orderLines = ref([]); // 用于存储拆分后的订单行\n    const filterStatus = ref('all');\n    const filterDate = ref([]);\n    const total = ref(0);\n    const pageSize = ref(10);\n    const currentPage = ref(1);\n\n    // 评价相关\n    const reviewDialogVisible = ref(false);\n    const reviewForm = ref({\n      orderId: '',\n      productId: '',\n      rating: 5,\n      content: ''\n    });\n    const currentReviewOrderLine = ref(null);\n\n    // 物流详情相关\n    const trackingDialogVisible = ref(false);\n    const currentTrackingInfo = ref({\n      trackingCompany: '',\n      trackingNumber: '',\n      shipTime: ''\n    });\n\n    // 从Token获取用户ID\n    const getCustomerIdFromToken = () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        ElMessage.error('用户未登录，请先登录');\n        return null;\n      }\n      try {\n        // 使用自定义函数解析JWT Token\n        const decoded = parseJwt(token);\n        // 假设用户ID存储在decoded.id字段中\n        return decoded.customerId || null;\n      } catch (error) {\n        console.error('Token解析失败:', error);\n        ElMessage.error('用户信息解析失败');\n        return null;\n      }\n    };\n\n    // 更新订单状态（直接使用大写的英文状态字符串）\n    const updateOrderStatus = async (orderId, newStatus) => {\n      try {\n        const response = await axios.put(`http://algorineko.top:8080/api/order/updateStatus?orderId=${orderId}&status=${newStatus}`, {}, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        return response.data === true;\n      } catch (error) {\n        console.error('更新订单状态失败:', error);\n        ElMessage.error('更新订单状态失败');\n        return false;\n      }\n    };\n\n    // 从后端API加载订单数据\n    const loadOrders = async () => {\n      try {\n        // 从Token获取用户ID\n        const customerId = getCustomerIdFromToken();\n        if (!customerId) {\n          ElMessage.error('无法获取用户信息');\n          return;\n        }\n\n        // 调用后端API获取订单\n        const response = await axios.get(`http://algorineko.top:8080/api/order/customer/${customerId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        // 转换数据结构\n        const backendOrders = response.data.map(order => ({\n          orderId: order.orderId,\n          merchantId: order.merchantId,\n          totalPrice: order.totalPrice,\n          status: order.status,\n          // 保持大写状态\n          createTime: new Date().toLocaleString(),\n          // 添加时间字段（后端未提供）\n          items: order.items.map(item => ({\n            id: item.productId,\n            name: `商品 ${item.productId}`,\n            // 默认商品名称\n            price: item.price,\n            quantity: item.quantity,\n            image: 'https://via.placeholder.com/60' // 默认图片\n          }))\n        }));\n\n        // 获取所有唯一商品ID\n        const productIds = [...new Set(backendOrders.flatMap(order => order.items.map(item => item.id)))];\n\n        // 并发获取所有商品详情\n        const productRequests = productIds.map(id => axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        }).catch(error => {\n          console.error(`获取商品${id}详情失败:`, error);\n          return null;\n        }));\n\n        // 等待所有商品详情请求完成\n        const productResponses = await Promise.all(productRequests);\n\n        // 构建商品信息映射表\n        const productMap = {};\n        productResponses.forEach((res, index) => {\n          if (res && res.data) {\n            const product = res.data;\n            productMap[productIds[index]] = {\n              name: product.productName,\n              // 使用第一张图片或默认图片\n              image: product.images && product.images.length > 0 ? product.images[0] : 'https://via.placeholder.com/60'\n            };\n          }\n        });\n\n        // 更新订单中的商品信息\n        backendOrders.forEach(order => {\n          order.items.forEach(item => {\n            const productInfo = productMap[item.id];\n            if (productInfo) {\n              item.name = productInfo.name;\n              item.image = productInfo.image;\n            }\n          });\n        });\n\n        // 添加评价状态逻辑\n        const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n        backendOrders.forEach(order => {\n          // 设置订单支付状态\n          order.isPaid = ['PAID', 'SHIPPED', 'COMPLETED'].includes(order.status);\n\n          // 设置每个商品项的评价状态\n          order.items.forEach(item => {\n            // 检查该商品是否已有评价\n            const hasReview = reviews.some(review => review.orderId === order.orderId && review.productId === item.id);\n            item.reviewed = hasReview;\n          });\n        });\n\n        // 保存到localStorage（保持原有功能）\n        localStorage.setItem('orders', JSON.stringify(backendOrders));\n\n        // 应用筛选条件（原有逻辑）\n        let filteredOrders = [...backendOrders];\n\n        // 状态筛选\n        if (filterStatus.value !== 'all') {\n          filteredOrders = filteredOrders.filter(order => order.status === filterStatus.value);\n        }\n\n        // 日期筛选\n        if (filterDate.value && filterDate.value.length === 2) {\n          const startDate = new Date(filterDate.value[0]);\n          const endDate = new Date(filterDate.value[1]);\n          endDate.setHours(23, 59, 59, 999); // 包含结束日期的全天\n\n          filteredOrders = filteredOrders.filter(order => {\n            const orderDate = new Date(order.createTime);\n            return orderDate >= startDate && orderDate <= endDate;\n          });\n        }\n\n        // 拆分订单为商品行\n        const lines = [];\n        filteredOrders.forEach(order => {\n          order.items.forEach((item, index) => {\n            lines.push({\n              ...order,\n              item,\n              // 当前商品项\n              isFirst: index === 0 // 标记是否是订单的第一行\n            });\n          });\n        });\n\n        // 分页处理\n        const start = (currentPage.value - 1) * pageSize.value;\n        orderLines.value = lines.slice(start, start + pageSize.value);\n        total.value = lines.length;\n      } catch (error) {\n        console.error('订单加载失败:', error);\n\n        // 更详细的错误信息\n        let errorMessage = '订单加载失败';\n        if (error.response) {\n          // 服务器响应了错误状态码\n          if (error.response.status === 401) {\n            errorMessage = '用户未认证，请重新登录';\n          } else if (error.response.status === 403) {\n            errorMessage = '没有权限访问订单数据';\n          } else if (error.response.data && error.response.data.message) {\n            errorMessage = error.response.data.message;\n          }\n        } else if (error.request) {\n          // 请求已发出但没有收到响应\n          errorMessage = '无法连接到服务器，请检查网络连接';\n        }\n        ElMessage.error(errorMessage);\n        orderLines.value = [];\n      }\n    };\n    const openReviewDialog = orderLine => {\n      currentReviewOrderLine.value = orderLine;\n      reviewForm.value = {\n        orderId: orderLine.orderId,\n        productId: orderLine.item.id || '',\n        // 当前商品ID\n        rating: 5,\n        content: ''\n      };\n      reviewDialogVisible.value = true;\n    };\n    const submitReview = () => {\n      const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n      // 添加商品快照信息\n      const newReview = {\n        ...reviewForm.value,\n        date: new Date().toLocaleString(),\n        itemSnapshot: {\n          id: currentReviewOrderLine.value.item.id,\n          name: currentReviewOrderLine.value.item.name,\n          price: currentReviewOrderLine.value.item.price,\n          quantity: currentReviewOrderLine.value.item.quantity,\n          image: currentReviewOrderLine.value.item.image\n        }\n      };\n      reviews.push(newReview);\n      localStorage.setItem('productReviews', JSON.stringify(reviews));\n\n      // 标记该商品已评价\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const updatedOrders = savedOrders.map(order => {\n        if (order.orderId === currentReviewOrderLine.value.orderId) {\n          // 更新订单中该商品的评价状态\n          const updatedItems = order.items.map(item => {\n            if (item.id === currentReviewOrderLine.value.item.id) {\n              return {\n                ...item,\n                reviewed: true\n              };\n            }\n            return item;\n          });\n          return {\n            ...order,\n            items: updatedItems\n          };\n        }\n        return order;\n      });\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      ElMessage.success('评价提交成功');\n      reviewDialogVisible.value = false;\n      loadOrders();\n    };\n\n    // 支付订单\n    const payOrder = async orderId => {\n      if (!orderId) {\n        ElMessage.warning('无效的订单号');\n        return;\n      }\n\n      // 调用API更新订单状态为已付款（使用大写状态字符串）\n      const success = await updateOrderStatus(orderId, 'PAID');\n      if (success) {\n        // 更新本地存储\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n        const updatedOrders = savedOrders.map(order => {\n          if (order.orderId === orderId) {\n            return {\n              ...order,\n              status: 'PAID',\n              // 状态变为待发货\n              isPaid: true\n            };\n          }\n          return order;\n        });\n        localStorage.setItem('orders', JSON.stringify(updatedOrders));\n        ElMessage.success(`订单 #${orderId} 支付成功，等待商家发货`);\n        loadOrders();\n      }\n    };\n\n    // 确认收货\n    const confirmReceipt = async orderId => {\n      if (!orderId) {\n        ElMessage.warning('无效的订单号');\n        return;\n      }\n\n      // 调用API更新订单状态为已完成（使用大写状态字符串）\n      const success = await updateOrderStatus(orderId, 'COMPLETED');\n      if (success) {\n        // 更新本地存储\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n        const updatedOrders = savedOrders.map(order => {\n          if (order.orderId === orderId) {\n            return {\n              ...order,\n              status: 'COMPLETED'\n            };\n          }\n          return order;\n        });\n        localStorage.setItem('orders', JSON.stringify(updatedOrders));\n        ElMessage.success(`订单 #${orderId} 确认收货成功`);\n        loadOrders();\n      }\n    };\n\n    // 删除订单\n    const deleteOrder = orderId => {\n      ElMessageBox.confirm('确定要删除这个订单吗？删除后无法恢复', '警告', {\n        confirmButtonText: '确定删除',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 从本地存储中删除订单\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n        const filteredOrders = savedOrders.filter(order => order.orderId !== orderId);\n        localStorage.setItem('orders', JSON.stringify(filteredOrders));\n        ElMessage.success('订单删除成功');\n        loadOrders();\n      }).catch(() => {\n        // 用户取消了删除操作\n      });\n    };\n\n    // 分页处理\n    const handlePageChange = page => {\n      currentPage.value = page;\n      loadOrders();\n    };\n\n    // 初始化加载\n    onMounted(() => {\n      loadOrders();\n    });\n    const __returned__ = {\n      statusText,\n      statusType,\n      parseJwt,\n      statusOptions,\n      orderLines,\n      filterStatus,\n      filterDate,\n      total,\n      pageSize,\n      currentPage,\n      reviewDialogVisible,\n      reviewForm,\n      currentReviewOrderLine,\n      trackingDialogVisible,\n      currentTrackingInfo,\n      getCustomerIdFromToken,\n      updateOrderStatus,\n      loadOrders,\n      openReviewDialog,\n      submitReview,\n      payOrder,\n      confirmReceipt,\n      deleteOrder,\n      handlePageChange,\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessage","ElMessageBox","axios","statusText","PENDING","PAID","SHIPPED","COMPLETED","CANCELED","pending","paid","shipped","completed","canceled","statusType","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","statusOptions","value","label","orderLines","filterStatus","filterDate","total","pageSize","currentPage","reviewDialogVisible","reviewForm","orderId","productId","rating","content","currentReviewOrderLine","trackingDialogVisible","currentTrackingInfo","trackingCompany","trackingNumber","shipTime","getCustomerIdFromToken","localStorage","getItem","decoded","customerId","updateOrderStatus","newStatus","response","put","headers","data","loadOrders","get","backendOrders","order","merchantId","totalPrice","status","createTime","Date","toLocaleString","items","item","id","name","price","quantity","image","productIds","Set","flatMap","productRequests","catch","productResponses","Promise","all","productMap","forEach","res","index","product","productName","images","length","productInfo","reviews","isPaid","includes","hasReview","some","review","reviewed","setItem","stringify","filteredOrders","filter","startDate","endDate","setHours","orderDate","lines","push","isFirst","start","errorMessage","message","request","openReviewDialog","orderLine","submitReview","newReview","date","itemSnapshot","savedOrders","updatedOrders","updatedItems","success","payOrder","warning","confirmReceipt","deleteOrder","confirm","confirmButtonText","cancelButtonText","type","then","handlePageChange","page"],"sources":["E:/实验例子/project/src/components/UserOrders.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-orders\">\r\n    <h2>我的订单</h2>\r\n    \r\n    <!-- 订单筛选 -->\r\n    <div class=\"filter-section\">\r\n      <el-select v-model=\"filterStatus\" placeholder=\"全部状态\" @change=\"loadOrders\">\r\n        <el-option\r\n          v-for=\"status in statusOptions\"\r\n          :key=\"status.value\"\r\n          :label=\"status.label\"\r\n          :value=\"status.value\"\r\n        />\r\n      </el-select>\r\n      <el-date-picker\r\n        v-model=\"filterDate\"\r\n        type=\"daterange\"\r\n        range-separator=\"至\"\r\n        start-placeholder=\"开始日期\"\r\n        end-placeholder=\"结束日期\"\r\n        @change=\"loadOrders\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 订单列表 -->\r\n    <el-table \r\n      :data=\"orderLines\"\r\n      v-if=\"orderLines.length > 0\"\r\n      border \r\n      style=\"width: 100%\"\r\n    >\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"200\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-list\">\r\n            <div class=\"product-item\">\r\n              <router-link :to=\"`/buyer/product/${row.item.id}`\">\r\n                <el-image \r\n                  :src=\"row.item.image\"\r\n                  style=\"width: 60px; height: 60px; cursor: pointer\"\r\n                  fit=\"cover\"\r\n                />\r\n              </router-link>\r\n              <div class=\"product-details\">\r\n                <router-link \r\n                  :to=\"`/buyer/product/${row.item.id}`\"\r\n                  class=\"product-name\"\r\n                >\r\n                  {{ row.item.name }}\r\n                </router-link>\r\n                <div class=\"product-price\">\r\n                  ¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"scope\">\r\n          ¥{{ (scope.row.item.price * scope.row.item.quantity).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"scope\">\r\n          <el-tag :type=\"statusType[scope.row.status] || 'info'\">\r\n            {{ statusText[scope.row.status] || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"250\">\r\n        <template #default=\"scope\">\r\n          <!-- 订单操作按钮（仅在第一行显示） -->\r\n          <div v-if=\"scope.row.isFirst\">\r\n            <!-- 付款按钮：仅待付款状态显示 -->\r\n            <el-button \r\n              v-if=\"scope.row.status === 'pending' || scope.row.status === 'PENDING'\"\r\n              type=\"success\" \r\n              size=\"small\"\r\n              @click=\"payOrder(scope.row.orderId)\"\r\n            >\r\n              付款\r\n            </el-button>\r\n            \r\n            <!-- 确认收货按钮：仅已发货状态显示 -->\r\n            <el-button \r\n              v-if=\"scope.row.status === 'shipped' || scope.row.status === 'SHIPPED'\"\r\n              type=\"warning\" \r\n              size=\"small\"\r\n              @click=\"confirmReceipt(scope.row.orderId)\"\r\n            >\r\n              确认收货\r\n            </el-button>\r\n            \r\n            <!-- 物流详情按钮：仅已发货和已完成状态显示 -->\r\n            <el-button \r\n              v-if=\"(scope.row.status === 'shipped' || scope.row.status === 'SHIPPED' || scope.row.status === 'completed' || scope.row.status === 'COMPLETED')\"\r\n              type=\"info\" \r\n              size=\"small\"\r\n              @click=\"showTrackingInfo(scope.row)\"\r\n            >\r\n              物流详情\r\n            </el-button>\r\n            \r\n            <!-- 删除订单按钮：所有状态都可以删除 -->\r\n            <el-button \r\n              type=\"danger\" \r\n              size=\"small\"\r\n              icon=\"el-icon-delete\"\r\n              @click=\"deleteOrder(scope.row.orderId)\"\r\n            >\r\n              删除\r\n            </el-button>\r\n          </div>\r\n          \r\n          <!-- 商品评价按钮（每个商品行都显示） -->\r\n          <el-button \r\n            v-if=\"(scope.row.status === 'completed' || scope.row.status === 'COMPLETED') && scope.row.isPaid && !scope.row.item.reviewed\"\r\n            type=\"warning\" \r\n            size=\"small\"\r\n            @click=\"openReviewDialog(scope.row)\"\r\n          >\r\n            评价\r\n          </el-button>\r\n          \r\n          <!-- 已评价标记 -->\r\n          <el-tag v-if=\"(scope.row.status === 'completed' || scope.row.status === 'COMPLETED') && scope.row.isPaid && scope.row.item.reviewed\" type=\"success\">\r\n            已评价\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 空状态提示 -->\r\n    <el-empty v-else description=\"暂无订单数据\" class=\"empty-placeholder\" />\r\n\r\n    <!-- 分页 -->\r\n    <div class=\"pagination\" v-if=\"orderLines.length > 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"prev, pager, next\"\r\n        :total=\"total\"\r\n        :page-size=\"pageSize\"\r\n        @current-change=\"handlePageChange\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 评价对话框 -->\r\n    <el-dialog v-model=\"reviewDialogVisible\" title=\"商品评价\">\r\n      <el-form :model=\"reviewForm\">\r\n        <el-form-item label=\"评分\">\r\n          <el-rate v-model=\"reviewForm.rating\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"评价内容\">\r\n          <el-input\r\n            v-model=\"reviewForm.content\"\r\n            type=\"textarea\"\r\n            :rows=\"4\"\r\n            placeholder=\"请输入您的使用体验\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"reviewDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitReview\">提交评价</el-button>\r\n      </template>\r\n    </el-dialog>\r\n    \r\n    <!-- 物流详情对话框 -->\r\n    <el-dialog v-model=\"trackingDialogVisible\" title=\"物流详情\">\r\n      <el-form label-width=\"100px\">\r\n        <el-form-item label=\"物流公司：\">\r\n          <span>{{ currentTrackingInfo.trackingCompany }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号：\">\r\n          <span>{{ currentTrackingInfo.trackingNumber }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"发货时间：\">\r\n          <span>{{ currentTrackingInfo.shipTime || '暂无' }}</span>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button type=\"primary\" @click=\"trackingDialogVisible = false\">关闭</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\n// 订单状态配置\r\nconst statusText = {\r\n  PENDING: '待付款',\r\n  PAID: '待发货',\r\n  SHIPPED: '已发货',\r\n  COMPLETED: '已完成',\r\n  CANCELED: '已取消',\r\n  // 添加小写状态映射以兼容原有逻辑\r\n  pending: '待付款',\r\n  paid: '待发货',\r\n  shipped: '已发货',\r\n  completed: '已完成',\r\n  canceled: '已取消'\r\n}\r\n\r\nconst statusType = {\r\n  PENDING: 'warning',\r\n  PAID: 'primary',\r\n  SHIPPED: 'primary',\r\n  COMPLETED: 'success',\r\n  CANCELED: 'info',\r\n  // 添加小写状态映射以兼容原有逻辑\r\n  pending: 'warning',\r\n  paid: 'primary',\r\n  shipped: 'primary',\r\n  completed: 'success',\r\n  canceled: 'info'\r\n}\r\n\r\n// JWT 解析函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\n// 筛选选项\r\nconst statusOptions = ref([\r\n  { value: 'all', label: '全部状态' },\r\n  { value: 'PENDING', label: '待付款' },\r\n  { value: 'PAID', label: '待发货' },\r\n  { value: 'SHIPPED', label: '已发货' },\r\n  { value: 'COMPLETED', label: '已完成' }\r\n])\r\n\r\n// 订单数据\r\nconst orderLines = ref([]) // 用于存储拆分后的订单行\r\nconst filterStatus = ref('all')\r\nconst filterDate = ref([])\r\nconst total = ref(0)\r\nconst pageSize = ref(10)\r\nconst currentPage = ref(1)\r\n\r\n// 评价相关\r\nconst reviewDialogVisible = ref(false)\r\nconst reviewForm = ref({\r\n  orderId: '',\r\n  productId: '',\r\n  rating: 5,\r\n  content: ''\r\n})\r\nconst currentReviewOrderLine = ref(null)\r\n\r\n// 物流详情相关\r\nconst trackingDialogVisible = ref(false)\r\nconst currentTrackingInfo = ref({\r\n  trackingCompany: '',\r\n  trackingNumber: '',\r\n  shipTime: ''\r\n})\r\n\r\n// 从Token获取用户ID\r\nconst getCustomerIdFromToken = () => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    ElMessage.error('用户未登录，请先登录')\r\n    return null\r\n  }\r\n  try {\r\n    // 使用自定义函数解析JWT Token\r\n    const decoded = parseJwt(token)\r\n    // 假设用户ID存储在decoded.id字段中\r\n    return decoded.customerId || null\r\n  } catch (error) {\r\n    console.error('Token解析失败:', error)\r\n    ElMessage.error('用户信息解析失败')\r\n    return null\r\n  }\r\n}\r\n\r\n// 更新订单状态（直接使用大写的英文状态字符串）\r\nconst updateOrderStatus = async (orderId, newStatus) => {\r\n  try {\r\n    const response = await axios.put(\r\n      `http://algorineko.top:8080/api/order/updateStatus?orderId=${orderId}&status=${newStatus}`,\r\n      {},\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    return response.data === true\r\n  } catch (error) {\r\n    console.error('更新订单状态失败:', error)\r\n    ElMessage.error('更新订单状态失败')\r\n    return false\r\n  }\r\n}\r\n\r\n// 从后端API加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    // 从Token获取用户ID\r\n    const customerId = getCustomerIdFromToken()\r\n    if (!customerId) {\r\n      ElMessage.error('无法获取用户信息')\r\n      return\r\n    }\r\n\r\n    // 调用后端API获取订单\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/customer/${customerId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 转换数据结构\r\n    const backendOrders = response.data.map(order => ({\r\n      orderId: order.orderId,\r\n      merchantId: order.merchantId,\r\n      totalPrice: order.totalPrice,\r\n      status: order.status, // 保持大写状态\r\n      createTime: new Date().toLocaleString(), // 添加时间字段（后端未提供）\r\n      items: order.items.map(item => ({\r\n        id: item.productId,\r\n        name: `商品 ${item.productId}`, // 默认商品名称\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: 'https://via.placeholder.com/60' // 默认图片\r\n      }))\r\n    }))\r\n\r\n    // 获取所有唯一商品ID\r\n    const productIds = [...new Set(\r\n      backendOrders.flatMap(order => \r\n        order.items.map(item => item.id)\r\n      )\r\n    )]\r\n\r\n    // 并发获取所有商品详情\r\n    const productRequests = productIds.map(id => \r\n      axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }).catch(error => {\r\n        console.error(`获取商品${id}详情失败:`, error)\r\n        return null\r\n      })\r\n    )\r\n\r\n    // 等待所有商品详情请求完成\r\n    const productResponses = await Promise.all(productRequests)\r\n    \r\n    // 构建商品信息映射表\r\n    const productMap = {}\r\n    productResponses.forEach((res, index) => {\r\n      if (res && res.data) {\r\n        const product = res.data\r\n        productMap[productIds[index]] = {\r\n          name: product.productName,\r\n          // 使用第一张图片或默认图片\r\n          image: product.images && product.images.length > 0 \r\n            ? product.images[0] \r\n            : 'https://via.placeholder.com/60'\r\n        }\r\n      }\r\n    })\r\n\r\n    // 更新订单中的商品信息\r\n    backendOrders.forEach(order => {\r\n      order.items.forEach(item => {\r\n        const productInfo = productMap[item.id]\r\n        if (productInfo) {\r\n          item.name = productInfo.name\r\n          item.image = productInfo.image\r\n        }\r\n      })\r\n    })\r\n\r\n    // 添加评价状态逻辑\r\n    const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\r\n    \r\n    backendOrders.forEach(order => {\r\n      // 设置订单支付状态\r\n      order.isPaid = ['PAID', 'SHIPPED', 'COMPLETED'].includes(order.status)\r\n      \r\n      // 设置每个商品项的评价状态\r\n      order.items.forEach(item => {\r\n        // 检查该商品是否已有评价\r\n        const hasReview = reviews.some(review => \r\n          review.orderId === order.orderId && review.productId === item.id\r\n        )\r\n        item.reviewed = hasReview\r\n      })\r\n    })\r\n\r\n    // 保存到localStorage（保持原有功能）\r\n    localStorage.setItem('orders', JSON.stringify(backendOrders))\r\n    \r\n    // 应用筛选条件（原有逻辑）\r\n    let filteredOrders = [...backendOrders]\r\n    \r\n    // 状态筛选\r\n    if (filterStatus.value !== 'all') {\r\n      filteredOrders = filteredOrders.filter(order => \r\n        order.status === filterStatus.value\r\n      )\r\n    }\r\n    \r\n    // 日期筛选\r\n    if (filterDate.value && filterDate.value.length === 2) {\r\n      const startDate = new Date(filterDate.value[0])\r\n      const endDate = new Date(filterDate.value[1])\r\n      endDate.setHours(23, 59, 59, 999) // 包含结束日期的全天\r\n      \r\n      filteredOrders = filteredOrders.filter(order => {\r\n        const orderDate = new Date(order.createTime)\r\n        return orderDate >= startDate && orderDate <= endDate\r\n      })\r\n    }\r\n    \r\n    // 拆分订单为商品行\r\n    const lines = []\r\n    filteredOrders.forEach(order => {\r\n      order.items.forEach((item, index) => {\r\n        lines.push({\r\n          ...order,\r\n          item, // 当前商品项\r\n          isFirst: index === 0 // 标记是否是订单的第一行\r\n        })\r\n      })\r\n    })\r\n    \r\n    // 分页处理\r\n    const start = (currentPage.value - 1) * pageSize.value\r\n    orderLines.value = lines.slice(start, start + pageSize.value)\r\n    total.value = lines.length\r\n    \r\n  } catch (error) {\r\n    console.error('订单加载失败:', error)\r\n    \r\n    // 更详细的错误信息\r\n    let errorMessage = '订单加载失败'\r\n    if (error.response) {\r\n      // 服务器响应了错误状态码\r\n      if (error.response.status === 401) {\r\n        errorMessage = '用户未认证，请重新登录'\r\n      } else if (error.response.status === 403) {\r\n        errorMessage = '没有权限访问订单数据'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发出但没有收到响应\r\n      errorMessage = '无法连接到服务器，请检查网络连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    orderLines.value = []\r\n  }\r\n}\r\n\r\nconst openReviewDialog = (orderLine) => {\r\n  currentReviewOrderLine.value = orderLine\r\n  reviewForm.value = {\r\n    orderId: orderLine.orderId,\r\n    productId: orderLine.item.id || '', // 当前商品ID\r\n    rating: 5,\r\n    content: ''\r\n  }\r\n  reviewDialogVisible.value = true\r\n}\r\n\r\nconst submitReview = () => {\r\n  const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\r\n  // 添加商品快照信息\r\n  const newReview = {\r\n    ...reviewForm.value,\r\n    date: new Date().toLocaleString(),\r\n    itemSnapshot: {\r\n      id: currentReviewOrderLine.value.item.id,\r\n      name: currentReviewOrderLine.value.item.name,\r\n      price: currentReviewOrderLine.value.item.price,\r\n      quantity: currentReviewOrderLine.value.item.quantity,\r\n      image: currentReviewOrderLine.value.item.image\r\n    }\r\n  }\r\n  \r\n  reviews.push(newReview)\r\n  \r\n  localStorage.setItem('productReviews', JSON.stringify(reviews))\r\n  \r\n  // 标记该商品已评价\r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  const updatedOrders = savedOrders.map(order => {\r\n    if (order.orderId === currentReviewOrderLine.value.orderId) {\r\n      // 更新订单中该商品的评价状态\r\n      const updatedItems = order.items.map(item => {\r\n        if (item.id === currentReviewOrderLine.value.item.id) {\r\n          return { ...item, reviewed: true }\r\n        }\r\n        return item\r\n      })\r\n      return { ...order, items: updatedItems }\r\n    }\r\n    return order\r\n  })\r\n  \r\n  localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n  \r\n  ElMessage.success('评价提交成功')\r\n  reviewDialogVisible.value = false\r\n  loadOrders()\r\n}\r\n\r\n// 支付订单\r\nconst payOrder = async (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  \r\n  // 调用API更新订单状态为已付款（使用大写状态字符串）\r\n  const success = await updateOrderStatus(orderId, 'PAID')\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(order => {\r\n      if (order.orderId === orderId) {\r\n        return {\r\n          ...order,\r\n          status: 'PAID', // 状态变为待发货\r\n          isPaid: true\r\n        }\r\n      }\r\n      return order\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success(`订单 #${orderId} 支付成功，等待商家发货`)\r\n    loadOrders()\r\n  }\r\n}\r\n\r\n// 确认收货\r\nconst confirmReceipt = async (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  \r\n  // 调用API更新订单状态为已完成（使用大写状态字符串）\r\n  const success = await updateOrderStatus(orderId, 'COMPLETED')\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(order => {\r\n      if (order.orderId === orderId) {\r\n        return {\r\n          ...order,\r\n          status: 'COMPLETED'\r\n        }\r\n      }\r\n      return order\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success(`订单 #${orderId} 确认收货成功`)\r\n    loadOrders()\r\n  }\r\n}\r\n\r\n// 删除订单\r\nconst deleteOrder = (orderId) => {\r\n  ElMessageBox.confirm(\r\n    '确定要删除这个订单吗？删除后无法恢复',\r\n    '警告',\r\n    {\r\n      confirmButtonText: '确定删除',\r\n      cancelButtonText: '取消',\r\n      type: 'warning'\r\n    }\r\n  ).then(() => {\r\n    // 从本地存储中删除订单\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const filteredOrders = savedOrders.filter(order => order.orderId !== orderId)\r\n    localStorage.setItem('orders', JSON.stringify(filteredOrders))\r\n    \r\n    ElMessage.success('订单删除成功')\r\n    loadOrders()\r\n  }).catch(() => {\r\n    // 用户取消了删除操作\r\n  })\r\n}\r\n\r\n// 分页处理\r\nconst handlePageChange = (page) => {\r\n  currentPage.value = page\r\n  loadOrders()\r\n}\r\n\r\n// 初始化加载\r\nonMounted(() => {\r\n  loadOrders()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.user-orders {\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n}\r\n\r\n.filter-section {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.el-table {\r\n  margin-top: 15px;\r\n}\r\n\r\n.empty-placeholder {\r\n  margin-top: 50px;\r\n}\r\n\r\n.el-tag {\r\n  margin: 2px 0;\r\n}\r\n\r\n.product-list {\r\n  padding: 10px 0;\r\n}\r\n\r\n.product-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 10px 0;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  color: #606266;\r\n  text-decoration: none;\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  &:hover {\r\n    color: #409eff;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n.product-price {\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 响应式适配 */\r\n@media (max-width: 768px) {\r\n  .filter-section {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .el-table {\r\n    overflow-x: auto;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}