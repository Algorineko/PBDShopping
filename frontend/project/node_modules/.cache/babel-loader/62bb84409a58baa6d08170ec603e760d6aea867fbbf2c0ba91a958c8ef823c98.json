{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'OrderManagement',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const orderFilter = ref({\n      status: 'all',\n      dateRange: []\n    });\n    const orders = ref([]);\n\n    // 发货相关状态\n    const shipDialogVisible = ref(false);\n    const currentOrderId = ref('');\n    const shipForm = ref({\n      trackingCompany: '',\n      trackingNumber: ''\n    });\n\n    // 从本地存储加载所有商品数据\n    const allProducts = ref([]);\n    const statusMap = {\n      pending: {\n        text: '待付款',\n        type: 'warning'\n      },\n      paid: {\n        text: '已付款',\n        type: 'primary'\n      },\n      shipped: {\n        text: '已发货',\n        type: 'success'\n      },\n      completed: {\n        text: '已完成',\n        type: 'info'\n      }\n    };\n\n    // 创建扁平化的订单数据结构（每个商品一行）\n    const flattenedOrders = computed(() => {\n      const myProductIds = allProducts.value.map(p => p.id);\n      const result = [];\n      filteredOrders.value.forEach(order => {\n        // 过滤出属于当前商家的商品\n        const myItems = order.items?.filter(item => myProductIds.includes(item.id)) || [];\n\n        // 为每个商品创建一行\n        myItems.forEach((item, index) => {\n          result.push({\n            ...order,\n            item,\n            isFirstItem: index === 0 // 标记是否是订单中的第一个商品\n          });\n        });\n      });\n      return result;\n    });\n\n    // 过滤订单（保留原有功能）\n    const filteredOrders = computed(() => {\n      const myProductIds = allProducts.value.map(p => p.id);\n      return (orders.value || []).filter(o => {\n        // 检查订单是否包含当前商家的商品\n        const hasMyProduct = o.items?.some(item => myProductIds.includes(item.id)) ?? false;\n\n        // 状态筛选\n        const statusMatch = orderFilter.value.status === 'all' || o.status === orderFilter.value.status;\n\n        // 日期筛选\n        const dateMatch = !orderFilter.value.dateRange?.length || new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) && new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]);\n        return statusMatch && dateMatch && hasMyProduct;\n      });\n    });\n\n    // 生成递增的物流单号\n    const generateTrackingNumber = () => {\n      let lastNumber = localStorage.getItem('lastTrackingNumber') || 0;\n      lastNumber = parseInt(lastNumber) + 1;\n      localStorage.setItem('lastTrackingNumber', lastNumber.toString());\n      return lastNumber.toString().padStart(10, '0'); // 生成10位数字，不足前面补0\n    };\n\n    // 发货操作 - 打开发货对话框\n    const handleShip = orderId => {\n      currentOrderId.value = orderId;\n      // 生成物流单号\n      shipForm.value.trackingNumber = generateTrackingNumber();\n      shipForm.value.trackingCompany = ''; // 清空物流公司\n      shipDialogVisible.value = true;\n    };\n\n    // 确认发货\n    const confirmShip = () => {\n      if (!shipForm.value.trackingCompany) {\n        ElMessage.warning('请输入物流公司');\n        return;\n      }\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const updatedOrders = savedOrders.map(o => {\n        if (o.orderId === currentOrderId.value) {\n          return {\n            ...o,\n            status: 'shipped',\n            shipTime: new Date().toLocaleString(),\n            trackingCompany: shipForm.value.trackingCompany,\n            trackingNumber: shipForm.value.trackingNumber\n          };\n        }\n        return o;\n      });\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      ElMessage.success('发货成功！');\n      shipDialogVisible.value = false;\n      loadOrders(); // 重新加载订单\n    };\n    const loadOrders = () => {\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n\n      // 应用筛选条件\n      let filteredOrders = [...savedOrders];\n\n      // 状态筛选\n      if (orderFilter.value.status !== 'all') {\n        filteredOrders = filteredOrders.filter(order => order.status === orderFilter.value.status);\n      }\n\n      // 日期筛选\n      if (orderFilter.value.dateRange && orderFilter.value.dateRange.length === 2) {\n        const startDate = new Date(orderFilter.value.dateRange[0]);\n        const endDate = new Date(orderFilter.value.dateRange[1]);\n        endDate.setHours(23, 59, 59, 999); // 包含结束日期的全天\n\n        filteredOrders = filteredOrders.filter(order => {\n          const orderDate = new Date(order.createTime);\n          return orderDate >= startDate && orderDate <= endDate;\n        });\n      }\n      orders.value = filteredOrders;\n    };\n\n    // 从本地存储加载当前商家的商品\n    const loadProducts = () => {\n      const businessId = localStorage.getItem('userId') || 'default';\n      const storageKey = `businessProducts_${businessId}`;\n      const savedProducts = localStorage.getItem(storageKey);\n      if (savedProducts) {\n        allProducts.value = JSON.parse(savedProducts);\n      } else {\n        allProducts.value = [];\n      }\n    };\n    onMounted(() => {\n      loadProducts(); // 加载当前商家的商品\n      loadOrders(); // 加载订单数据\n    });\n    const __returned__ = {\n      orderFilter,\n      orders,\n      shipDialogVisible,\n      currentOrderId,\n      shipForm,\n      allProducts,\n      statusMap,\n      flattenedOrders,\n      filteredOrders,\n      generateTrackingNumber,\n      handleShip,\n      confirmShip,\n      loadOrders,\n      loadProducts,\n      ref,\n      computed,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","ElMessage","orderFilter","status","dateRange","orders","shipDialogVisible","currentOrderId","shipForm","trackingCompany","trackingNumber","allProducts","statusMap","pending","text","type","paid","shipped","completed","flattenedOrders","myProductIds","value","map","p","id","result","filteredOrders","forEach","order","myItems","items","filter","item","includes","index","push","isFirstItem","o","hasMyProduct","some","statusMatch","dateMatch","length","Date","createTime","generateTrackingNumber","lastNumber","localStorage","getItem","parseInt","setItem","toString","padStart","handleShip","orderId","confirmShip","warning","savedOrders","JSON","parse","updatedOrders","shipTime","toLocaleString","stringify","success","loadOrders","startDate","endDate","setHours","orderDate","loadProducts","businessId","storageKey","savedProducts"],"sources":["E:/实验例子/project/src/views/business/OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-section\">\r\n    <h2><i class=\"el-icon-tickets\"></i> 订单管理</h2>\r\n    <div class=\"filter-bar\">\r\n      <div class=\"filter-group\">\r\n        <el-select \r\n          v-model=\"orderFilter.status\" \r\n          placeholder=\"订单状态\" \r\n          style=\"width: 150px\"\r\n        >\r\n          <el-option label=\"全部\" value=\"all\" />\r\n          <el-option label=\"待付款\" value=\"pending\" />\r\n          <el-option label=\"已付款\" value=\"paid\" />\r\n          <el-option label=\"已发货\" value=\"shipped\" />\r\n          <el-option label=\"已完成\" value=\"completed\" />\r\n        </el-select>\r\n        <el-date-picker\r\n          v-model=\"orderFilter.dateRange\"\r\n          type=\"daterange\"\r\n          range-separator=\"至\"\r\n          start-placeholder=\"开始日期\"\r\n          end-placeholder=\"结束日期\"\r\n          style=\"width: 350px\"\r\n        />\r\n      </div>\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"loadOrders\">搜索</el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"flattenedOrders\" border style=\"width: 100%\" class=\"data-table\">\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"180\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      \r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-row\">\r\n            <el-image \r\n              :src=\"row.item.image || '/placeholder-product.jpg'\"\r\n              style=\"width: 60px; height: 60px; border-radius: 4px;\"\r\n              fit=\"cover\"\r\n            />\r\n            <div class=\"product-details\">\r\n              <div class=\"product-name\">{{ row.item.name }}</div>\r\n              <div class=\"product-meta\">\r\n                <span class=\"product-price\">¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}</span>\r\n                <span class=\"product-subtotal\">小计: ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row?.status]?.type || 'info'\">\r\n            {{ statusMap[row?.status]?.text || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 操作列：增加发货按钮 -->\r\n      <el-table-column label=\"操作\" width=\"150\">\r\n        <template #default=\"{ row }\">\r\n          <div v-if=\"row\">\r\n            <!-- 发货按钮：只对已付款订单显示 -->\r\n            <el-button \r\n              v-if=\"row.status === 'paid' && row.isFirstItem\"\r\n              size=\"small\" \r\n              type=\"success\"\r\n              icon=\"el-icon-truck\"\r\n              @click=\"handleShip(row.orderId)\"\r\n            >发货</el-button>\r\n            <!-- 已发货状态显示 -->\r\n            <span v-else-if=\"row.status === 'shipped' && row.isFirstItem\">\r\n              <el-tag type=\"success\">已发货</el-tag>\r\n            </span>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    \r\n    <!-- 发货对话框 -->\r\n    <el-dialog v-model=\"shipDialogVisible\" title=\"订单发货\" width=\"500px\">\r\n      <el-form :model=\"shipForm\" label-width=\"100px\">\r\n        <el-form-item label=\"订单号\">\r\n          <el-input v-model=\"currentOrderId\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流公司\" required>\r\n          <el-input v-model=\"shipForm.trackingCompany\" placeholder=\"请输入物流公司名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号\">\r\n          <el-input v-model=\"shipForm.trackingNumber\" disabled />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"shipDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmShip\">确定发货</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst orderFilter = ref({ status: 'all', dateRange: [] })\r\nconst orders = ref([])\r\n\r\n// 发货相关状态\r\nconst shipDialogVisible = ref(false)\r\nconst currentOrderId = ref('')\r\nconst shipForm = ref({\r\n  trackingCompany: '',\r\n  trackingNumber: ''\r\n})\r\n\r\n// 从本地存储加载所有商品数据\r\nconst allProducts = ref([])\r\n\r\nconst statusMap = {\r\n  pending: { text: '待付款', type: 'warning' },\r\n  paid: { text: '已付款', type: 'primary' },\r\n  shipped: { text: '已发货', type: 'success' },\r\n  completed: { text: '已完成', type: 'info' }\r\n}\r\n\r\n// 创建扁平化的订单数据结构（每个商品一行）\r\nconst flattenedOrders = computed(() => {\r\n  const myProductIds = allProducts.value.map(p => p.id)\r\n  const result = []\r\n  \r\n  filteredOrders.value.forEach(order => {\r\n    // 过滤出属于当前商家的商品\r\n    const myItems = order.items?.filter(item => myProductIds.includes(item.id)) || []\r\n    \r\n    // 为每个商品创建一行\r\n    myItems.forEach((item, index) => {\r\n      result.push({\r\n        ...order,\r\n        item,\r\n        isFirstItem: index === 0  // 标记是否是订单中的第一个商品\r\n      })\r\n    })\r\n  })\r\n  \r\n  return result\r\n})\r\n\r\n// 过滤订单（保留原有功能）\r\nconst filteredOrders = computed(() => {\r\n  const myProductIds = allProducts.value.map(p => p.id)\r\n  \r\n  return (orders.value || [])\r\n    .filter(o => {\r\n      // 检查订单是否包含当前商家的商品\r\n      const hasMyProduct = o.items?.some(item => myProductIds.includes(item.id)) ?? false\r\n      \r\n      // 状态筛选\r\n      const statusMatch = orderFilter.value.status === 'all' || \r\n                       o.status === orderFilter.value.status\r\n      \r\n      // 日期筛选\r\n      const dateMatch = !orderFilter.value.dateRange?.length || (\r\n        new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) &&\r\n        new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]))\r\n      \r\n      return statusMatch && dateMatch && hasMyProduct\r\n    })\r\n})\r\n\r\n// 生成递增的物流单号\r\nconst generateTrackingNumber = () => {\r\n  let lastNumber = localStorage.getItem('lastTrackingNumber') || 0\r\n  lastNumber = parseInt(lastNumber) + 1\r\n  localStorage.setItem('lastTrackingNumber', lastNumber.toString())\r\n  return lastNumber.toString().padStart(10, '0') // 生成10位数字，不足前面补0\r\n}\r\n\r\n// 发货操作 - 打开发货对话框\r\nconst handleShip = (orderId) => {\r\n  currentOrderId.value = orderId\r\n  // 生成物流单号\r\n  shipForm.value.trackingNumber = generateTrackingNumber()\r\n  shipForm.value.trackingCompany = '' // 清空物流公司\r\n  shipDialogVisible.value = true\r\n}\r\n\r\n// 确认发货\r\nconst confirmShip = () => {\r\n  if (!shipForm.value.trackingCompany) {\r\n    ElMessage.warning('请输入物流公司')\r\n    return\r\n  }\r\n  \r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  const updatedOrders = savedOrders.map(o => {\r\n    if (o.orderId === currentOrderId.value) {\r\n      return {\r\n        ...o,\r\n        status: 'shipped',\r\n        shipTime: new Date().toLocaleString(),\r\n        trackingCompany: shipForm.value.trackingCompany,\r\n        trackingNumber: shipForm.value.trackingNumber\r\n      }\r\n    }\r\n    return o\r\n  })\r\n  \r\n  localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n  \r\n  ElMessage.success('发货成功！')\r\n  shipDialogVisible.value = false\r\n  loadOrders() // 重新加载订单\r\n}\r\n\r\nconst loadOrders = () => {\r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  \r\n  // 应用筛选条件\r\n  let filteredOrders = [...savedOrders]\r\n  \r\n  // 状态筛选\r\n  if (orderFilter.value.status !== 'all') {\r\n    filteredOrders = filteredOrders.filter(order => order.status === orderFilter.value.status)\r\n  }\r\n  \r\n  // 日期筛选\r\n  if (orderFilter.value.dateRange && orderFilter.value.dateRange.length === 2) {\r\n    const startDate = new Date(orderFilter.value.dateRange[0])\r\n    const endDate = new Date(orderFilter.value.dateRange[1])\r\n    endDate.setHours(23, 59, 59, 999) // 包含结束日期的全天\r\n    \r\n    filteredOrders = filteredOrders.filter(order => {\r\n      const orderDate = new Date(order.createTime)\r\n      return orderDate >= startDate && orderDate <= endDate\r\n    })\r\n  }\r\n  \r\n  orders.value = filteredOrders\r\n}\r\n\r\n// 从本地存储加载当前商家的商品\r\nconst loadProducts = () => {\r\n  const businessId = localStorage.getItem('userId') || 'default'\r\n  const storageKey = `businessProducts_${businessId}`\r\n  const savedProducts = localStorage.getItem(storageKey)\r\n  if (savedProducts) {\r\n    allProducts.value = JSON.parse(savedProducts)\r\n  } else {\r\n    allProducts.value = []\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  loadProducts() // 加载当前商家的商品\r\n  loadOrders()   // 加载订单数据\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.order-section h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 25px;\r\n  color: #303133;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.order-section h2 i {\r\n  margin-right: 12px;\r\n  font-size: 24px;\r\n  color: #409eff;\r\n}\r\n\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.data-table {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\n.product-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  font-size: 14px;\r\n}\r\n\r\n.product-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.product-price {\r\n  color: #666;\r\n  font-size: 13px;\r\n}\r\n\r\n.product-subtotal {\r\n  font-weight: 600;\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}