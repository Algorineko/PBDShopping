{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { useCartStore } from '@/stores/cart';\nimport axios from 'axios';\nexport default {\n  __name: 'ProductDetail',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const router = useRouter();\n    const cartStore = useCartStore();\n    const product = ref({\n      id: '',\n      name: '',\n      price: 0,\n      images: [],\n      description: ''\n    });\n    const quantity = ref(1);\n    const isAddingToCart = ref(false); // 加载状态\n\n    // 从API获取商品详情\n    const fetchProductDetail = async id => {\n      if (!id) {\n        ElMessage.error('无效的商品ID');\n        return;\n      }\n      try {\n        const response = await axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`);\n        const apiData = response.data;\n\n        // 转换API数据结构以适应前端需求\n        product.value = {\n          id: apiData.productId,\n          name: apiData.productName,\n          price: apiData.price,\n          description: apiData.description,\n          // 确保images是数组，如果为null则转换为空数组\n          images: apiData.images || []\n        };\n      } catch (error) {\n        ElMessage.error('商品加载失败');\n        console.error('商品加载错误:', error);\n      }\n    };\n    onMounted(() => {\n      const productId = route.params.id;\n      if (productId) fetchProductDetail(productId);\n    });\n\n    // 验证token有效性\n    const validateToken = async token => {\n      if (!token) return false;\n      try {\n        // 这里可以添加一个简单的API调用来验证token\n        // 例如获取用户基本信息，但为了简化，我们只检查token格式\n        // 实际项目中应该调用后端验证接口\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n          return false;\n        }\n\n        // 检查过期时间\n        const payload = JSON.parse(atob(parts[1]));\n        const exp = payload.exp * 1000;\n        return Date.now() < exp;\n      } catch (e) {\n        console.error('Token验证失败:', e);\n        return false;\n      }\n    };\n    const addToCart = async () => {\n      // 检查用户是否已登录\n      const token = localStorage.getItem('token');\n\n      // 验证token是否存在且有效\n      const isValidToken = await validateToken(token);\n      if (!token || !isValidToken) {\n        ElMessage.warning('登录已过期，请重新登录');\n\n        // 清除无效token\n        localStorage.removeItem('token');\n\n        // 重定向到登录页，并携带当前路由信息\n        router.push({\n          path: '/login',\n          query: {\n            redirect: route.fullPath\n          }\n        });\n        return;\n      }\n      isAddingToCart.value = true; // 开始加载\n\n      try {\n        // 构造请求数据 - 严格遵循后端API要求\n        const requestData = {\n          productId: Number(product.value.id),\n          // 确保转换为数字\n          quantity: quantity.value,\n          selectedOptions: \"\" // 空字符串\n        };\n        console.log(\"发送到后端的请求数据:\", JSON.stringify(requestData, null, 2));\n\n        // 调用后端加入购物车API，添加JWT令牌\n        await axios.post('http://algorineko.top:8080/api/customer/cart/add', requestData, {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // 更新本地购物车状态\n        cartStore.addItem({\n          id: product.value.id,\n          name: product.value.name,\n          price: product.value.price,\n          quantity: quantity.value,\n          image: product.value.images?.[0] || ''\n        });\n        ElMessage.success('已加入购物车');\n      } catch (error) {\n        console.error('加入购物车失败:', error);\n\n        // 更详细的错误处理\n        if (error.response) {\n          console.error('错误详情:', error.response.data);\n          if (error.response.status === 401 || error.response.status === 403) {\n            // 处理认证错误\n            ElMessage.error('身份验证失败，请重新登录');\n\n            // 清除无效token\n            localStorage.removeItem('token');\n\n            // 重定向到登录页\n            router.push({\n              path: '/login',\n              query: {\n                redirect: route.fullPath\n              }\n            });\n          } else if (error.response.status === 500) {\n            // 后端服务错误 - 提供用户友好的提示和解决方案\n            ElMessageBox.confirm('服务器暂时无法处理您的请求，可能是服务维护或内部错误。您可以：', '服务异常', {\n              confirmButtonText: '重试',\n              cancelButtonText: '返回首页',\n              type: 'error'\n            }).then(() => {\n              // 用户选择重试\n              addToCart();\n            }).catch(() => {\n              // 用户选择返回首页\n              router.push('/');\n            });\n          } else if (error.response.status === 400) {\n            // 处理400错误\n            const errorMsg = error.response.data?.message || '请求参数错误';\n            ElMessage.error(`加入购物车失败: ${errorMsg}`);\n          } else {\n            ElMessage.error(`加入购物车失败: ${error.response.data?.message || '未知错误'}`);\n          }\n        } else {\n          ElMessage.error('网络错误，请检查连接');\n        }\n      } finally {\n        isAddingToCart.value = false; // 结束加载\n      }\n    };\n    const __returned__ = {\n      route,\n      router,\n      cartStore,\n      product,\n      quantity,\n      isAddingToCart,\n      fetchProductDetail,\n      validateToken,\n      addToCart,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get useCartStore() {\n        return useCartStore;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","useRouter","ElMessage","ElMessageBox","useCartStore","axios","route","router","cartStore","product","id","name","price","images","description","quantity","isAddingToCart","fetchProductDetail","error","response","get","apiData","data","value","productId","productName","console","params","validateToken","token","parts","split","length","payload","JSON","parse","atob","exp","Date","now","e","addToCart","localStorage","getItem","isValidToken","warning","removeItem","push","path","query","redirect","fullPath","requestData","Number","selectedOptions","log","stringify","post","headers","addItem","image","success","status","confirm","confirmButtonText","cancelButtonText","type","then","catch","errorMsg","message"],"sources":["E:/实验例子/project/src/views/Buyer/ProductDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-detail\">\r\n    <el-button type=\"text\" @click=\"$router.go(-1)\">返回</el-button>\r\n    \r\n    <div class=\"detail-content\">\r\n      <el-carousel :interval=\"4000\" height=\"400px\" v-if=\"product.images?.length > 0\">\r\n        <el-carousel-item \r\n          v-for=\"(img, index) in product.images\" \r\n          :key=\"index\"\r\n          style=\"height: 400px;\"\r\n        >\r\n          <el-image \r\n            :src=\"img\" \r\n            fit=\"cover\" \r\n            style=\"width: 100%; height: 100%;\"\r\n          />\r\n        </el-carousel-item>\r\n      </el-carousel>\r\n      \r\n      <!-- 无图片提示 -->\r\n      <div v-else class=\"no-images\">\r\n        <el-empty description=\"暂无商品图片\" />\r\n      </div>\r\n\r\n      <div class=\"product-info\">\r\n        <h1>{{ product.name }}</h1>\r\n        <p class=\"price\">¥{{ product.price }}</p>\r\n        \r\n        <div class=\"action-group\">\r\n          <el-input-number \r\n            v-model=\"quantity\" \r\n            :min=\"1\"\r\n          />\r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"addToCart\"\r\n            :loading=\"isAddingToCart\"\r\n          >\r\n            加入购物车\r\n          </el-button>\r\n        </div>\r\n\r\n        <el-divider />\r\n        <div class=\"description\">\r\n          <h3>商品详情</h3>\r\n          <p>{{ product.description || '暂无详情描述' }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport { useCartStore } from '@/stores/cart'\r\nimport axios from 'axios'\r\n\r\nconst route = useRoute()\r\nconst router = useRouter()\r\nconst cartStore = useCartStore()\r\n\r\nconst product = ref({\r\n  id: '',\r\n  name: '',\r\n  price: 0,\r\n  images: [],\r\n  description: ''\r\n})\r\n\r\nconst quantity = ref(1)\r\nconst isAddingToCart = ref(false) // 加载状态\r\n\r\n// 从API获取商品详情\r\nconst fetchProductDetail = async (id) => {\r\n  if (!id) {\r\n    ElMessage.error('无效的商品ID')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/merchant/product/detail/${id}`\r\n    )\r\n    \r\n    const apiData = response.data\r\n    \r\n    // 转换API数据结构以适应前端需求\r\n    product.value = {\r\n      id: apiData.productId,\r\n      name: apiData.productName,\r\n      price: apiData.price,\r\n      description: apiData.description,\r\n      // 确保images是数组，如果为null则转换为空数组\r\n      images: apiData.images || []\r\n    }\r\n    \r\n  } catch (error) {\r\n    ElMessage.error('商品加载失败')\r\n    console.error('商品加载错误:', error)\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  const productId = route.params.id\r\n  if (productId) fetchProductDetail(productId)\r\n})\r\n\r\n// 验证token有效性\r\nconst validateToken = async (token) => {\r\n  if (!token) return false\r\n  \r\n  try {\r\n    // 这里可以添加一个简单的API调用来验证token\r\n    // 例如获取用户基本信息，但为了简化，我们只检查token格式\r\n    // 实际项目中应该调用后端验证接口\r\n    const parts = token.split('.')\r\n    if (parts.length !== 3) {\r\n      return false\r\n    }\r\n    \r\n    // 检查过期时间\r\n    const payload = JSON.parse(atob(parts[1]))\r\n    const exp = payload.exp * 1000\r\n    return Date.now() < exp\r\n  } catch (e) {\r\n    console.error('Token验证失败:', e)\r\n    return false\r\n  }\r\n}\r\n\r\nconst addToCart = async () => {\r\n  // 检查用户是否已登录\r\n  const token = localStorage.getItem('token')\r\n  \r\n  // 验证token是否存在且有效\r\n  const isValidToken = await validateToken(token)\r\n  \r\n  if (!token || !isValidToken) {\r\n    ElMessage.warning('登录已过期，请重新登录')\r\n    \r\n    // 清除无效token\r\n    localStorage.removeItem('token')\r\n    \r\n    // 重定向到登录页，并携带当前路由信息\r\n    router.push({\r\n      path: '/login',\r\n      query: { redirect: route.fullPath }\r\n    })\r\n    return\r\n  }\r\n  \r\n  isAddingToCart.value = true // 开始加载\r\n  \r\n  try {\r\n    // 构造请求数据 - 严格遵循后端API要求\r\n    const requestData = {\r\n      productId: Number(product.value.id), // 确保转换为数字\r\n      quantity: quantity.value,\r\n      selectedOptions: \"\" // 空字符串\r\n    }\r\n    \r\n    console.log(\"发送到后端的请求数据:\", JSON.stringify(requestData, null, 2))\r\n    \r\n    // 调用后端加入购物车API，添加JWT令牌\r\n    await axios.post(\r\n      'http://algorineko.top:8080/api/customer/cart/add', \r\n      requestData,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 更新本地购物车状态\r\n    cartStore.addItem({\r\n      id: product.value.id,\r\n      name: product.value.name,\r\n      price: product.value.price,\r\n      quantity: quantity.value,\r\n      image: product.value.images?.[0] || ''\r\n    })\r\n    \r\n    ElMessage.success('已加入购物车')\r\n  } catch (error) {\r\n    console.error('加入购物车失败:', error)\r\n    \r\n    // 更详细的错误处理\r\n    if (error.response) {\r\n      console.error('错误详情:', error.response.data)\r\n      \r\n      if (error.response.status === 401 || error.response.status === 403) {\r\n        // 处理认证错误\r\n        ElMessage.error('身份验证失败，请重新登录')\r\n        \r\n        // 清除无效token\r\n        localStorage.removeItem('token')\r\n        \r\n        // 重定向到登录页\r\n        router.push({\r\n          path: '/login',\r\n          query: { redirect: route.fullPath }\r\n        })\r\n      } else if (error.response.status === 500) {\r\n        // 后端服务错误 - 提供用户友好的提示和解决方案\r\n        ElMessageBox.confirm(\r\n          '服务器暂时无法处理您的请求，可能是服务维护或内部错误。您可以：',\r\n          '服务异常',\r\n          {\r\n            confirmButtonText: '重试',\r\n            cancelButtonText: '返回首页',\r\n            type: 'error'\r\n          }\r\n        ).then(() => {\r\n          // 用户选择重试\r\n          addToCart()\r\n        }).catch(() => {\r\n          // 用户选择返回首页\r\n          router.push('/')\r\n        })\r\n      } else if (error.response.status === 400) {\r\n        // 处理400错误\r\n        const errorMsg = error.response.data?.message || '请求参数错误'\r\n        ElMessage.error(`加入购物车失败: ${errorMsg}`)\r\n      } else {\r\n        ElMessage.error(`加入购物车失败: ${error.response.data?.message || '未知错误'}`)\r\n      }\r\n    } else {\r\n      ElMessage.error('网络错误，请检查连接')\r\n    }\r\n  } finally {\r\n    isAddingToCart.value = false // 结束加载\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.product-detail {\r\n  padding: 20px;\r\n}\r\n\r\n.detail-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 40px;\r\n}\r\n\r\n.action-group {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n\r\n.description {\r\n  margin-top: 30px;\r\n}\r\n\r\n.price {\r\n  font-size: 24px;\r\n  color: #f56c6c;\r\n  font-weight: bold;\r\n}\r\n\r\n.no-images {\r\n  height: 400px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #f5f7fa;\r\n  border-radius: 8px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .detail-content {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}