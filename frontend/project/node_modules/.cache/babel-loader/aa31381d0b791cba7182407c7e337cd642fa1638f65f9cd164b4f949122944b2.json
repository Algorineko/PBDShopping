{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ElMessage } from 'element-plus';\nimport productApi from '../services/product';\nexport default {\n  data() {\n    return {\n      products: [],\n      newProduct: {\n        name: '',\n        price: 0,\n        description: '',\n        stock: 0,\n        status: 'draft'\n      },\n      editingProduct: {\n        // 初始化所有编辑字段\n        _id: '',\n        name: '',\n        price: 0,\n        description: '',\n        stock: 0,\n        status: 'draft'\n      },\n      editDialogVisible: false\n    };\n  },\n  async mounted() {\n    await this.loadProducts();\n  },\n  methods: {\n    async loadProducts() {\n      try {\n        const res = await productApi.getBusinessProducts();\n        // 确保数据结构有效\n        this.products = res.data.map(item => ({\n          _id: item._id || '',\n          name: item.name || '未命名商品',\n          price: item.price ?? 0,\n          description: item.description || '',\n          stock: item.stock ?? 0,\n          status: item.status || 'draft'\n        }));\n      } catch (error) {\n        ElMessage.error('加载商品失败');\n      }\n    },\n    async createProduct() {\n      try {\n        // 提交前验证必填字段\n        if (!this.newProduct.name.trim()) {\n          ElMessage.warning('请输入商品名称');\n          return;\n        }\n        await productApi.createProduct(this.newProduct);\n        ElMessage.success('商品添加成功');\n        await this.loadProducts();\n        // 正确重置表单\n        this.newProduct = {\n          name: '',\n          price: 0,\n          description: '',\n          stock: 0,\n          status: 'draft'\n        };\n      } catch (error) {\n        ElMessage.error('添加商品失败');\n      }\n    },\n    editProduct(product) {\n      // 安全复制对象属性\n      this.editingProduct = {\n        _id: product._id || '',\n        name: product.name || '',\n        price: product.price ?? 0,\n        description: product.description || '',\n        stock: product.stock ?? 0,\n        status: product.status || 'draft'\n      };\n      this.editDialogVisible = true;\n    },\n    async updateProduct() {\n      try {\n        if (!this.editingProduct._id) {\n          ElMessage.error('无效的商品ID');\n          return;\n        }\n        await productApi.updateProduct(this.editingProduct._id, this.editingProduct);\n        ElMessage.success('更新成功');\n        this.editDialogVisible = false;\n        await this.loadProducts();\n      } catch (error) {\n        ElMessage.error('更新失败');\n      }\n    },\n    async deleteProduct(id) {\n      if (!id) {\n        ElMessage.error('无效的商品ID');\n        return;\n      }\n      try {\n        await productApi.deleteProduct(id);\n        ElMessage.success('删除成功');\n        await this.loadProducts();\n      } catch (error) {\n        ElMessage.error('删除失败');\n      }\n    }\n  }\n};","map":{"version":3,"names":["ElMessage","productApi","data","products","newProduct","name","price","description","stock","status","editingProduct","_id","editDialogVisible","mounted","loadProducts","methods","res","getBusinessProducts","map","item","error","createProduct","trim","warning","success","editProduct","product","updateProduct","deleteProduct","id"],"sources":["E:\\实验例子\\project\\src\\views\\BusinessView.vue"],"sourcesContent":["<template>\r\n  <div class=\"business-view\">\r\n    <h1>商品管理</h1>\r\n    \r\n    <!-- 添加商品表单 -->\r\n    <div class=\"product-form\">\r\n      <el-form :model=\"newProduct\" label-width=\"80px\">\r\n        <el-form-item label=\"商品名称\">\r\n          <el-input v-model=\"newProduct.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"价格\">\r\n          <el-input-number v-model=\"newProduct.price\" :min=\"0\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\">\r\n          <el-input v-model=\"newProduct.description\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"库存\">\r\n          <el-input-number v-model=\"newProduct.stock\" :min=\"0\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"状态\">\r\n          <el-select v-model=\"newProduct.status\">\r\n            <el-option label=\"草稿\" value=\"draft\"></el-option>\r\n            <el-option label=\"上架\" value=\"published\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-button type=\"primary\" @click=\"createProduct\">添加商品</el-button>\r\n      </el-form>\r\n    </div>\r\n\r\n    <!-- 商品列表 -->\r\n    <el-table :data=\"products\" style=\"width: 100%\">\r\n      <el-table-column prop=\"name\" label=\"商品名称\"></el-table-column>\r\n      <el-table-column prop=\"price\" label=\"价格\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"stock\" label=\"库存\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"status\" label=\"状态\" width=\"120\">\r\n        <template #default=\"scope\">\r\n          <el-tag :type=\"scope.row?.status === 'published' ? 'success' : 'info'\">\r\n            {{ scope.row?.status === 'published' ? '已上架' : '草稿' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"200\">\r\n        <template #default=\"scope\">\r\n          <el-button size=\"small\" @click=\"editProduct(scope.row)\">编辑</el-button>\r\n          <el-button \r\n            size=\"small\" \r\n            type=\"danger\" \r\n            @click=\"deleteProduct(scope.row?._id)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 编辑对话框 -->\r\n    <el-dialog v-model=\"editDialogVisible\" title=\"编辑商品\">\r\n      <el-form :model=\"editingProduct\">\r\n        <el-form-item label=\"商品名称\">\r\n          <el-input v-model=\"editingProduct.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"价格\">\r\n          <el-input-number v-model=\"editingProduct.price\" :min=\"0\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\">\r\n          <el-input v-model=\"editingProduct.description\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"库存\">\r\n          <el-input-number v-model=\"editingProduct.stock\" :min=\"0\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"状态\">\r\n          <el-select v-model=\"editingProduct.status\">\r\n            <el-option label=\"草稿\" value=\"draft\"></el-option>\r\n            <el-option label=\"上架\" value=\"published\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"editDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"updateProduct\">确认修改</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ElMessage } from 'element-plus'\r\nimport productApi from '../services/product'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],\r\n      newProduct: {\r\n        name: '',\r\n        price: 0,\r\n        description: '',\r\n        stock: 0,\r\n        status: 'draft'\r\n      },\r\n      editingProduct: {\r\n        // 初始化所有编辑字段\r\n        _id: '',\r\n        name: '',\r\n        price: 0,\r\n        description: '',\r\n        stock: 0,\r\n        status: 'draft'\r\n      },\r\n      editDialogVisible: false\r\n    }\r\n  },\r\n  async mounted() {\r\n    await this.loadProducts()\r\n  },\r\n  methods: {\r\n    async loadProducts() {\r\n      try {\r\n        const res = await productApi.getBusinessProducts()\r\n        // 确保数据结构有效\r\n        this.products = res.data.map(item => ({\r\n          _id: item._id || '',\r\n          name: item.name || '未命名商品',\r\n          price: item.price ?? 0,\r\n          description: item.description || '',\r\n          stock: item.stock ?? 0,\r\n          status: item.status || 'draft'\r\n        }))\r\n      } catch (error) {\r\n        ElMessage.error('加载商品失败')\r\n      }\r\n    },\r\n    async createProduct() {\r\n      try {\r\n        // 提交前验证必填字段\r\n        if (!this.newProduct.name.trim()) {\r\n          ElMessage.warning('请输入商品名称')\r\n          return\r\n        }\r\n        \r\n        await productApi.createProduct(this.newProduct)\r\n        ElMessage.success('商品添加成功')\r\n        await this.loadProducts()\r\n        // 正确重置表单\r\n        this.newProduct = {\r\n          name: '',\r\n          price: 0,\r\n          description: '',\r\n          stock: 0,\r\n          status: 'draft'\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('添加商品失败')\r\n      }\r\n    },\r\n    editProduct(product) {\r\n      // 安全复制对象属性\r\n      this.editingProduct = {\r\n        _id: product._id || '',\r\n        name: product.name || '',\r\n        price: product.price ?? 0,\r\n        description: product.description || '',\r\n        stock: product.stock ?? 0,\r\n        status: product.status || 'draft'\r\n      }\r\n      this.editDialogVisible = true\r\n    },\r\n    async updateProduct() {\r\n      try {\r\n        if (!this.editingProduct._id) {\r\n          ElMessage.error('无效的商品ID')\r\n          return\r\n        }\r\n        \r\n        await productApi.updateProduct(\r\n          this.editingProduct._id,\r\n          this.editingProduct\r\n        )\r\n        ElMessage.success('更新成功')\r\n        this.editDialogVisible = false\r\n        await this.loadProducts()\r\n      } catch (error) {\r\n        ElMessage.error('更新失败')\r\n      }\r\n    },\r\n    async deleteProduct(id) {\r\n      if (!id) {\r\n        ElMessage.error('无效的商品ID')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        await productApi.deleteProduct(id)\r\n        ElMessage.success('删除成功')\r\n        await this.loadProducts()\r\n      } catch (error) {\r\n        ElMessage.error('删除失败')\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 保持原有样式不变 */\r\n.business-view {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.product-form {\r\n  margin-bottom: 30px;\r\n  padding: 20px;\r\n  background: #f5f7fa;\r\n  border-radius: 4px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}