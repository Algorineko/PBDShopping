{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\n\n// 订单状态配置\n\nexport default {\n  __name: 'UserOrders',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const statusText = {\n      pending: '待付款',\n      paid: '待发货',\n      shipped: '已发货',\n      completed: '已完成',\n      canceled: '已取消'\n    };\n    const statusType = {\n      pending: 'warning',\n      paid: 'primary',\n      shipped: 'primary',\n      completed: 'success',\n      canceled: 'info'\n    };\n\n    // 筛选选项\n    const statusOptions = ref([{\n      value: 'all',\n      label: '全部状态'\n    }, {\n      value: 'pending',\n      label: '待付款'\n    }, {\n      value: 'paid',\n      label: '待发货'\n    }, {\n      value: 'shipped',\n      label: '已发货'\n    }, {\n      value: 'completed',\n      label: '已完成'\n    }]);\n\n    // 订单数据\n    const orderLines = ref([]); // 用于存储拆分后的订单行\n    const filterStatus = ref('all');\n    const filterDate = ref([]);\n    const total = ref(0);\n    const pageSize = ref(10);\n    const currentPage = ref(1);\n\n    // 评价相关\n    const reviewDialogVisible = ref(false);\n    const reviewForm = ref({\n      orderId: '',\n      productId: '',\n      rating: 5,\n      content: ''\n    });\n    const currentReviewOrderLine = ref(null);\n\n    // 从localStorage加载订单数据\n    const loadOrders = async () => {\n      try {\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n\n        // 应用筛选条件\n        let filteredOrders = [...savedOrders];\n\n        // 状态筛选\n        if (filterStatus.value !== 'all') {\n          filteredOrders = filteredOrders.filter(order => order.status === filterStatus.value);\n        }\n\n        // 日期筛选\n        if (filterDate.value && filterDate.value.length === 2) {\n          const startDate = new Date(filterDate.value[0]);\n          const endDate = new Date(filterDate.value[1]);\n          endDate.setHours(23, 59, 59, 999); // 包含结束日期的全天\n\n          filteredOrders = filteredOrders.filter(order => {\n            const orderDate = new Date(order.createTime);\n            return orderDate >= startDate && orderDate <= endDate;\n          });\n        }\n\n        // 拆分订单为商品行\n        const lines = [];\n        filteredOrders.forEach(order => {\n          order.items.forEach((item, index) => {\n            lines.push({\n              ...order,\n              item,\n              // 当前商品项\n              isFirst: index === 0 // 标记是否是订单的第一行\n            });\n          });\n        });\n\n        // 分页处理\n        const start = (currentPage.value - 1) * pageSize.value;\n        orderLines.value = lines.slice(start, start + pageSize.value);\n        total.value = lines.length;\n      } catch (error) {\n        console.error('订单加载失败:', error);\n        ElMessage.error('订单加载失败');\n        orderLines.value = [];\n      }\n    };\n    const openReviewDialog = orderLine => {\n      currentReviewOrderLine.value = orderLine;\n      reviewForm.value = {\n        orderId: orderLine.orderId,\n        productId: orderLine.item.id || '',\n        // 当前商品ID\n        rating: 5,\n        content: ''\n      };\n      reviewDialogVisible.value = true;\n    };\n    const submitReview = () => {\n      const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]');\n      // 添加商品快照信息 - 这是关键修改\n      const newReview = {\n        ...reviewForm.value,\n        date: new Date().toLocaleString(),\n        itemSnapshot: {\n          id: currentReviewOrderLine.value.item.id,\n          name: currentReviewOrderLine.value.item.name,\n          price: currentReviewOrderLine.value.item.price,\n          quantity: currentReviewOrderLine.value.item.quantity,\n          image: currentReviewOrderLine.value.item.image\n        }\n      };\n      reviews.push(newReview);\n      localStorage.setItem('productReviews', JSON.stringify(reviews));\n\n      // 标记该商品已评价\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const updatedOrders = savedOrders.map(order => {\n        if (order.orderId === currentReviewOrderLine.value.orderId) {\n          // 更新订单中该商品的评价状态\n          const updatedItems = order.items.map(item => {\n            if (item.id === currentReviewOrderLine.value.item.id) {\n              return {\n                ...item,\n                reviewed: true\n              };\n            }\n            return item;\n          });\n          return {\n            ...order,\n            items: updatedItems\n          };\n        }\n        return order;\n      });\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      ElMessage.success('评价提交成功');\n      reviewDialogVisible.value = false;\n      loadOrders();\n    };\n\n    // 支付订单\n    const payOrder = orderId => {\n      if (!orderId) {\n        ElMessage.warning('无效的订单号');\n        return;\n      }\n\n      // 更新订单状态为已付款（待发货）\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const updatedOrders = savedOrders.map(order => {\n        if (order.orderId === orderId) {\n          return {\n            ...order,\n            status: 'paid',\n            // 状态变为待发货\n            isPaid: true\n          };\n        }\n        return order;\n      });\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      ElMessage.success(`订单 #${orderId} 支付成功，等待商家发货`);\n      loadOrders();\n    };\n\n    // 确认收货\n    const confirmReceipt = orderId => {\n      if (!orderId) {\n        ElMessage.warning('无效的订单号');\n        return;\n      }\n\n      // 更新订单状态为已完成\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const updatedOrders = savedOrders.map(order => {\n        if (order.orderId === orderId) {\n          return {\n            ...order,\n            status: 'completed'\n          };\n        }\n        return order;\n      });\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      ElMessage.success(`订单 #${orderId} 确认收货成功`);\n      loadOrders();\n    };\n\n    // 删除订单\n    const deleteOrder = orderId => {\n      ElMessageBox.confirm('确定要删除这个订单吗？删除后无法恢复', '警告', {\n        confirmButtonText: '确定删除',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 从本地存储中删除订单\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n        const filteredOrders = savedOrders.filter(order => order.orderId !== orderId);\n        localStorage.setItem('orders', JSON.stringify(filteredOrders));\n        ElMessage.success('订单删除成功');\n        loadOrders();\n      }).catch(() => {\n        // 用户取消了删除操作\n      });\n    };\n\n    // 分页处理\n    const handlePageChange = page => {\n      currentPage.value = page;\n      loadOrders();\n    };\n\n    // 初始化加载\n    onMounted(() => {\n      loadOrders();\n    });\n    const __returned__ = {\n      statusText,\n      statusType,\n      statusOptions,\n      orderLines,\n      filterStatus,\n      filterDate,\n      total,\n      pageSize,\n      currentPage,\n      reviewDialogVisible,\n      reviewForm,\n      currentReviewOrderLine,\n      loadOrders,\n      openReviewDialog,\n      submitReview,\n      payOrder,\n      confirmReceipt,\n      deleteOrder,\n      handlePageChange,\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessage","ElMessageBox","statusText","pending","paid","shipped","completed","canceled","statusType","statusOptions","value","label","orderLines","filterStatus","filterDate","total","pageSize","currentPage","reviewDialogVisible","reviewForm","orderId","productId","rating","content","currentReviewOrderLine","loadOrders","savedOrders","JSON","parse","localStorage","getItem","filteredOrders","filter","order","status","length","startDate","Date","endDate","setHours","orderDate","createTime","lines","forEach","items","item","index","push","isFirst","start","slice","error","console","openReviewDialog","orderLine","id","submitReview","reviews","newReview","date","toLocaleString","itemSnapshot","name","price","quantity","image","setItem","stringify","updatedOrders","map","updatedItems","reviewed","success","payOrder","warning","isPaid","confirmReceipt","deleteOrder","confirm","confirmButtonText","cancelButtonText","type","then","catch","handlePageChange","page"],"sources":["E:/实验例子/project/src/components/UserOrders.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-orders\">\r\n    <h2>我的订单</h2>\r\n    \r\n    <!-- 订单筛选 -->\r\n    <div class=\"filter-section\">\r\n      <el-select v-model=\"filterStatus\" placeholder=\"全部状态\" @change=\"loadOrders\">\r\n        <el-option\r\n          v-for=\"status in statusOptions\"\r\n          :key=\"status.value\"\r\n          :label=\"status.label\"\r\n          :value=\"status.value\"\r\n        />\r\n      </el-select>\r\n      <el-date-picker\r\n        v-model=\"filterDate\"\r\n        type=\"daterange\"\r\n        range-separator=\"至\"\r\n        start-placeholder=\"开始日期\"\r\n        end-placeholder=\"结束日期\"\r\n        @change=\"loadOrders\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 订单列表 -->\r\n    <el-table \r\n      :data=\"orderLines\"\r\n      v-if=\"orderLines.length > 0\"\r\n      border \r\n      style=\"width: 100%\"\r\n    >\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"200\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-list\">\r\n            <div class=\"product-item\">\r\n              <router-link :to=\"`/buyer/product/${row.item.id}`\">\r\n                <el-image \r\n                  :src=\"row.item.image\"\r\n                  style=\"width: 60px; height: 60px; cursor: pointer\"\r\n                  fit=\"cover\"\r\n                />\r\n              </router-link>\r\n              <div class=\"product-details\">\r\n                <router-link \r\n                  :to=\"`/buyer/product/${row.item.id}`\"\r\n                  class=\"product-name\"\r\n                >\r\n                  {{ row.item.name }}\r\n                </router-link>\r\n                <div class=\"product-price\">\r\n                  ¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"scope\">\r\n          ¥{{ (scope.row.item.price * scope.row.item.quantity).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"scope\">\r\n          <el-tag :type=\"statusType[scope.row.status] || 'info'\">\r\n            {{ statusText[scope.row.status] || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"200\">\r\n        <template #default=\"scope\">\r\n          <!-- 订单操作按钮（仅在第一行显示） -->\r\n          <div v-if=\"scope.row.isFirst\">\r\n            <!-- 付款按钮：仅待付款状态显示 -->\r\n            <el-button \r\n              v-if=\"scope.row.status === 'pending'\"\r\n              type=\"success\" \r\n              size=\"small\"\r\n              @click=\"payOrder(scope.row.orderId)\"\r\n            >\r\n              付款\r\n            </el-button>\r\n            \r\n            <!-- 确认收货按钮：仅已发货状态显示 -->\r\n            <el-button \r\n              v-if=\"scope.row.status === 'shipped'\"\r\n              type=\"warning\" \r\n              size=\"small\"\r\n              @click=\"confirmReceipt(scope.row.orderId)\"\r\n            >\r\n              确认收货\r\n            </el-button>\r\n            \r\n            <!-- 删除订单按钮：所有状态都可以删除 -->\r\n            <el-button \r\n              type=\"danger\" \r\n              size=\"small\"\r\n              icon=\"el-icon-delete\"\r\n              @click=\"deleteOrder(scope.row.orderId)\"\r\n            >\r\n              删除\r\n            </el-button>\r\n          </div>\r\n          \r\n          <!-- 商品评价按钮（每个商品行都显示） -->\r\n          <el-button \r\n            v-if=\"scope.row.status === 'completed' && scope.row.isPaid && !scope.row.item.reviewed\"\r\n            type=\"warning\" \r\n            size=\"small\"\r\n            @click=\"openReviewDialog(scope.row)\"\r\n          >\r\n            评价\r\n          </el-button>\r\n          \r\n          <!-- 已评价标记 -->\r\n          <el-tag v-if=\"scope.row.status === 'completed' && scope.row.isPaid && scope.row.item.reviewed\" type=\"success\">\r\n            已评价\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 空状态提示 -->\r\n    <el-empty v-else description=\"暂无订单数据\" class=\"empty-placeholder\" />\r\n\r\n    <!-- 分页 -->\r\n    <div class=\"pagination\" v-if=\"orderLines.length > 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"prev, pager, next\"\r\n        :total=\"total\"\r\n        :page-size=\"pageSize\"\r\n        @current-change=\"handlePageChange\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 评价对话框 -->\r\n    <el-dialog v-model=\"reviewDialogVisible\" title=\"商品评价\">\r\n      <el-form :model=\"reviewForm\">\r\n        <el-form-item label=\"评分\">\r\n          <el-rate v-model=\"reviewForm.rating\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"评价内容\">\r\n          <el-input\r\n            v-model=\"reviewForm.content\"\r\n            type=\"textarea\"\r\n            :rows=\"4\"\r\n            placeholder=\"请输入您的使用体验\"\r\n          />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"reviewDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitReview\">提交评价</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\n\r\n// 订单状态配置\r\nconst statusText = {\r\n  pending: '待付款',\r\n  paid: '待发货',\r\n  shipped: '已发货',\r\n  completed: '已完成',\r\n  canceled: '已取消'\r\n}\r\n\r\nconst statusType = {\r\n  pending: 'warning',\r\n  paid: 'primary',\r\n  shipped: 'primary',\r\n  completed: 'success',\r\n  canceled: 'info'\r\n}\r\n\r\n// 筛选选项\r\nconst statusOptions = ref([\r\n  { value: 'all', label: '全部状态' },\r\n  { value: 'pending', label: '待付款' },\r\n  { value: 'paid', label: '待发货' },\r\n  { value: 'shipped', label: '已发货' },\r\n  { value: 'completed', label: '已完成' }\r\n])\r\n\r\n// 订单数据\r\nconst orderLines = ref([]) // 用于存储拆分后的订单行\r\nconst filterStatus = ref('all')\r\nconst filterDate = ref([])\r\nconst total = ref(0)\r\nconst pageSize = ref(10)\r\nconst currentPage = ref(1)\r\n\r\n// 评价相关\r\nconst reviewDialogVisible = ref(false)\r\nconst reviewForm = ref({\r\n  orderId: '',\r\n  productId: '',\r\n  rating: 5,\r\n  content: ''\r\n})\r\nconst currentReviewOrderLine = ref(null)\r\n\r\n// 从localStorage加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    \r\n    // 应用筛选条件\r\n    let filteredOrders = [...savedOrders]\r\n    \r\n    // 状态筛选\r\n    if (filterStatus.value !== 'all') {\r\n      filteredOrders = filteredOrders.filter(order => order.status === filterStatus.value)\r\n    }\r\n    \r\n    // 日期筛选\r\n    if (filterDate.value && filterDate.value.length === 2) {\r\n      const startDate = new Date(filterDate.value[0])\r\n      const endDate = new Date(filterDate.value[1])\r\n      endDate.setHours(23, 59, 59, 999) // 包含结束日期的全天\r\n      \r\n      filteredOrders = filteredOrders.filter(order => {\r\n        const orderDate = new Date(order.createTime)\r\n        return orderDate >= startDate && orderDate <= endDate\r\n      })\r\n    }\r\n    \r\n    // 拆分订单为商品行\r\n    const lines = []\r\n    filteredOrders.forEach(order => {\r\n      order.items.forEach((item, index) => {\r\n        lines.push({\r\n          ...order,\r\n          item, // 当前商品项\r\n          isFirst: index === 0 // 标记是否是订单的第一行\r\n        })\r\n      })\r\n    })\r\n    \r\n    // 分页处理\r\n    const start = (currentPage.value - 1) * pageSize.value\r\n    orderLines.value = lines.slice(start, start + pageSize.value)\r\n    total.value = lines.length\r\n    \r\n  } catch (error) {\r\n    console.error('订单加载失败:', error)\r\n    ElMessage.error('订单加载失败')\r\n    orderLines.value = []\r\n  }\r\n}\r\n\r\nconst openReviewDialog = (orderLine) => {\r\n  currentReviewOrderLine.value = orderLine\r\n  reviewForm.value = {\r\n    orderId: orderLine.orderId,\r\n    productId: orderLine.item.id || '', // 当前商品ID\r\n    rating: 5,\r\n    content: ''\r\n  }\r\n  reviewDialogVisible.value = true\r\n}\r\n\r\nconst submitReview = () => {\r\n  const reviews = JSON.parse(localStorage.getItem('productReviews') || '[]')\r\n  // 添加商品快照信息 - 这是关键修改\r\n  const newReview = {\r\n    ...reviewForm.value,\r\n    date: new Date().toLocaleString(),\r\n    itemSnapshot: {\r\n      id: currentReviewOrderLine.value.item.id,\r\n      name: currentReviewOrderLine.value.item.name,\r\n      price: currentReviewOrderLine.value.item.price,\r\n      quantity: currentReviewOrderLine.value.item.quantity,\r\n      image: currentReviewOrderLine.value.item.image\r\n    }\r\n  }\r\n  \r\n  reviews.push(newReview)\r\n  \r\n  localStorage.setItem('productReviews', JSON.stringify(reviews))\r\n  \r\n  // 标记该商品已评价\r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  const updatedOrders = savedOrders.map(order => {\r\n    if (order.orderId === currentReviewOrderLine.value.orderId) {\r\n      // 更新订单中该商品的评价状态\r\n      const updatedItems = order.items.map(item => {\r\n        if (item.id === currentReviewOrderLine.value.item.id) {\r\n          return { ...item, reviewed: true }\r\n        }\r\n        return item\r\n      })\r\n      return { ...order, items: updatedItems }\r\n    }\r\n    return order\r\n  })\r\n  \r\n  localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n  \r\n  ElMessage.success('评价提交成功')\r\n  reviewDialogVisible.value = false\r\n  loadOrders()\r\n}\r\n\r\n// 支付订单\r\nconst payOrder = (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  \r\n  // 更新订单状态为已付款（待发货）\r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  const updatedOrders = savedOrders.map(order => {\r\n    if (order.orderId === orderId) {\r\n      return {\r\n        ...order,\r\n        status: 'paid', // 状态变为待发货\r\n        isPaid: true\r\n      }\r\n    }\r\n    return order\r\n  })\r\n  \r\n  localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n  \r\n  ElMessage.success(`订单 #${orderId} 支付成功，等待商家发货`)\r\n  loadOrders()\r\n}\r\n\r\n// 确认收货\r\nconst confirmReceipt = (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  \r\n  // 更新订单状态为已完成\r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  const updatedOrders = savedOrders.map(order => {\r\n    if (order.orderId === orderId) {\r\n      return {\r\n        ...order,\r\n        status: 'completed'\r\n      }\r\n    }\r\n    return order\r\n  })\r\n  \r\n  localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n  \r\n  ElMessage.success(`订单 #${orderId} 确认收货成功`)\r\n  loadOrders()\r\n}\r\n\r\n// 删除订单\r\nconst deleteOrder = (orderId) => {\r\n  ElMessageBox.confirm(\r\n    '确定要删除这个订单吗？删除后无法恢复',\r\n    '警告',\r\n    {\r\n      confirmButtonText: '确定删除',\r\n      cancelButtonText: '取消',\r\n      type: 'warning'\r\n    }\r\n  ).then(() => {\r\n    // 从本地存储中删除订单\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const filteredOrders = savedOrders.filter(order => order.orderId !== orderId)\r\n    localStorage.setItem('orders', JSON.stringify(filteredOrders))\r\n    \r\n    ElMessage.success('订单删除成功')\r\n    loadOrders()\r\n  }).catch(() => {\r\n    // 用户取消了删除操作\r\n  })\r\n}\r\n\r\n// 分页处理\r\nconst handlePageChange = (page) => {\r\n  currentPage.value = page\r\n  loadOrders()\r\n}\r\n\r\n// 初始化加载\r\nonMounted(() => {\r\n  loadOrders()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.user-orders {\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n}\r\n\r\n.filter-section {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.el-table {\r\n  margin-top: 15px;\r\n}\r\n\r\n.empty-placeholder {\r\n  margin-top: 50px;\r\n}\r\n\r\n.el-tag {\r\n  margin: 2px 0;\r\n}\r\n\r\n.product-list {\r\n  padding: 10px 0;\r\n}\r\n\r\n.product-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 10px 0;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  color: #606266;\r\n  text-decoration: none;\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  &:hover {\r\n    color: #409eff;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n.product-price {\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 响应式适配 */\r\n@media (max-width: 768px) {\r\n  .filter-section {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .el-table {\r\n    overflow-x: auto;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}