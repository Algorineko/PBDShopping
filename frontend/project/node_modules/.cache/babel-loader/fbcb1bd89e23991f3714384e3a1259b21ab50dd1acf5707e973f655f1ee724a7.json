{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://algorineko.top:8080/api/user',\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  async login(credentials) {\n    try {\n      const response = await apiClient.post('/login', {\n        username: credentials.userId,\n        password: credentials.password,\n        userType: credentials.role\n      });\n\n      // 确保响应结构符合前端期望\n      return {\n        data: {\n          token: response.data.token || 'simulated-token',\n          userId: response.data.username || credentials.userId,\n          userName: response.data.userName || credentials.userId,\n          role: credentials.role\n        }\n      };\n    } catch (error) {\n      if (error.response && error.response.status === 401) {\n        throw new Error('用户ID或密码错误');\n      } else {\n        throw new Error('登录失败: ' + (error.message || '网络错误'));\n      }\n    }\n  },\n  async register(user) {\n    try {\n      // 映射字段到后端所需格式\n      const response = await apiClient.post('/register', {\n        username: user.userId,\n        password: user.password,\n        phone: user.phone || '',\n        userType: user.role,\n        address: user.address || ''\n      });\n\n      // 返回符合前端期望的结构\n      return {\n        data: {\n          message: response.data.message || '注册成功',\n          user: {\n            userId: user.userId,\n            userName: user.userName,\n            role: user.role\n          }\n        }\n      };\n    } catch (error) {\n      if (error.response && error.response.data) {\n        throw new Error(error.response.data.message || '注册失败');\n      } else {\n        throw new Error('注册失败: ' + (error.message || '网络错误'));\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","login","credentials","response","post","username","userId","password","userType","role","data","token","userName","error","status","Error","message","register","user","phone","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://algorineko.top:8080/api/user',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default {\r\n  async login(credentials) {\r\n    try {\r\n      const response = await apiClient.post('/login', {\r\n        username: credentials.userId,\r\n        password: credentials.password,\r\n        userType: credentials.role\r\n      })\r\n      \r\n      // 确保响应结构符合前端期望\r\n      return {\r\n        data: {\r\n          token: response.data.token || 'simulated-token',\r\n          userId: response.data.username || credentials.userId,\r\n          userName: response.data.userName || credentials.userId,\r\n          role: credentials.role\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 401) {\r\n        throw new Error('用户ID或密码错误')\r\n      } else {\r\n        throw new Error('登录失败: ' + (error.message || '网络错误'))\r\n      }\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      // 映射字段到后端所需格式\r\n      const response = await apiClient.post('/register', {\r\n        username: user.userId,\r\n        password: user.password,\r\n        phone: user.phone || '',\r\n        userType: user.role,\r\n        address: user.address || ''\r\n      })\r\n      \r\n      // 返回符合前端期望的结构\r\n      return {\r\n        data: {\r\n          message: response.data.message || '注册成功',\r\n          user: {\r\n            userId: user.userId,\r\n            userName: user.userName,\r\n            role: user.role\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (error.response && error.response.data) {\r\n        throw new Error(error.response.data.message || '注册失败')\r\n      } else {\r\n        throw new Error('注册失败: ' + (error.message || '网络错误'))\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}