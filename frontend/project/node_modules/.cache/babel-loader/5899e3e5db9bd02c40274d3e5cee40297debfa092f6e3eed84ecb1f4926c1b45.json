{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n// stores/cart.js\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\n\n// 解析JWT token的辅助函数\nconst parseJwt = token => {\n  try {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (e) {\n    console.error('Token解析失败:', e);\n    return null;\n  }\n};\nexport const useCartStore = defineStore('cart', () => {\n  const items = ref([]);\n  const selectedItems = ref(new Set());\n  const loading = ref(false);\n  const error = ref(null);\n\n  // 获取商品详情\n  const fetchProductDetail = async productId => {\n    try {\n      const response = await axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${productId}`);\n      return response.data;\n    } catch (err) {\n      console.error(`获取商品详情失败 (ID: ${productId}):`, err);\n      return null;\n    }\n  };\n\n  // 添加商品（本地方法）\n  const addItem = item => {\n    const existing = items.value.find(i => i.id === item.id);\n    if (existing) {\n      existing.quantity += Number(item.quantity) || 1;\n    } else {\n      items.value.push({\n        id: item.id,\n        name: item.name || '未知商品',\n        price: Number(item.price) || 0,\n        quantity: Math.max(1, Number(item.quantity) || 1),\n        image: item.image || '/placeholder-product.jpg',\n        cartItemId: item.cartItemId\n      });\n    }\n  };\n\n  // 新增：API方式添加商品到购物车\n  const addItemToCart = async item => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('请先登录后再添加商品到购物车');\n    }\n\n    // 从token解析用户信息\n    const payload = parseJwt(token);\n    if (!payload || !payload.customerId) {\n      throw new Error('用户信息不完整，请重新登录');\n    }\n\n    // 构造请求数据\n    const requestData = {\n      customerId: Number(payload.customerId),\n      productId: Number(item.id),\n      quantity: Number(item.quantity),\n      selectedOptions: \"\"\n    };\n    try {\n      // 调用后端加入购物车API\n      const response = await axios.post('http://algorineko.top:8080/api/customer/cart/add', requestData, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      // 更新本地购物车状态\n      addItem({\n        id: item.id,\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity,\n        image: item.image\n      });\n      return response.data;\n    } catch (error) {\n      let errorMsg = '加入购物车失败';\n      if (error.response) {\n        if (error.response.status === 400) {\n          errorMsg = error.response.data?.message || '请求参数错误';\n        } else if (error.response.status === 401) {\n          errorMsg = '身份验证失败，请重新登录';\n        } else if (error.response.status === 500) {\n          errorMsg = error.response.data?.message || '服务器内部错误';\n        } else {\n          errorMsg = error.response.data?.message || '未知错误';\n        }\n      } else {\n        errorMsg = error.message || '网络错误，请检查连接';\n      }\n      throw new Error(errorMsg);\n    }\n  };\n\n  // 从后端获取购物车数据\n  const fetchCart = async () => {\n    loading.value = true;\n    error.value = null;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      const response = await axios.get('http://algorineko.top:8080/api/customer/cart/get', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 创建临时数组存储购物车项\n      const tempItems = [];\n\n      // 遍历购物车项并获取商品详情\n      for (const cartItem of response.data) {\n        const productDetail = await fetchProductDetail(cartItem.productId);\n\n        // 合并购物车项和商品详情数据\n        tempItems.push({\n          id: cartItem.productId,\n          cartItemId: cartItem.cartItemId,\n          name: productDetail?.productName || cartItem.productName || '未知商品',\n          price: Number(productDetail?.price) || Number(cartItem.price) || 0,\n          quantity: Math.max(1, Number(cartItem.quantity) || 1),\n          image: cartItem.image || '/placeholder-product.jpg'\n        });\n      }\n\n      // 更新购物车项\n      items.value = tempItems;\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('获取购物车失败:', err);\n      // 错误时保持现有数据\n      if (!items.value.length) {\n        items.value = [];\n      }\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 更新购物车项数量 - 修正为符合后端API要求\n  const updateQuantity = async (cartItemId, quantity) => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n\n      // 从token解析用户信息\n      const payload = parseJwt(token);\n      if (!payload || !payload.customerId) {\n        throw new Error('用户信息不完整，请重新登录');\n      }\n\n      // 查找商品信息\n      const item = items.value.find(i => i.cartItemId === cartItemId);\n      if (!item) {\n        throw new Error('购物车项不存在');\n      }\n\n      // 构建符合后端要求的请求体\n      const requestData = {\n        cartItemId: Number(cartItemId),\n        customerId: Number(payload.customerId),\n        productId: Number(item.id),\n        quantity: Number(quantity),\n        selectedOptions: \"\"\n      };\n\n      // 发送PUT请求\n      await axios.put(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, requestData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // 更新本地状态\n      if (item) {\n        item.quantity = quantity;\n      }\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('更新购物车项失败:', err);\n      // 重新获取最新数据\n      await fetchCart();\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 移除商品 - 保持原有实现\n  const removeItem = async cartItemId => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.delete(`http://algorineko.top:8080/api/customer/cart/delete/${cartItemId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 更新本地状态\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId);\n      selectedItems.value.delete(cartItemId);\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 批量移除商品 - 保持原有实现\n  const removeItems = async cartItemIds => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n\n      // 并行删除所有选中项\n      await Promise.all(cartItemIds.map(id => axios.delete(`http://algorineko.top:8080/api/customer/cart/delete/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })));\n\n      // 更新本地状态\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId));\n      cartItemIds.forEach(id => selectedItems.value.delete(id));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('批量删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 总价计算\n  const totalPrice = computed(() => items.value.reduce((sum, item) => {\n    const price = Number(item.price) || 0;\n    const quantity = Number(item.quantity) || 1;\n    return sum + price * quantity;\n  }, 0));\n\n  // 选中商品总价\n  const selectedTotalPrice = computed(() => items.value.reduce((sum, item) => {\n    if (selectedItems.value.has(item.cartItemId)) {\n      const price = Number(item.price) || 0;\n      const quantity = Number(item.quantity) || 1;\n      return sum + price * quantity;\n    }\n    return sum;\n  }, 0));\n\n  // 选中的商品列表\n  const selectedItemsList = computed(() => items.value.filter(item => selectedItems.value.has(item.cartItemId)));\n  const toggleSelection = cartItemId => {\n    if (selectedItems.value.has(cartItemId)) {\n      selectedItems.value.delete(cartItemId);\n    } else {\n      selectedItems.value.add(cartItemId);\n    }\n  };\n\n  // 全选/取消全选\n  const toggleSelectAll = () => {\n    if (selectedItems.value.size === items.value.length) {\n      selectedItems.value.clear();\n    } else {\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId));\n    }\n  };\n  const clearSelected = () => selectedItems.value.clear();\n  return {\n    items: computed(() => items.value),\n    totalPrice,\n    selectedTotalPrice,\n    selectedItems: computed(() => selectedItems.value),\n    selectedItemsList,\n    loading: computed(() => loading.value),\n    error: computed(() => error.value),\n    fetchCart,\n    updateQuantity,\n    addItemToCart,\n    removeItem,\n    removeItems,\n    toggleSelection,\n    toggleSelectAll,\n    clearSelected\n  };\n});","map":{"version":3,"names":["defineStore","ref","computed","axios","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","useCartStore","items","selectedItems","Set","loading","fetchProductDetail","productId","response","get","data","err","addItem","item","existing","value","find","i","id","quantity","Number","push","name","price","Math","max","image","cartItemId","addItemToCart","localStorage","getItem","Error","payload","customerId","requestData","selectedOptions","post","headers","errorMsg","status","message","fetchCart","Authorization","tempItems","cartItem","productDetail","productName","length","updateQuantity","put","removeItem","delete","filter","removeItems","cartItemIds","Promise","all","includes","forEach","totalPrice","reduce","sum","selectedTotalPrice","has","selectedItemsList","toggleSelection","add","toggleSelectAll","size","clear","clearSelected"],"sources":["E:/实验例子/project/src/stores/cart.js"],"sourcesContent":["// stores/cart.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\n// 解析JWT token的辅助函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const useCartStore = defineStore('cart', () => {\r\n  const items = ref([])\r\n  const selectedItems = ref(new Set())\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n  \r\n  // 获取商品详情\r\n  const fetchProductDetail = async (productId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://algorineko.top:8080/api/merchant/product/detail/${productId}`\r\n      )\r\n      return response.data\r\n    } catch (err) {\r\n      console.error(`获取商品详情失败 (ID: ${productId}):`, err)\r\n      return null\r\n    }\r\n  }\r\n\r\n  // 添加商品（本地方法）\r\n  const addItem = (item) => {\r\n    const existing = items.value.find(i => i.id === item.id)\r\n    if (existing) {\r\n      existing.quantity += Number(item.quantity) || 1\r\n    } else {\r\n      items.value.push({\r\n        id: item.id,\r\n        name: item.name || '未知商品',\r\n        price: Number(item.price) || 0,\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.image || '/placeholder-product.jpg',\r\n        cartItemId: item.cartItemId\r\n      })\r\n    }\r\n  }\r\n\r\n  // 新增：API方式添加商品到购物车\r\n  const addItemToCart = async (item) => {\r\n    const token = localStorage.getItem('token')\r\n    if (!token) {\r\n      throw new Error('请先登录后再添加商品到购物车')\r\n    }\r\n    \r\n    // 从token解析用户信息\r\n    const payload = parseJwt(token)\r\n    if (!payload || !payload.customerId) {\r\n      throw new Error('用户信息不完整，请重新登录')\r\n    }\r\n    \r\n    // 构造请求数据\r\n    const requestData = {\r\n      customerId: Number(payload.customerId),\r\n      productId: Number(item.id),\r\n      quantity: Number(item.quantity),\r\n      selectedOptions: \"\"\r\n    }\r\n    \r\n    try {\r\n      // 调用后端加入购物车API\r\n      const response = await axios.post(\r\n        'http://algorineko.top:8080/api/customer/cart/add', \r\n        requestData,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地购物车状态\r\n      addItem({\r\n        id: item.id,\r\n        name: item.name,\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: item.image\r\n      })\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      let errorMsg = '加入购物车失败'\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 400) {\r\n          errorMsg = error.response.data?.message || '请求参数错误'\r\n        } else if (error.response.status === 401) {\r\n          errorMsg = '身份验证失败，请重新登录'\r\n        } else if (error.response.status === 500) {\r\n          errorMsg = error.response.data?.message || '服务器内部错误'\r\n        } else {\r\n          errorMsg = error.response.data?.message || '未知错误'\r\n        }\r\n      } else {\r\n        errorMsg = error.message || '网络错误，请检查连接'\r\n      }\r\n      \r\n      throw new Error(errorMsg)\r\n    }\r\n  }\r\n  \r\n  // 从后端获取购物车数据\r\n  const fetchCart = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n    \r\n      const response = await axios.get(\r\n        'http://algorineko.top:8080/api/customer/cart/get',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 创建临时数组存储购物车项\r\n      const tempItems = []\r\n      \r\n      // 遍历购物车项并获取商品详情\r\n      for (const cartItem of response.data) {\r\n        const productDetail = await fetchProductDetail(cartItem.productId)\r\n        \r\n        // 合并购物车项和商品详情数据\r\n        tempItems.push({\r\n          id: cartItem.productId,\r\n          cartItemId: cartItem.cartItemId,\r\n          name: productDetail?.productName || cartItem.productName || '未知商品',\r\n          price: Number(productDetail?.price) || Number(cartItem.price) || 0,\r\n          quantity: Math.max(1, Number(cartItem.quantity) || 1),\r\n          image: cartItem.image || '/placeholder-product.jpg'\r\n        })\r\n      }\r\n      \r\n      // 更新购物车项\r\n      items.value = tempItems\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('获取购物车失败:', err)\r\n      // 错误时保持现有数据\r\n      if (!items.value.length) {\r\n        items.value = []\r\n      }\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新购物车项数量 - 修正为符合后端API要求\r\n  const updateQuantity = async (cartItemId, quantity) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 从token解析用户信息\r\n      const payload = parseJwt(token)\r\n      if (!payload || !payload.customerId) {\r\n        throw new Error('用户信息不完整，请重新登录')\r\n      }\r\n      \r\n      // 查找商品信息\r\n      const item = items.value.find(i => i.cartItemId === cartItemId)\r\n      if (!item) {\r\n        throw new Error('购物车项不存在')\r\n      }\r\n      \r\n      // 构建符合后端要求的请求体\r\n      const requestData = {\r\n        cartItemId: Number(cartItemId),\r\n        customerId: Number(payload.customerId),\r\n        productId: Number(item.id),\r\n        quantity: Number(quantity),\r\n        selectedOptions: \"\"\r\n      }\r\n      \r\n      // 发送PUT请求\r\n      await axios.put(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        requestData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      if (item) {\r\n        item.quantity = quantity\r\n      }\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('更新购物车项失败:', err)\r\n      // 重新获取最新数据\r\n      await fetchCart()\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 移除商品 - 保持原有实现\r\n  const removeItem = async (cartItemId) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.delete(\r\n        `http://algorineko.top:8080/api/customer/cart/delete/${cartItemId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId)\r\n      selectedItems.value.delete(cartItemId)\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 批量移除商品 - 保持原有实现\r\n  const removeItems = async (cartItemIds) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 并行删除所有选中项\r\n      await Promise.all(\r\n        cartItemIds.map(id => \r\n          axios.delete(\r\n            `http://algorineko.top:8080/api/customer/cart/delete/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }\r\n          )\r\n        )\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId))\r\n      cartItemIds.forEach(id => selectedItems.value.delete(id))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('批量删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 总价计算\r\n  const totalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      const price = Number(item.price) || 0\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中商品总价\r\n  const selectedTotalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      if (selectedItems.value.has(item.cartItemId)) {\r\n        const price = Number(item.price) || 0\r\n        const quantity = Number(item.quantity) || 1\r\n        return sum + (price * quantity)\r\n      }\r\n      return sum\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中的商品列表\r\n  const selectedItemsList = computed(() => \r\n    items.value.filter(item => selectedItems.value.has(item.cartItemId))\r\n  )\r\n\r\n  const toggleSelection = (cartItemId) => {\r\n    if (selectedItems.value.has(cartItemId)) {\r\n      selectedItems.value.delete(cartItemId)\r\n    } else {\r\n      selectedItems.value.add(cartItemId)\r\n    }\r\n  }\r\n  \r\n  // 全选/取消全选\r\n  const toggleSelectAll = () => {\r\n    if (selectedItems.value.size === items.value.length) {\r\n      selectedItems.value.clear()\r\n    } else {\r\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId))\r\n    }\r\n  }\r\n\r\n  const clearSelected = () => selectedItems.value.clear()\r\n\r\n  return {\r\n    items: computed(() => items.value),\r\n    totalPrice,\r\n    selectedTotalPrice,\r\n    selectedItems: computed(() => selectedItems.value),\r\n    selectedItemsList,\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    fetchCart,\r\n    updateQuantity,\r\n    addItemToCart,\r\n    removeItem,\r\n    removeItems,\r\n    toggleSelection,\r\n    toggleSelectAll,\r\n    clearSelected\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}