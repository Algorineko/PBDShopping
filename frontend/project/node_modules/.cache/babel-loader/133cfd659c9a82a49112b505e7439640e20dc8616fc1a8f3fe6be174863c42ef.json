{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\nconst apiClient = axios.create({\n  // 修改baseURL使用相对路径，通过Vue代理解决跨域\n  baseURL: '/api/user',\n  // 关键修改：去掉域名和端口\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  async login(credentials) {\n    try {\n      const response = await apiClient.post('/login', {\n        username: credentials.userId,\n        password: credentials.password\n      });\n\n      // 确保从响应中获取正确的用户角色\n      const role = response.data.userType || '';\n      return {\n        data: {\n          token: response.data.token || 'simulated-token',\n          userId: credentials.userId,\n          role: role\n        }\n      };\n    } catch (error) {\n      // 更详细的错误处理\n      let errorMessage = '登录失败';\n      if (error.response) {\n        // 服务器返回了错误响应\n        if (error.response.status === 401) {\n          errorMessage = '用户ID或密码错误';\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        // 请求已发送但无响应\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        // 请求设置错误\n        errorMessage = error.message || '登录请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async register(user) {\n    try {\n      const response = await apiClient.post('/register', {\n        username: user.userId,\n        password: user.password,\n        phone: user.phone || '',\n        userType: user.role,\n        address: user.address || ''\n      });\n      return {\n        data: {\n          message: response.data.message || '注册成功'\n        }\n      };\n    } catch (error) {\n      // 更详细的错误处理\n      let errorMessage = '注册失败';\n      if (error.response) {\n        // 服务器返回了错误响应\n        if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        // 请求已发送但无响应\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        // 请求设置错误\n        errorMessage = error.message || '注册请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","login","credentials","response","post","username","userId","password","role","data","userType","token","error","errorMessage","status","request","message","Error","register","user","phone","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  // 修改baseURL使用相对路径，通过Vue代理解决跨域\r\n  baseURL: '/api/user',  // 关键修改：去掉域名和端口\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default {\r\n  async login(credentials) {\r\n    try {\r\n      const response = await apiClient.post('/login', {\r\n        username: credentials.userId,\r\n        password: credentials.password\r\n      })\r\n      \r\n      // 确保从响应中获取正确的用户角色\r\n      const role = response.data.userType || '';\r\n      \r\n      return {\r\n        data: {\r\n          token: response.data.token || 'simulated-token',\r\n          userId: credentials.userId,\r\n          role: role\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // 更详细的错误处理\r\n      let errorMessage = '登录失败';\r\n      if (error.response) {\r\n        // 服务器返回了错误响应\r\n        if (error.response.status === 401) {\r\n          errorMessage = '用户ID或密码错误';\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        // 请求已发送但无响应\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        // 请求设置错误\r\n        errorMessage = error.message || '登录请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      const response = await apiClient.post('/register', {\r\n        username: user.userId,\r\n        password: user.password,\r\n        phone: user.phone || '',\r\n        userType: user.role,\r\n        address: user.address || ''\r\n      })\r\n      \r\n      return {\r\n        data: {\r\n          message: response.data.message || '注册成功'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // 更详细的错误处理\r\n      let errorMessage = '注册失败';\r\n      if (error.response) {\r\n        // 服务器返回了错误响应\r\n        if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        // 请求已发送但无响应\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        // 请求设置错误\r\n        errorMessage = error.message || '注册请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}