{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://47.110.160.226:8080',\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\n// 请求拦截器\napiClient.interceptors.request.use(config => {\n  console.log(`Sending request to: ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 处理网络错误\n  if (error.code === 'ECONNABORTED') {\n    throw new Error('请求超时，请检查网络连接');\n  } else if (!error.response) {\n    throw new Error('网络错误，请检查后端服务是否可用');\n  }\n  return Promise.reject(error);\n});\nexport default {\n  async login(user) {\n    try {\n      const response = await apiClient.post('/user/login', {\n        username: user.userId,\n        // 映射到后端字段\n        password: user.password\n      });\n\n      // 检查响应码\n      if (response.data.code !== 200) {\n        throw new Error(response.data.message || '登录失败');\n      }\n\n      // 存储用户数据\n      const userData = response.data.data;\n      localStorage.setItem('token', userData.token || 'simulated-token');\n      localStorage.setItem('userId', userData.userId || userData.username);\n      localStorage.setItem('userName', userData.username);\n      localStorage.setItem('role', userData.userType);\n      return response;\n    } catch (error) {\n      let errorMessage = '登录失败，请重试';\n      if (error.response) {\n        errorMessage = error.response.data.message || errorMessage;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async register(user) {\n    try {\n      // 构造符合后端要求的数据结构\n      const registerData = {\n        username: user.userId,\n        // 映射到后端字段\n        password: user.password,\n        phone: user.phone,\n        userType: user.role,\n        // 映射到后端字段\n        address: user.address\n      };\n      const response = await apiClient.post('/user/register', registerData);\n\n      // 检查响应码\n      if (response.data.code !== 200) {\n        throw new Error(response.data.message || '注册失败');\n      }\n      return response;\n    } catch (error) {\n      let errorMessage = '注册失败，请重试';\n      if (error.response) {\n        // 提取后端返回的具体错误信息\n        errorMessage = error.response.data.message || errorMessage;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","interceptors","request","use","config","console","log","url","error","Promise","reject","response","code","Error","login","user","post","username","userId","password","data","message","userData","localStorage","setItem","token","userType","errorMessage","register","registerData","phone","role","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://47.110.160.226:8080',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n// 请求拦截器\r\napiClient.interceptors.request.use(config => {\r\n  console.log(`Sending request to: ${config.url}`)\r\n  return config\r\n}, error => {\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 响应拦截器\r\napiClient.interceptors.response.use(response => {\r\n  return response\r\n}, error => {\r\n  // 处理网络错误\r\n  if (error.code === 'ECONNABORTED') {\r\n    throw new Error('请求超时，请检查网络连接')\r\n  } else if (!error.response) {\r\n    throw new Error('网络错误，请检查后端服务是否可用')\r\n  }\r\n  return Promise.reject(error)\r\n})\r\n\r\nexport default {\r\n  async login(user) {\r\n    try {\r\n      const response = await apiClient.post('/user/login', {\r\n        username: user.userId,  // 映射到后端字段\r\n        password: user.password\r\n      })\r\n      \r\n      // 检查响应码\r\n      if (response.data.code !== 200) {\r\n        throw new Error(response.data.message || '登录失败')\r\n      }\r\n      \r\n      // 存储用户数据\r\n      const userData = response.data.data\r\n      localStorage.setItem('token', userData.token || 'simulated-token')\r\n      localStorage.setItem('userId', userData.userId || userData.username)\r\n      localStorage.setItem('userName', userData.username)\r\n      localStorage.setItem('role', userData.userType)\r\n      \r\n      return response\r\n    } catch (error) {\r\n      let errorMessage = '登录失败，请重试'\r\n      if (error.response) {\r\n        errorMessage = error.response.data.message || errorMessage\r\n      } else if (error.message) {\r\n        errorMessage = error.message\r\n      }\r\n      throw new Error(errorMessage)\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      // 构造符合后端要求的数据结构\r\n      const registerData = {\r\n        username: user.userId,  // 映射到后端字段\r\n        password: user.password,\r\n        phone: user.phone,\r\n        userType: user.role,    // 映射到后端字段\r\n        address: user.address\r\n      }\r\n      \r\n      const response = await apiClient.post('/user/register', registerData)\r\n      \r\n      // 检查响应码\r\n      if (response.data.code !== 200) {\r\n        throw new Error(response.data.message || '注册失败')\r\n      }\r\n      \r\n      return response\r\n    } catch (error) {\r\n      let errorMessage = '注册失败，请重试'\r\n      if (error.response) {\r\n        // 提取后端返回的具体错误信息\r\n        errorMessage = error.response.data.message || errorMessage\r\n      } else if (error.message) {\r\n        errorMessage = error.message\r\n      }\r\n      throw new Error(errorMessage)\r\n    }\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,4BAA4B;EACrCC,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE;IACPC,MAAM,EAAE,kBAAkB;IAC1B,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AACF;AACAL,SAAS,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC3CC,OAAO,CAACC,GAAG,CAAC,uBAAuBF,MAAM,CAACG,GAAG,EAAE,CAAC;EAChD,OAAOH,MAAM;AACf,CAAC,EAAEI,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAb,SAAS,CAACM,YAAY,CAACU,QAAQ,CAACR,GAAG,CAACQ,QAAQ,IAAI;EAC9C,OAAOA,QAAQ;AACjB,CAAC,EAAEH,KAAK,IAAI;EACV;EACA,IAAIA,KAAK,CAACI,IAAI,KAAK,cAAc,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjC,CAAC,MAAM,IAAI,CAACL,KAAK,CAACG,QAAQ,EAAE;IAC1B,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACrC;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAe;EACb,MAAMM,KAAKA,CAACC,IAAI,EAAE;IAChB,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMhB,SAAS,CAACqB,IAAI,CAAC,aAAa,EAAE;QACnDC,QAAQ,EAAEF,IAAI,CAACG,MAAM;QAAG;QACxBC,QAAQ,EAAEJ,IAAI,CAACI;MACjB,CAAC,CAAC;;MAEF;MACA,IAAIR,QAAQ,CAACS,IAAI,CAACR,IAAI,KAAK,GAAG,EAAE;QAC9B,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACS,IAAI,CAACC,OAAO,IAAI,MAAM,CAAC;MAClD;;MAEA;MACA,MAAMC,QAAQ,GAAGX,QAAQ,CAACS,IAAI,CAACA,IAAI;MACnCG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,IAAI,iBAAiB,CAAC;MAClEF,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEF,QAAQ,CAACJ,MAAM,IAAII,QAAQ,CAACL,QAAQ,CAAC;MACpEM,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,QAAQ,CAACL,QAAQ,CAAC;MACnDM,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,QAAQ,CAACI,QAAQ,CAAC;MAE/C,OAAOf,QAAQ;IACjB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,IAAImB,YAAY,GAAG,UAAU;MAC7B,IAAInB,KAAK,CAACG,QAAQ,EAAE;QAClBgB,YAAY,GAAGnB,KAAK,CAACG,QAAQ,CAACS,IAAI,CAACC,OAAO,IAAIM,YAAY;MAC5D,CAAC,MAAM,IAAInB,KAAK,CAACa,OAAO,EAAE;QACxBM,YAAY,GAAGnB,KAAK,CAACa,OAAO;MAC9B;MACA,MAAM,IAAIR,KAAK,CAACc,YAAY,CAAC;IAC/B;EACF,CAAC;EAED,MAAMC,QAAQA,CAACb,IAAI,EAAE;IACnB,IAAI;MACF;MACA,MAAMc,YAAY,GAAG;QACnBZ,QAAQ,EAAEF,IAAI,CAACG,MAAM;QAAG;QACxBC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;QACvBW,KAAK,EAAEf,IAAI,CAACe,KAAK;QACjBJ,QAAQ,EAAEX,IAAI,CAACgB,IAAI;QAAK;QACxBC,OAAO,EAAEjB,IAAI,CAACiB;MAChB,CAAC;MAED,MAAMrB,QAAQ,GAAG,MAAMhB,SAAS,CAACqB,IAAI,CAAC,gBAAgB,EAAEa,YAAY,CAAC;;MAErE;MACA,IAAIlB,QAAQ,CAACS,IAAI,CAACR,IAAI,KAAK,GAAG,EAAE;QAC9B,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACS,IAAI,CAACC,OAAO,IAAI,MAAM,CAAC;MAClD;MAEA,OAAOV,QAAQ;IACjB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,IAAImB,YAAY,GAAG,UAAU;MAC7B,IAAInB,KAAK,CAACG,QAAQ,EAAE;QAClB;QACAgB,YAAY,GAAGnB,KAAK,CAACG,QAAQ,CAACS,IAAI,CAACC,OAAO,IAAIM,YAAY;MAC5D,CAAC,MAAM,IAAInB,KAAK,CAACa,OAAO,EAAE;QACxBM,YAAY,GAAGnB,KAAK,CAACa,OAAO;MAC9B;MACA,MAAM,IAAIR,KAAK,CAACc,YAAY,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}