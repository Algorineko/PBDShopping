{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios'; // 添加axios导入\n\nexport default {\n  __name: 'OrderManagement',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const orderFilter = ref({\n      status: 'all',\n      dateRange: []\n    });\n    const orders = ref([]);\n\n    // 发货相关状态\n    const shipDialogVisible = ref(false);\n    const currentOrderId = ref('');\n    const shipForm = ref({\n      trackingCompany: '',\n      trackingNumber: ''\n    });\n\n    // 从token解析商家ID\n    const getMerchantIdFromToken = () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        ElMessage.error('用户未登录，请先登录');\n        return null;\n      }\n      try {\n        // 解析JWT Token\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n        const payload = JSON.parse(jsonPayload);\n        return payload.merchantId || null;\n      } catch (error) {\n        console.error('Token解析失败:', error);\n        ElMessage.error('商家信息解析失败');\n        return null;\n      }\n    };\n\n    // 状态映射（支持大小写状态）\n    const statusMap = {\n      pending: {\n        text: '待付款',\n        type: 'warning'\n      },\n      PENDING: {\n        text: '待付款',\n        type: 'warning'\n      },\n      paid: {\n        text: '已付款',\n        type: 'primary'\n      },\n      PAID: {\n        text: '已付款',\n        type: 'primary'\n      },\n      shipped: {\n        text: '已发货',\n        type: 'success'\n      },\n      SHIPPED: {\n        text: '已发货',\n        type: 'success'\n      },\n      completed: {\n        text: '已完成',\n        type: 'info'\n      },\n      COMPLETED: {\n        text: '已完成',\n        type: 'info'\n      }\n    };\n\n    // 创建扁平化的订单数据结构（每个商品一行）\n    const flattenedOrders = computed(() => {\n      const result = [];\n      filteredOrders.value.forEach(order => {\n        order.items.forEach((item, index) => {\n          result.push({\n            ...order,\n            item,\n            isFirstItem: index === 0 // 标记是否是订单中的第一个商品\n          });\n        });\n      });\n      return result;\n    });\n\n    // 过滤订单\n    const filteredOrders = computed(() => {\n      return (orders.value || []).filter(o => {\n        // 状态筛选\n        const statusMatch = orderFilter.value.status === 'all' || o.status.toLowerCase() === orderFilter.value.status.toLowerCase();\n\n        // 日期筛选\n        const dateMatch = !orderFilter.value.dateRange?.length || new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) && new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]);\n        return statusMatch && dateMatch;\n      });\n    });\n\n    // 生成递增的物流单号\n    const generateTrackingNumber = () => {\n      let lastNumber = localStorage.getItem('lastTrackingNumber') || 0;\n      lastNumber = parseInt(lastNumber) + 1;\n      localStorage.setItem('lastTrackingNumber', lastNumber.toString());\n      return lastNumber.toString().padStart(10, '0'); // 生成10位数字，不足前面补0\n    };\n\n    // 发货操作 - 打开发货对话框\n    const handleShip = orderId => {\n      currentOrderId.value = orderId;\n      // 生成物流单号\n      shipForm.value.trackingNumber = generateTrackingNumber();\n      shipForm.value.trackingCompany = ''; // 清空物流公司\n      shipDialogVisible.value = true;\n    };\n\n    // 确认发货\n    const confirmShip = () => {\n      if (!shipForm.value.trackingCompany) {\n        ElMessage.warning('请输入物流公司');\n        return;\n      }\n      const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n      const updatedOrders = savedOrders.map(o => {\n        if (o.orderId === currentOrderId.value) {\n          return {\n            ...o,\n            status: 'shipped',\n            shipTime: new Date().toLocaleString(),\n            trackingCompany: shipForm.value.trackingCompany,\n            trackingNumber: shipForm.value.trackingNumber\n          };\n        }\n        return o;\n      });\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      ElMessage.success('发货成功！');\n      shipDialogVisible.value = false;\n      loadOrders(); // 重新加载订单\n    };\n\n    // 从后端加载订单数据\n    const loadOrders = async () => {\n      try {\n        const merchantId = getMerchantIdFromToken();\n        console.log('Merchant ID:', merchantId);\n        if (!merchantId) {\n          ElMessage.error('无法获取商家信息');\n          return;\n        }\n\n        // 调用后端API获取订单\n        const response = await axios.get(`http://algorineko.top:8080/api/order/merchant/${merchantId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        // 转换数据结构\n        const backendOrders = response.data.map(order => ({\n          orderId: order.orderId,\n          merchantId: order.merchantId,\n          totalPrice: order.totalPrice,\n          status: order.status,\n          // 保持大写状态\n          createTime: new Date().toLocaleString(),\n          // 添加时间字段\n          items: order.items.map(item => ({\n            id: item.productId,\n            name: `商品 ${item.productId}`,\n            // 默认商品名称（稍后会替换）\n            price: item.price,\n            quantity: item.quantity,\n            image: '/placeholder-product.jpg' // 默认图片（稍后会替换）\n          }))\n        }));\n\n        // 获取所有唯一商品ID\n        const productIds = [...new Set(backendOrders.flatMap(order => order.items.map(item => item.id)))];\n\n        // 并发获取所有商品详情\n        const productRequests = productIds.map(id => axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        }).catch(error => {\n          console.error(`获取商品${id}详情失败:`, error);\n          return null;\n        }));\n\n        // 等待所有商品详情请求完成\n        const productResponses = await Promise.all(productRequests);\n\n        // 构建商品信息映射表\n        const productMap = {};\n        productResponses.forEach((res, index) => {\n          if (res && res.data) {\n            const product = res.data;\n            productMap[productIds[index]] = {\n              name: product.productName,\n              // 使用第一张图片或默认图片\n              image: product.images && product.images.length > 0 ? product.images[0] : '/placeholder-product.jpg'\n            };\n          }\n        });\n\n        // 更新订单中的商品信息\n        backendOrders.forEach(order => {\n          order.items.forEach(item => {\n            const productInfo = productMap[item.id];\n            if (productInfo) {\n              item.name = productInfo.name;\n              item.image = productInfo.image;\n            }\n          });\n        });\n\n        // 保存到本地存储（保持原有功能）\n        localStorage.setItem('orders', JSON.stringify(backendOrders));\n        orders.value = backendOrders;\n      } catch (error) {\n        console.error('加载订单失败:', error);\n\n        // 更详细的错误信息\n        let errorMessage = '订单加载失败';\n        if (error.response) {\n          // 服务器响应了错误状态码\n          if (error.response.status === 401) {\n            errorMessage = '用户未认证，请重新登录';\n          } else if (error.response.status === 403) {\n            errorMessage = '没有权限访问订单数据';\n          } else if (error.response.data && error.response.data.message) {\n            errorMessage = error.response.data.message;\n          }\n        } else if (error.request) {\n          // 请求已发出但没有收到响应\n          errorMessage = '无法连接到服务器，请检查网络连接';\n        }\n        ElMessage.error(errorMessage);\n        orders.value = [];\n      }\n    };\n    onMounted(() => {\n      loadOrders(); // 加载订单数据\n    });\n    const __returned__ = {\n      orderFilter,\n      orders,\n      shipDialogVisible,\n      currentOrderId,\n      shipForm,\n      getMerchantIdFromToken,\n      statusMap,\n      flattenedOrders,\n      filteredOrders,\n      generateTrackingNumber,\n      handleShip,\n      confirmShip,\n      loadOrders,\n      ref,\n      computed,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","ElMessage","axios","orderFilter","status","dateRange","orders","shipDialogVisible","currentOrderId","shipForm","trackingCompany","trackingNumber","getMerchantIdFromToken","token","localStorage","getItem","error","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","merchantId","console","statusMap","pending","text","type","PENDING","paid","PAID","shipped","SHIPPED","completed","COMPLETED","flattenedOrders","result","filteredOrders","value","forEach","order","items","item","index","push","isFirstItem","filter","o","statusMatch","toLowerCase","dateMatch","length","Date","createTime","generateTrackingNumber","lastNumber","parseInt","setItem","padStart","handleShip","orderId","confirmShip","warning","savedOrders","updatedOrders","shipTime","toLocaleString","stringify","success","loadOrders","log","response","get","headers","backendOrders","data","totalPrice","id","productId","name","price","quantity","image","productIds","Set","flatMap","productRequests","catch","productResponses","Promise","all","productMap","res","product","productName","images","productInfo","errorMessage","message","request"],"sources":["E:/实验例子/project/src/views/business/OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-section\">\r\n    <h2><i class=\"el-icon-tickets\"></i> 订单管理</h2>\r\n    <div class=\"filter-bar\">\r\n      <div class=\"filter-group\">\r\n        <el-select \r\n          v-model=\"orderFilter.status\" \r\n          placeholder=\"订单状态\" \r\n          style=\"width: 150px\"\r\n        >\r\n          <el-option label=\"全部\" value=\"all\" />\r\n          <el-option label=\"待付款\" value=\"pending\" />\r\n          <el-option label=\"已付款\" value=\"paid\" />\r\n          <el-option label=\"已发货\" value=\"shipped\" />\r\n          <el-option label=\"已完成\" value=\"completed\" />\r\n        </el-select>\r\n        <el-date-picker\r\n          v-model=\"orderFilter.dateRange\"\r\n          type=\"daterange\"\r\n          range-separator=\"至\"\r\n          start-placeholder=\"开始日期\"\r\n          end-placeholder=\"结束日期\"\r\n          style=\"width: 350px\"\r\n        />\r\n      </div>\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"loadOrders\">搜索</el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"flattenedOrders\" border style=\"width: 100%\" class=\"data-table\">\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"180\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      \r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-row\">\r\n            <el-image \r\n              :src=\"row.item.image || '/placeholder-product.jpg'\"\r\n              style=\"width: 60px; height: 60px; border-radius: 4px;\"\r\n              fit=\"cover\"\r\n            />\r\n            <div class=\"product-details\">\r\n              <div class=\"product-name\">{{ row.item.name }}</div>\r\n              <div class=\"product-meta\">\r\n                <span class=\"product-price\">¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}</span>\r\n                <span class=\"product-subtotal\">小计: ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row?.status]?.type || 'info'\">\r\n            {{ statusMap[row?.status]?.text || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 操作列：增加发货按钮 -->\r\n      <el-table-column label=\"操作\" width=\"150\">\r\n        <template #default=\"{ row }\">\r\n          <div v-if=\"row\">\r\n            <!-- 发货按钮：只对已付款订单显示 -->\r\n            <el-button \r\n              v-if=\"row.status === 'paid' && row.isFirstItem\"\r\n              size=\"small\" \r\n              type=\"success\"\r\n              icon=\"el-icon-truck\"\r\n              @click=\"handleShip(row.orderId)\"\r\n            >发货</el-button>\r\n            <!-- 已发货状态显示 -->\r\n            <span v-else-if=\"row.status === 'shipped' && row.isFirstItem\">\r\n              <el-tag type=\"success\">已发货</el-tag>\r\n            </span>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    \r\n    <!-- 发货对话框 -->\r\n    <el-dialog v-model=\"shipDialogVisible\" title=\"订单发货\" width=\"500px\">\r\n      <el-form :model=\"shipForm\" label-width=\"100px\">\r\n        <el-form-item label=\"订单号\">\r\n          <el-input v-model=\"currentOrderId\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流公司\" required>\r\n          <el-input v-model=\"shipForm.trackingCompany\" placeholder=\"请输入物流公司名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号\">\r\n          <el-input v-model=\"shipForm.trackingNumber\" disabled />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"shipDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmShip\">确定发货</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios' // 添加axios导入\r\n\r\nconst orderFilter = ref({ status: 'all', dateRange: [] })\r\nconst orders = ref([])\r\n\r\n// 发货相关状态\r\nconst shipDialogVisible = ref(false)\r\nconst currentOrderId = ref('')\r\nconst shipForm = ref({\r\n  trackingCompany: '',\r\n  trackingNumber: ''\r\n})\r\n\r\n// 从token解析商家ID\r\nconst getMerchantIdFromToken = () => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    ElMessage.error('用户未登录，请先登录')\r\n    return null\r\n  }\r\n  \r\n  try {\r\n    // 解析JWT Token\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    const payload = JSON.parse(jsonPayload)\r\n    return payload.merchantId || null\r\n  } catch (error) {\r\n    console.error('Token解析失败:', error)\r\n    ElMessage.error('商家信息解析失败')\r\n    return null\r\n  }\r\n}\r\n\r\n// 状态映射（支持大小写状态）\r\nconst statusMap = {\r\n  pending: { text: '待付款', type: 'warning' },\r\n  PENDING: { text: '待付款', type: 'warning' },\r\n  paid: { text: '已付款', type: 'primary' },\r\n  PAID: { text: '已付款', type: 'primary' },\r\n  shipped: { text: '已发货', type: 'success' },\r\n  SHIPPED: { text: '已发货', type: 'success' },\r\n  completed: { text: '已完成', type: 'info' },\r\n  COMPLETED: { text: '已完成', type: 'info' }\r\n}\r\n\r\n// 创建扁平化的订单数据结构（每个商品一行）\r\nconst flattenedOrders = computed(() => {\r\n  const result = []\r\n  \r\n  filteredOrders.value.forEach(order => {\r\n    order.items.forEach((item, index) => {\r\n      result.push({\r\n        ...order,\r\n        item,\r\n        isFirstItem: index === 0  // 标记是否是订单中的第一个商品\r\n      })\r\n    })\r\n  })\r\n  \r\n  return result\r\n})\r\n\r\n// 过滤订单\r\nconst filteredOrders = computed(() => {\r\n  return (orders.value || [])\r\n    .filter(o => {\r\n      // 状态筛选\r\n      const statusMatch = orderFilter.value.status === 'all' || \r\n                       o.status.toLowerCase() === orderFilter.value.status.toLowerCase()\r\n      \r\n      // 日期筛选\r\n      const dateMatch = !orderFilter.value.dateRange?.length || (\r\n        new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) &&\r\n        new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]))\r\n      \r\n      return statusMatch && dateMatch\r\n    })\r\n})\r\n\r\n// 生成递增的物流单号\r\nconst generateTrackingNumber = () => {\r\n  let lastNumber = localStorage.getItem('lastTrackingNumber') || 0\r\n  lastNumber = parseInt(lastNumber) + 1\r\n  localStorage.setItem('lastTrackingNumber', lastNumber.toString())\r\n  return lastNumber.toString().padStart(10, '0') // 生成10位数字，不足前面补0\r\n}\r\n\r\n// 发货操作 - 打开发货对话框\r\nconst handleShip = (orderId) => {\r\n  currentOrderId.value = orderId\r\n  // 生成物流单号\r\n  shipForm.value.trackingNumber = generateTrackingNumber()\r\n  shipForm.value.trackingCompany = '' // 清空物流公司\r\n  shipDialogVisible.value = true\r\n}\r\n\r\n// 确认发货\r\nconst confirmShip = () => {\r\n  if (!shipForm.value.trackingCompany) {\r\n    ElMessage.warning('请输入物流公司')\r\n    return\r\n  }\r\n  \r\n  const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  const updatedOrders = savedOrders.map(o => {\r\n    if (o.orderId === currentOrderId.value) {\r\n      return {\r\n        ...o,\r\n        status: 'shipped',\r\n        shipTime: new Date().toLocaleString(),\r\n        trackingCompany: shipForm.value.trackingCompany,\r\n        trackingNumber: shipForm.value.trackingNumber\r\n      }\r\n    }\r\n    return o\r\n  })\r\n  \r\n  localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n  \r\n  ElMessage.success('发货成功！')\r\n  shipDialogVisible.value = false\r\n  loadOrders() // 重新加载订单\r\n}\r\n\r\n// 从后端加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    console.log('Merchant ID:', merchantId)\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return\r\n    }\r\n    \r\n    // 调用后端API获取订单\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/merchant/${merchantId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 转换数据结构\r\n    const backendOrders = response.data.map(order => ({\r\n      orderId: order.orderId,\r\n      merchantId: order.merchantId,\r\n      totalPrice: order.totalPrice,\r\n      status: order.status, // 保持大写状态\r\n      createTime: new Date().toLocaleString(), // 添加时间字段\r\n      items: order.items.map(item => ({\r\n        id: item.productId,\r\n        name: `商品 ${item.productId}`, // 默认商品名称（稍后会替换）\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: '/placeholder-product.jpg' // 默认图片（稍后会替换）\r\n      }))\r\n    }))\r\n\r\n    // 获取所有唯一商品ID\r\n    const productIds = [...new Set(\r\n      backendOrders.flatMap(order => \r\n        order.items.map(item => item.id)\r\n      )\r\n    )]\r\n\r\n    // 并发获取所有商品详情\r\n    const productRequests = productIds.map(id => \r\n      axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }).catch(error => {\r\n        console.error(`获取商品${id}详情失败:`, error)\r\n        return null\r\n      })\r\n    )\r\n\r\n    // 等待所有商品详情请求完成\r\n    const productResponses = await Promise.all(productRequests)\r\n    \r\n    // 构建商品信息映射表\r\n    const productMap = {}\r\n    productResponses.forEach((res, index) => {\r\n      if (res && res.data) {\r\n        const product = res.data\r\n        productMap[productIds[index]] = {\r\n          name: product.productName,\r\n          // 使用第一张图片或默认图片\r\n          image: product.images && product.images.length > 0 \r\n            ? product.images[0] \r\n            : '/placeholder-product.jpg'\r\n        }\r\n      }\r\n    })\r\n\r\n    // 更新订单中的商品信息\r\n    backendOrders.forEach(order => {\r\n      order.items.forEach(item => {\r\n        const productInfo = productMap[item.id]\r\n        if (productInfo) {\r\n          item.name = productInfo.name\r\n          item.image = productInfo.image\r\n        }\r\n      })\r\n    })\r\n\r\n    // 保存到本地存储（保持原有功能）\r\n    localStorage.setItem('orders', JSON.stringify(backendOrders))\r\n    \r\n    orders.value = backendOrders\r\n  } catch (error) {\r\n    console.error('加载订单失败:', error)\r\n    \r\n    // 更详细的错误信息\r\n    let errorMessage = '订单加载失败'\r\n    if (error.response) {\r\n      // 服务器响应了错误状态码\r\n      if (error.response.status === 401) {\r\n        errorMessage = '用户未认证，请重新登录'\r\n      } else if (error.response.status === 403) {\r\n        errorMessage = '没有权限访问订单数据'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发出但没有收到响应\r\n      errorMessage = '无法连接到服务器，请检查网络连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    orders.value = []\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  loadOrders() // 加载订单数据\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.order-section h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 25px;\r\n  color: #303133;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.order-section h2 i {\r\n  margin-right: 12px;\r\n  font-size: 24px;\r\n  color: #409eff;\r\n}\r\n\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.data-table {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\n.product-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  font-size: 14px;\r\n}\r\n\r\n.product-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.product-price {\r\n  color: #666;\r\n  font-size: 13px;\r\n}\r\n\r\n.product-subtotal {\r\n  font-weight: 600;\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}