{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n\nexport default {\n  login(user) {\n    const roles = ['business', 'buyer', 'admin'];\n    for (const role of roles) {\n      const users = JSON.parse(localStorage.getItem(`${role}Users`) || '[]');\n\n      // 修复点：正确比较用户输入的密码和存储的密码\n      const foundUser = users.find(u => u.userId === user.userId && u.password === user.password);\n      if (foundUser) {\n        return Promise.resolve({\n          data: {\n            token: 'simulated-token',\n            userId: foundUser.userId,\n            userName: foundUser.userName,\n            role: foundUser.role\n          }\n        });\n      }\n    }\n    return Promise.reject(new Error('用户ID或密码错误'));\n  },\n  register(user) {\n    return new Promise((resolve, reject) => {\n      const key = `${user.role}Users`;\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\n\n      // 用户ID查重\n      if (users.some(u => u.userId === user.userId)) {\n        reject(new Error('用户ID已存在'));\n        return;\n      }\n\n      // 创建新用户对象\n      const newUser = {\n        userId: user.userId,\n        userName: user.userName,\n        password: user.password,\n        role: user.role\n      };\n\n      // 更新存储\n      users.push(newUser);\n      localStorage.setItem(key, JSON.stringify(users));\n      resolve({\n        data: {\n          message: '注册成功',\n          user: newUser\n        }\n      });\n    });\n  }\n};","map":{"version":3,"names":["login","user","roles","role","users","JSON","parse","localStorage","getItem","foundUser","find","u","userId","password","Promise","resolve","data","token","userName","reject","Error","register","key","some","newUser","push","setItem","stringify","message"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n\r\nexport default {\r\n  login(user) {\r\n    const roles = ['business', 'buyer', 'admin'];\r\n    for (const role of roles) {\r\n      const users = JSON.parse(localStorage.getItem(`${role}Users`) || '[]');\r\n      \r\n      // 修复点：正确比较用户输入的密码和存储的密码\r\n      const foundUser = users.find(u => \r\n        u.userId === user.userId && u.password === user.password\r\n      );\r\n      \r\n      if (foundUser) {\r\n        return Promise.resolve({\r\n          data: {\r\n            token: 'simulated-token',\r\n            userId: foundUser.userId,\r\n            userName: foundUser.userName,\r\n            role: foundUser.role\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return Promise.reject(new Error('用户ID或密码错误'));\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 用户ID查重\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;EACbA,KAAKA,CAACC,IAAI,EAAE;IACV,MAAMC,KAAK,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC;IAC5C,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;MACxB,MAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,GAAGL,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC;;MAEtE;MACA,MAAMM,SAAS,GAAGL,KAAK,CAACM,IAAI,CAACC,CAAC,IAC5BA,CAAC,CAACC,MAAM,KAAKX,IAAI,CAACW,MAAM,IAAID,CAAC,CAACE,QAAQ,KAAKZ,IAAI,CAACY,QAClD,CAAC;MAED,IAAIJ,SAAS,EAAE;QACb,OAAOK,OAAO,CAACC,OAAO,CAAC;UACrBC,IAAI,EAAE;YACJC,KAAK,EAAE,iBAAiB;YACxBL,MAAM,EAAEH,SAAS,CAACG,MAAM;YACxBM,QAAQ,EAAET,SAAS,CAACS,QAAQ;YAC5Bf,IAAI,EAAEM,SAAS,CAACN;UAClB;QACF,CAAC,CAAC;MACJ;IACF;IACA,OAAOW,OAAO,CAACK,MAAM,CAAC,IAAIC,KAAK,CAAC,WAAW,CAAC,CAAC;EAC/C,CAAC;EAEDC,QAAQA,CAACpB,IAAI,EAAE;IACb,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEI,MAAM,KAAK;MACtC,MAAMG,GAAG,GAAG,GAAGrB,IAAI,CAACE,IAAI,OAAO;MAC/B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACc,GAAG,CAAC,IAAI,IAAI,CAAC;;MAE3D;MACA,IAAIlB,KAAK,CAACmB,IAAI,CAACZ,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKX,IAAI,CAACW,MAAM,CAAC,EAAE;QAC7CO,MAAM,CAAC,IAAIC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC5B;MACF;;MAEA;MACA,MAAMI,OAAO,GAAG;QACdZ,MAAM,EAAEX,IAAI,CAACW,MAAM;QACnBM,QAAQ,EAAEjB,IAAI,CAACiB,QAAQ;QACvBL,QAAQ,EAAEZ,IAAI,CAACY,QAAQ;QACvBV,IAAI,EAAEF,IAAI,CAACE;MACb,CAAC;;MAED;MACAC,KAAK,CAACqB,IAAI,CAACD,OAAO,CAAC;MACnBjB,YAAY,CAACmB,OAAO,CAACJ,GAAG,EAAEjB,IAAI,CAACsB,SAAS,CAACvB,KAAK,CAAC,CAAC;MAEhDW,OAAO,CAAC;QACNC,IAAI,EAAE;UACJY,OAAO,EAAE,MAAM;UACf3B,IAAI,EAAEuB;QACR;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}