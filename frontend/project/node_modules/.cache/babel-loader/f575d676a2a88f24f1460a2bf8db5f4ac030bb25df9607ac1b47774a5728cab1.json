{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\n\n// 订单状态配置\n\nexport default {\n  __name: 'UserOrders',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const statusText = {\n      pending: '待付款',\n      shipped: '已发货',\n      completed: '已完成',\n      canceled: '已取消'\n    };\n    const statusType = {\n      pending: 'warning',\n      shipped: 'primary',\n      completed: 'success',\n      canceled: 'info'\n    };\n\n    // 筛选选项\n    const statusOptions = ref([{\n      value: 'all',\n      label: '全部状态'\n    }, {\n      value: 'pending',\n      label: '待付款'\n    }, {\n      value: 'shipped',\n      label: '已发货'\n    }, {\n      value: 'completed',\n      label: '已完成'\n    }]);\n\n    // 订单数据\n    const orders = ref([]); // 确保初始化为数组\n    const filterStatus = ref('all');\n    const filterDate = ref([]);\n    const total = ref(0);\n    const pageSize = ref(10);\n    const currentPage = ref(1);\n\n    // 模拟订单数据加载\n    const loadOrders = async () => {\n      try {\n        // 实际项目应替换为API调用\n        const mockData = [];\n        const start = (currentPage.value - 1) * pageSize.value;\n        for (let i = 0; i < pageSize.value; i++) {\n          mockData.push({\n            orderId: `2023100${start + i + 1}`,\n            createTime: `2023-10-${String(start + i + 1).padStart(2, '0')} 14:30:00`,\n            amount: Math.random() * 500 + 100,\n            status: Object.keys(statusText)[Math.floor(Math.random() * 4)]\n          });\n        }\n        orders.value = mockData;\n        total.value = 50;\n      } catch (error) {\n        ElMessage.error('订单加载失败');\n        orders.value = []; // 确保出错时重置为空数组\n      }\n    };\n\n    // 查看订单详情（添加参数验证）\n    const viewDetail = orderId => {\n      if (!orderId) {\n        ElMessage.warning('无效的订单号');\n        return;\n      }\n      console.log('查看订单详情:', orderId);\n      // router.push(`/order/${orderId}`)\n    };\n\n    // 支付订单（添加安全验证）\n    const payOrder = orderId => {\n      if (!orderId) {\n        ElMessage.warning('无效的订单号');\n        return;\n      }\n      ElMessage.success(`模拟支付订单 ${orderId} 成功`);\n      orders.value = orders.value.map(order => order.orderId === orderId ? {\n        ...order,\n        status: 'shipped'\n      } : order);\n    };\n\n    // 分页处理\n    const handlePageChange = page => {\n      currentPage.value = page;\n      loadOrders();\n    };\n\n    // 初始化加载\n    onMounted(() => {\n      loadOrders();\n    });\n    const __returned__ = {\n      statusText,\n      statusType,\n      statusOptions,\n      orders,\n      filterStatus,\n      filterDate,\n      total,\n      pageSize,\n      currentPage,\n      loadOrders,\n      viewDetail,\n      payOrder,\n      handlePageChange,\n      ref,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","ElMessage","statusText","pending","shipped","completed","canceled","statusType","statusOptions","value","label","orders","filterStatus","filterDate","total","pageSize","currentPage","loadOrders","mockData","start","i","push","orderId","createTime","String","padStart","amount","Math","random","status","Object","keys","floor","error","viewDetail","warning","console","log","payOrder","success","map","order","handlePageChange","page"],"sources":["E:/实验例子/project/src/components/UserOrders.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-orders\">\r\n    <h2>我的订单</h2>\r\n    \r\n    <!-- 订单筛选 -->\r\n    <div class=\"filter-section\">\r\n      <el-select v-model=\"filterStatus\" placeholder=\"全部状态\" @change=\"loadOrders\">\r\n        <el-option\r\n          v-for=\"status in statusOptions\"\r\n          :key=\"status.value\"\r\n          :label=\"status.label\"\r\n          :value=\"status.value\"\r\n        />\r\n      </el-select>\r\n      <el-date-picker\r\n        v-model=\"filterDate\"\r\n        type=\"daterange\"\r\n        range-separator=\"至\"\r\n        start-placeholder=\"开始日期\"\r\n        end-placeholder=\"结束日期\"\r\n        @change=\"loadOrders\"\r\n      />\r\n    </div>\r\n\r\n    <!-- 订单列表 -->\r\n    <el-table \r\n      :data=\"orders\"\r\n      v-if=\"orders.length > 0\"\r\n      border \r\n      style=\"width: 100%\"\r\n    >\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"200\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"scope\">\r\n          ¥{{ scope.row.amount?.toFixed(2) || '0.00' }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"scope\">\r\n          <el-tag :type=\"statusType[scope.row.status] || 'info'\">\r\n            {{ statusText[scope.row.status] || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"150\">\r\n        <template #default=\"scope\">\r\n          <el-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            @click=\"viewDetail(scope.row?.orderId)\"\r\n          >\r\n            详情\r\n          </el-button>\r\n          <el-button \r\n            v-if=\"scope.row?.status === 'pending'\"\r\n            type=\"success\" \r\n            size=\"small\"\r\n            @click=\"payOrder(scope.row?.orderId)\"\r\n          >\r\n            付款\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 空状态提示 -->\r\n    <el-empty v-else description=\"暂无订单数据\" class=\"empty-placeholder\" />\r\n\r\n    <!-- 分页 -->\r\n    <div class=\"pagination\" v-if=\"orders.length > 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"prev, pager, next\"\r\n        :total=\"total\"\r\n        :page-size=\"pageSize\"\r\n        @current-change=\"handlePageChange\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n// 订单状态配置\r\nconst statusText = {\r\n  pending: '待付款',\r\n  shipped: '已发货',\r\n  completed: '已完成',\r\n  canceled: '已取消'\r\n}\r\n\r\nconst statusType = {\r\n  pending: 'warning',\r\n  shipped: 'primary',\r\n  completed: 'success',\r\n  canceled: 'info'\r\n}\r\n\r\n// 筛选选项\r\nconst statusOptions = ref([\r\n  { value: 'all', label: '全部状态' },\r\n  { value: 'pending', label: '待付款' },\r\n  { value: 'shipped', label: '已发货' },\r\n  { value: 'completed', label: '已完成' }\r\n])\r\n\r\n// 订单数据\r\nconst orders = ref([]) // 确保初始化为数组\r\nconst filterStatus = ref('all')\r\nconst filterDate = ref([])\r\nconst total = ref(0)\r\nconst pageSize = ref(10)\r\nconst currentPage = ref(1)\r\n\r\n// 模拟订单数据加载\r\nconst loadOrders = async () => {\r\n  try {\r\n    // 实际项目应替换为API调用\r\n    const mockData = []\r\n    const start = (currentPage.value - 1) * pageSize.value\r\n    for (let i = 0; i < pageSize.value; i++) {\r\n      mockData.push({\r\n        orderId: `2023100${start + i + 1}`,\r\n        createTime: `2023-10-${String(start + i + 1).padStart(2, '0')} 14:30:00`,\r\n        amount: Math.random() * 500 + 100,\r\n        status: Object.keys(statusText)[Math.floor(Math.random() * 4)]\r\n      })\r\n    }\r\n    orders.value = mockData\r\n    total.value = 50\r\n  } catch (error) {\r\n    ElMessage.error('订单加载失败')\r\n    orders.value = [] // 确保出错时重置为空数组\r\n  }\r\n}\r\n\r\n// 查看订单详情（添加参数验证）\r\nconst viewDetail = (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  console.log('查看订单详情:', orderId)\r\n  // router.push(`/order/${orderId}`)\r\n}\r\n\r\n// 支付订单（添加安全验证）\r\nconst payOrder = (orderId) => {\r\n  if (!orderId) {\r\n    ElMessage.warning('无效的订单号')\r\n    return\r\n  }\r\n  ElMessage.success(`模拟支付订单 ${orderId} 成功`)\r\n  orders.value = orders.value.map(order => \r\n    order.orderId === orderId ? { ...order, status: 'shipped' } : order\r\n  )\r\n}\r\n\r\n// 分页处理\r\nconst handlePageChange = (page) => {\r\n  currentPage.value = page\r\n  loadOrders()\r\n}\r\n\r\n// 初始化加载\r\nonMounted(() => {\r\n  loadOrders()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.user-orders {\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\r\n}\r\n\r\n.filter-section {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.el-table {\r\n  margin-top: 15px;\r\n}\r\n\r\n.empty-placeholder {\r\n  margin-top: 50px;\r\n}\r\n\r\n.el-tag {\r\n  margin: 2px 0;\r\n}\r\n\r\n/* 响应式适配 */\r\n@media (max-width: 768px) {\r\n  .filter-section {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .el-table {\r\n    overflow-x: auto;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}