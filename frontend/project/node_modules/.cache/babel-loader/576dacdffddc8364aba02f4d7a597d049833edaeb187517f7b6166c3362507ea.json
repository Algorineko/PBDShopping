{"ast":null,"code":"import axios from 'axios';\n\n// 根据环境变量设置基础URL\nconst getBaseURL = () => {\n  if (process.env.NODE_ENV === 'development') {\n    // 开发环境使用代理路径\n    return '/api';\n  } else {\n    // 生产环境使用实际后端地址（已修正）\n    return 'http://47.110.160.226:8080';\n  }\n};\nconst apiClient = axios.create({\n  baseURL: getBaseURL(),\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  async login(credentials) {\n    try {\n      const response = await apiClient.post('/api/user/login', {\n        username: credentials.userId,\n        password: credentials.password\n      });\n      const role = response.data.userType || '';\n      return {\n        data: {\n          token: response.data.token || 'simulated-token',\n          userId: credentials.userId,\n          role: role\n        }\n      };\n    } catch (error) {\n      let errorMessage = '登录失败';\n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = '用户ID或密码错误';\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        errorMessage = error.message || '登录请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async register(user) {\n    try {\n      // 修改注册接口路径为/api/user/register\n      const response = await apiClient.post('/api/user/register', {\n        username: user.userId,\n        password: user.password,\n        phone: user.phone || '',\n        userType: user.role,\n        address: user.address || ''\n      });\n      return {\n        data: {\n          message: response.data.message || '注册成功'\n        }\n      };\n    } catch (error) {\n      let errorMessage = '注册失败';\n      if (error.response) {\n        if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        errorMessage = error.message || '注册请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","getBaseURL","process","env","NODE_ENV","apiClient","create","baseURL","withCredentials","headers","Accept","login","credentials","response","post","username","userId","password","role","data","userType","token","error","errorMessage","status","request","message","Error","register","user","phone","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 根据环境变量设置基础URL\r\nconst getBaseURL = () => {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // 开发环境使用代理路径\r\n    return '/api'\r\n  } else {\r\n    // 生产环境使用实际后端地址（已修正）\r\n    return 'http://47.110.160.226:8080'\r\n  }\r\n}\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: getBaseURL(),\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default {\r\n  async login(credentials) {\r\n    try {\r\n      const response = await apiClient.post('/api/user/login', {\r\n        username: credentials.userId,\r\n        password: credentials.password\r\n      })\r\n      \r\n      const role = response.data.userType || '';\r\n      \r\n      return {\r\n        data: {\r\n          token: response.data.token || 'simulated-token',\r\n          userId: credentials.userId,\r\n          role: role\r\n        }\r\n      }\r\n    } catch (error) {\r\n      let errorMessage = '登录失败';\r\n      if (error.response) {\r\n        if (error.response.status === 401) {\r\n          errorMessage = '用户ID或密码错误';\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        errorMessage = error.message || '登录请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      // 修改注册接口路径为/api/user/register\r\n      const response = await apiClient.post('/api/user/register', {\r\n        username: user.userId,\r\n        password: user.password,\r\n        phone: user.phone || '',\r\n        userType: user.role,\r\n        address: user.address || ''\r\n      })\r\n      \r\n      return {\r\n        data: {\r\n          message: response.data.message || '注册成功'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      let errorMessage = '注册失败';\r\n      if (error.response) {\r\n        if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        errorMessage = error.message || '注册请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}