{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n// stores/cart.js\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nexport const useCartStore = defineStore('cart', () => {\n  const items = ref([]);\n  const selectedItems = ref(new Set());\n  const loading = ref(false);\n  const error = ref(null);\n\n  // 添加商品\n  const addItem = item => {\n    const existing = items.value.find(i => i.id === item.id);\n    if (existing) {\n      existing.quantity += Number(item.quantity) || 1;\n    } else {\n      items.value.push({\n        id: item.id,\n        name: item.name || '未知商品',\n        price: Number(item.price) || 0,\n        // 强制转换为数字\n        quantity: Math.max(1, Number(item.quantity) || 1),\n        image: item.image || '/placeholder-product.jpg'\n      });\n    }\n    persistCart();\n  };\n  // 从后端获取购物车数据\n  const fetchCart = async () => {\n    loading.value = true;\n    error.value = null;\n    try {\n      const token = localStorage.getItem('token');\n      console.log('token:', token);\n      if (!token) throw new Error('用户未登录');\n      const response = await axios.get('http://algorineko.top:8080/api/customer/cart/get', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 映射后端数据结构到前端格式\n      items.value = response.data.map(item => ({\n        id: item.productId,\n        cartItemId: item.cartItemId,\n        name: item.product?.name || '未知商品',\n        price: Number(item.product?.price) || 0,\n        quantity: Math.max(1, Number(item.quantity) || 1),\n        image: item.product?.image || '/placeholder-product.jpg'\n      }));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('获取购物车失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 更新购物车项数量\n  const updateQuantity = async (cartItemId, quantity) => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.put(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, {\n        cartItemId,\n        quantity,\n        selectedOptions: \"\" // 根据实际需求调整\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // 更新本地状态\n      const item = items.value.find(i => i.cartItemId === cartItemId);\n      if (item) {\n        item.quantity = quantity;\n      }\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('更新购物车项失败:', err);\n      // 重新获取最新数据\n      await fetchCart();\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 移除商品\n  const removeItem = async cartItemId => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.delete(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 更新本地状态\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId);\n      selectedItems.value.delete(cartItemId);\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 批量移除商品\n  const removeItems = async cartItemIds => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n\n      // 并行删除所有选中项\n      await Promise.all(cartItemIds.map(id => axios.delete(`http://algorineko.top:8080/api/customer/cart/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })));\n\n      // 更新本地状态\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId));\n      cartItemIds.forEach(id => selectedItems.value.delete(id));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('批量删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 总价计算\n  const totalPrice = computed(() => items.value.reduce((sum, item) => {\n    const price = Number(item.price) || 0;\n    const quantity = Number(item.quantity) || 1;\n    return sum + price * quantity;\n  }, 0));\n\n  // 选中商品总价\n  const selectedTotalPrice = computed(() => items.value.reduce((sum, item) => {\n    if (selectedItems.value.has(item.cartItemId)) {\n      const price = Number(item.price) || 0;\n      const quantity = Number(item.quantity) || 1;\n      return sum + price * quantity;\n    }\n    return sum;\n  }, 0));\n\n  // 选中的商品列表\n  const selectedItemsList = computed(() => items.value.filter(item => selectedItems.value.has(item.cartItemId)));\n  const toggleSelection = cartItemId => {\n    if (selectedItems.value.has(cartItemId)) {\n      selectedItems.value.delete(cartItemId);\n    } else {\n      selectedItems.value.add(cartItemId);\n    }\n  };\n\n  // 全选/取消全选\n  const toggleSelectAll = () => {\n    if (selectedItems.value.size === items.value.length) {\n      selectedItems.value.clear();\n    } else {\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId));\n    }\n  };\n  const clearSelected = () => selectedItems.value.clear();\n  return {\n    items: computed(() => items.value),\n    totalPrice,\n    selectedTotalPrice,\n    selectedItems: computed(() => selectedItems.value),\n    selectedItemsList,\n    loading: computed(() => loading.value),\n    error: computed(() => error.value),\n    fetchCart,\n    updateQuantity,\n    addItem,\n    removeItem,\n    removeItems,\n    toggleSelection,\n    toggleSelectAll,\n    clearSelected\n  };\n});","map":{"version":3,"names":["defineStore","ref","computed","axios","useCartStore","items","selectedItems","Set","loading","error","addItem","item","existing","value","find","i","id","quantity","Number","push","name","price","Math","max","image","persistCart","fetchCart","token","localStorage","getItem","console","log","Error","response","get","headers","Authorization","data","map","productId","cartItemId","product","err","message","updateQuantity","put","selectedOptions","removeItem","delete","filter","removeItems","cartItemIds","Promise","all","includes","forEach","totalPrice","reduce","sum","selectedTotalPrice","has","selectedItemsList","toggleSelection","add","toggleSelectAll","size","length","clear","clearSelected"],"sources":["E:/实验例子/project/src/stores/cart.js"],"sourcesContent":["// stores/cart.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\nexport const useCartStore = defineStore('cart', () => {\r\n  const items = ref([])\r\n  const selectedItems = ref(new Set())\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n  \r\n\r\n  // 添加商品\r\n  const addItem = (item) => {\r\n    const existing = items.value.find(i => i.id === item.id)\r\n    if (existing) {\r\n      existing.quantity += Number(item.quantity) || 1\r\n    } else {\r\n      items.value.push({\r\n        id: item.id,\r\n        name: item.name || '未知商品',\r\n        price: Number(item.price) || 0, // 强制转换为数字\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.image || '/placeholder-product.jpg'\r\n      })\r\n    }\r\n    persistCart()\r\n  }\r\n  // 从后端获取购物车数据\r\n  const fetchCart = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    try {\r\n  \r\n      const token = localStorage.getItem('token')\r\n      console.log('token:', token)\r\n      if (!token) throw new Error('用户未登录')\r\n   \r\n      const response = await axios.get(\r\n        'http://algorineko.top:8080/api/customer/cart/get',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 映射后端数据结构到前端格式\r\n      items.value = response.data.map(item => ({\r\n        id: item.productId,\r\n        cartItemId: item.cartItemId,\r\n        name: item.product?.name || '未知商品',\r\n        price: Number(item.product?.price) || 0,\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.product?.image || '/placeholder-product.jpg'\r\n      }))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('获取购物车失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新购物车项数量\r\n  const updateQuantity = async (cartItemId, quantity) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.put(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          cartItemId,\r\n          quantity,\r\n          selectedOptions: \"\" // 根据实际需求调整\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      const item = items.value.find(i => i.cartItemId === cartItemId)\r\n      if (item) {\r\n        item.quantity = quantity\r\n      }\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('更新购物车项失败:', err)\r\n      // 重新获取最新数据\r\n      await fetchCart()\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 移除商品\r\n  const removeItem = async (cartItemId) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.delete(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId)\r\n      selectedItems.value.delete(cartItemId)\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 批量移除商品\r\n  const removeItems = async (cartItemIds) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 并行删除所有选中项\r\n      await Promise.all(\r\n        cartItemIds.map(id => \r\n          axios.delete(\r\n            `http://algorineko.top:8080/api/customer/cart/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }\r\n          )\r\n        )\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId))\r\n      cartItemIds.forEach(id => selectedItems.value.delete(id))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('批量删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 总价计算\r\n  const totalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      const price = Number(item.price) || 0\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中商品总价\r\n  const selectedTotalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      if (selectedItems.value.has(item.cartItemId)) {\r\n        const price = Number(item.price) || 0\r\n        const quantity = Number(item.quantity) || 1\r\n        return sum + (price * quantity)\r\n      }\r\n      return sum\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中的商品列表\r\n  const selectedItemsList = computed(() => \r\n    items.value.filter(item => selectedItems.value.has(item.cartItemId))\r\n  )\r\n\r\n  const toggleSelection = (cartItemId) => {\r\n    if (selectedItems.value.has(cartItemId)) {\r\n      selectedItems.value.delete(cartItemId)\r\n    } else {\r\n      selectedItems.value.add(cartItemId)\r\n    }\r\n  }\r\n  \r\n  // 全选/取消全选\r\n  const toggleSelectAll = () => {\r\n    if (selectedItems.value.size === items.value.length) {\r\n      selectedItems.value.clear()\r\n    } else {\r\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId))\r\n    }\r\n  }\r\n\r\n  const clearSelected = () => selectedItems.value.clear()\r\n\r\n  return {\r\n    items: computed(() => items.value),\r\n    totalPrice,\r\n    selectedTotalPrice,\r\n    selectedItems: computed(() => selectedItems.value),\r\n    selectedItemsList,\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    fetchCart,\r\n    updateQuantity,\r\n    addItem,\r\n    removeItem,\r\n    removeItems,\r\n    toggleSelection,\r\n    toggleSelectAll,\r\n    clearSelected\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}