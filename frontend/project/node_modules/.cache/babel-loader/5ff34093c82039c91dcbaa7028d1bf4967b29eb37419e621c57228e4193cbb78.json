{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { useCartStore } from '@/stores/cart';\nimport axios from 'axios';\nexport default {\n  __name: 'ProductDetail',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const router = useRouter();\n    const cartStore = useCartStore();\n    const product = ref({\n      id: '',\n      name: '',\n      price: 0,\n      images: [],\n      description: ''\n    });\n\n    // 新增评价相关变量\n    const reviews = ref([]);\n    const reviewsLoading = ref(false);\n    const quantity = ref(1);\n    const isAddingToCart = ref(false); // 加载状态\n\n    // 从API获取商品详情\n    const fetchProductDetail = async id => {\n      if (!id) {\n        ElMessage.error('无效的商品ID');\n        return;\n      }\n      try {\n        const response = await axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`);\n        const apiData = response.data;\n\n        // 转换API数据结构以适应前端需求\n        product.value = {\n          id: apiData.productId,\n          name: apiData.productName,\n          price: apiData.price,\n          description: apiData.description,\n          // 确保images是数组，如果为null则转换为空数组\n          images: apiData.images || []\n        };\n      } catch (error) {\n        ElMessage.error('商品加载失败');\n        console.error('商品加载错误:', error);\n      }\n    };\n\n    // 新增：获取商品评价\n    const fetchProductReviews = async productId => {\n      if (!productId) return;\n      reviewsLoading.value = true;\n      try {\n        const response = await axios.get(`http://algorineko.top:8080/api/customer/review/product/${productId}`);\n        reviews.value = response.data || [];\n      } catch (error) {\n        console.error('获取评价失败:', error);\n        ElMessage.error('评价加载失败');\n      } finally {\n        reviewsLoading.value = false;\n      }\n    };\n    onMounted(() => {\n      const productId = route.params.id;\n      if (productId) {\n        fetchProductDetail(productId);\n        fetchProductReviews(productId); // 同时获取评价数据\n      }\n    });\n\n    // 从JWT token解析payload\n    const addToCart = async () => {\n      isAddingToCart.value = true; // 开始加载\n\n      try {\n        await cartStore.addItemToCart({\n          id: product.value.id,\n          productName: product.value.name,\n          price: product.value.price,\n          quantity: quantity.value,\n          image: product.value.images?.[0] || ''\n        });\n        // 新增：添加成功后刷新购物车数据\n        await cartStore.fetchCart();\n        ElMessage.success('已加入购物车');\n      } catch (error) {\n        // 处理错误\n        console.error('加入购物车失败:', error);\n        const errorMsg = error.message || '加入购物车失败';\n        ElMessage.error(errorMsg);\n\n        // 处理未登录情况\n        if (error.response?.status === 401) {\n          router.push('/login');\n        }\n      } finally {\n        isAddingToCart.value = false; // 结束加载\n      }\n    };\n    const __returned__ = {\n      route,\n      router,\n      cartStore,\n      product,\n      reviews,\n      reviewsLoading,\n      quantity,\n      isAddingToCart,\n      fetchProductDetail,\n      fetchProductReviews,\n      addToCart,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get useCartStore() {\n        return useCartStore;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","useRouter","ElMessage","useCartStore","axios","route","router","cartStore","product","id","name","price","images","description","reviews","reviewsLoading","quantity","isAddingToCart","fetchProductDetail","error","response","get","apiData","data","value","productId","productName","console","fetchProductReviews","params","addToCart","addItemToCart","image","fetchCart","success","errorMsg","message","status","push"],"sources":["E:/实验例子/project/src/views/Buyer/ProductDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-detail\">\r\n    <el-button type=\"text\" @click=\"$router.go(-1)\">返回</el-button>\r\n    \r\n    <div class=\"detail-content\">\r\n      <el-carousel :interval=\"4000\" height=\"400px\" v-if=\"product.images?.length > 0\">\r\n        <el-carousel-item \r\n          v-for=\"(img, index) in product.images\" \r\n          :key=\"index\"\r\n          style=\"height: 400px;\"\r\n        >\r\n          <el-image \r\n            :src=\"img\" \r\n            fit=\"cover\" \r\n            style=\"width: 100%; height: 100%;\"\r\n          />\r\n        </el-carousel-item>\r\n      </el-carousel>\r\n      \r\n      <!-- 无图片提示 -->\r\n      <div v-else class=\"no-images\">\r\n        <el-empty description=\"暂无商品图片\" />\r\n      </div>\r\n\r\n      <div class=\"product-info\">\r\n        <h1>{{ product.name }}</h1>\r\n        <p class=\"price\">¥{{ product.price }}</p>\r\n        \r\n        <div class=\"action-group\">\r\n          <el-input-number \r\n            v-model=\"quantity\" \r\n            :min=\"1\"\r\n          />\r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"addToCart\"\r\n            :loading=\"isAddingToCart\"\r\n          >\r\n            加入购物车\r\n          </el-button>\r\n        </div>\r\n\r\n        <el-divider />\r\n        <div class=\"description\">\r\n          <h3>商品详情</h3>\r\n          <p>{{ product.description || '暂无详情描述' }}</p>\r\n        </div>\r\n        \r\n        <!-- 商品评价区域 -->\r\n        <el-divider />\r\n        <div class=\"reviews-section\">\r\n          <h3>商品评价</h3>\r\n          \r\n          <div v-if=\"reviewsLoading\" class=\"reviews-loading\">\r\n            <el-skeleton :rows=\"3\" animated />\r\n          </div>\r\n          \r\n          <div v-else>\r\n            <div v-if=\"reviews.length === 0\" class=\"no-reviews\">\r\n              <el-empty description=\"暂无评价\" />\r\n            </div>\r\n            \r\n            <div v-else class=\"review-list\">\r\n              <div v-for=\"review in reviews\" :key=\"review.reviewId\" class=\"review-item\">\r\n                <div class=\"review-header\">\r\n                  <el-rate \r\n                    v-model=\"review.rating\" \r\n                    disabled \r\n                    show-score \r\n                    text-color=\"#ff9900\" \r\n                    score-template=\"{value} 分\"\r\n                  />\r\n                  <span class=\"customer-id\">用户ID: {{ review.customerId }}</span>\r\n                </div>\r\n                <div class=\"review-content\">\r\n                  <p>{{ review.comment }}</p>\r\n                </div>\r\n                <el-divider class=\"review-divider\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\nimport { useCartStore } from '@/stores/cart'\r\nimport axios from 'axios'\r\n\r\nconst route = useRoute()\r\nconst router = useRouter()\r\nconst cartStore = useCartStore()\r\n\r\nconst product = ref({\r\n  id: '',\r\n  name: '',\r\n  price: 0,\r\n  images: [],\r\n  description: ''\r\n})\r\n\r\n// 新增评价相关变量\r\nconst reviews = ref([])\r\nconst reviewsLoading = ref(false)\r\n\r\nconst quantity = ref(1)\r\nconst isAddingToCart = ref(false) // 加载状态\r\n\r\n// 从API获取商品详情\r\nconst fetchProductDetail = async (id) => {\r\n  if (!id) {\r\n    ElMessage.error('无效的商品ID')\r\n    return\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/merchant/product/detail/${id}`\r\n    )\r\n    \r\n    const apiData = response.data\r\n    \r\n    // 转换API数据结构以适应前端需求\r\n    product.value = {\r\n      id: apiData.productId,\r\n      name: apiData.productName,\r\n      price: apiData.price,\r\n      description: apiData.description,\r\n      // 确保images是数组，如果为null则转换为空数组\r\n      images: apiData.images || []\r\n    }\r\n    \r\n  } catch (error) {\r\n    ElMessage.error('商品加载失败')\r\n    console.error('商品加载错误:', error)\r\n  }\r\n}\r\n\r\n// 新增：获取商品评价\r\nconst fetchProductReviews = async (productId) => {\r\n  if (!productId) return\r\n  \r\n  reviewsLoading.value = true\r\n  try {\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/customer/review/product/${productId}`\r\n    )\r\n    reviews.value = response.data || []\r\n  } catch (error) {\r\n    console.error('获取评价失败:', error)\r\n    ElMessage.error('评价加载失败')\r\n  } finally {\r\n    reviewsLoading.value = false\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  const productId = route.params.id\r\n  if (productId) {\r\n    fetchProductDetail(productId)\r\n    fetchProductReviews(productId) // 同时获取评价数据\r\n  }\r\n})\r\n\r\n// 从JWT token解析payload\r\nconst addToCart = async () => {\r\n  isAddingToCart.value = true // 开始加载\r\n  \r\n  try {\r\n    await cartStore.addItemToCart({\r\n      id: product.value.id,\r\n      productName: product.value.name,\r\n      price: product.value.price,\r\n      quantity: quantity.value,\r\n      image: product.value.images?.[0] || ''\r\n    })\r\n     // 新增：添加成功后刷新购物车数据\r\n    await cartStore.fetchCart()\r\n    \r\n    ElMessage.success('已加入购物车')\r\n  } catch (error) {\r\n    // 处理错误\r\n    console.error('加入购物车失败:', error)\r\n    const errorMsg = error.message || '加入购物车失败'\r\n    ElMessage.error(errorMsg)\r\n    \r\n    // 处理未登录情况\r\n    if (error.response?.status === 401) {\r\n      router.push('/login')\r\n    }\r\n  } finally {\r\n    isAddingToCart.value = false // 结束加载\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.product-detail {\r\n  padding: 20px;\r\n}\r\n\r\n.detail-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 40px;\r\n}\r\n\r\n.action-group {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  gap: 20px;\r\n  align-items: center;\r\n}\r\n\r\n.description {\r\n  margin-top: 30px;\r\n}\r\n\r\n.price {\r\n  font-size: 24px;\r\n  color: #f56c6c;\r\n  font-weight: bold;\r\n}\r\n\r\n.no-images {\r\n  height: 400px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #f5f7fa;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 新增评价区域样式 */\r\n.reviews-section {\r\n  margin-top: 30px;\r\n}\r\n\r\n.review-list {\r\n  margin-top: 20px;\r\n}\r\n\r\n.review-item {\r\n  padding: 15px 0;\r\n}\r\n\r\n.review-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.customer-id {\r\n  font-size: 14px;\r\n  color: #909399;\r\n}\r\n\r\n.review-content {\r\n  font-size: 15px;\r\n  line-height: 1.6;\r\n  color: #606266;\r\n}\r\n\r\n.review-divider {\r\n  margin: 15px 0;\r\n}\r\n\r\n.no-reviews {\r\n  padding: 40px 0;\r\n}\r\n\r\n.reviews-loading {\r\n  padding: 20px 0;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .detail-content {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .review-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 10px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}