{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n// stores/cart.js\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\n\n// 解析JWT token的辅助函数\nconst parseJwt = token => {\n  try {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (e) {\n    console.error('Token解析失败:', e);\n    return null;\n  }\n};\nexport const useCartStore = defineStore('cart', () => {\n  const items = ref([]);\n  const selectedItems = ref(new Set());\n  const loading = ref(false);\n  const error = ref(null);\n\n  // 添加商品（本地方法）\n  const addItem = item => {\n    const existing = items.value.find(i => i.id === item.id);\n    if (existing) {\n      existing.quantity += Number(item.quantity) || 1;\n    } else {\n      items.value.push({\n        id: item.id,\n        name: item.name || '未知商品',\n        price: Number(item.price) || 0,\n        quantity: Math.max(1, Number(item.quantity) || 1),\n        image: item.image || '/placeholder-product.jpg'\n      });\n    }\n    persistCart();\n  };\n\n  // 新增：API方式添加商品到购物车\n  const addItemToCart = async item => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('请先登录后再添加商品到购物车');\n    }\n\n    // 从token解析用户信息\n    const payload = parseJwt(token);\n    if (!payload || !payload.customerId) {\n      throw new Error('用户信息不完整，请重新登录');\n    }\n\n    // 构造请求数据\n    const requestData = {\n      customerId: Number(payload.customerId),\n      productId: Number(item.id),\n      // 注意这里改为 item.id\n      quantity: Number(item.quantity),\n      selectedOptions: \"\"\n    };\n    try {\n      // 调用后端加入购物车API\n      const response = await axios.post('http://algorineko.top:8080/api/customer/cart/add', requestData, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      // 更新本地购物车状态\n      addItem({\n        id: item.id,\n        // 使用 item.id\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity,\n        image: item.image\n      });\n      return response.data;\n    } catch (error) {\n      let errorMsg = '加入购物车失败';\n      if (error.response) {\n        if (error.response.status === 400) {\n          errorMsg = error.response.data?.message || '请求参数错误';\n        } else if (error.response.status === 401) {\n          errorMsg = '身份验证失败，请重新登录';\n        } else if (error.response.status === 500) {\n          errorMsg = error.response.data?.message || '服务器内部错误';\n        } else {\n          errorMsg = error.response.data?.message || '未知错误';\n        }\n      } else {\n        errorMsg = error.message || '网络错误，请检查连接';\n      }\n      throw new Error(errorMsg);\n    }\n  };\n\n  // 从后端获取购物车数据\n  const fetchCart = async () => {\n    loading.value = true;\n    error.value = null;\n    try {\n      const token = localStorage.getItem('token');\n      console.log('token:', token);\n      if (!token) throw new Error('用户未登录');\n      const response = await axios.get('http://algorineko.top:8080/api/customer/cart/get', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 映射后端数据结构到前端格式\n      items.value = response.data.map(item => ({\n        id: item.productId,\n        cartItemId: item.cartItemId,\n        name: item.product?.name || '未知商品',\n        price: Number(item.product?.price) || 0,\n        quantity: Math.max(1, Number(item.quantity) || 1),\n        image: item.product?.image || '/placeholder-product.jpg'\n      }));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('获取购物车失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 更新购物车项数量\n  const updateQuantity = async (cartItemId, quantity) => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.put(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, {\n        cartItemId,\n        quantity,\n        selectedOptions: \"\" // 根据实际需求调整\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // 更新本地状态\n      const item = items.value.find(i => i.cartItemId === cartItemId);\n      if (item) {\n        item.quantity = quantity;\n      }\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('更新购物车项失败:', err);\n      // 重新获取最新数据\n      await fetchCart();\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 移除商品\n  const removeItem = async cartItemId => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.delete(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 更新本地状态\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId);\n      selectedItems.value.delete(cartItemId);\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 批量移除商品\n  const removeItems = async cartItemIds => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n\n      // 并行删除所有选中项\n      await Promise.all(cartItemIds.map(id => axios.delete(`http://algorineko.top:8080/api/customer/cart/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })));\n\n      // 更新本地状态\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId));\n      cartItemIds.forEach(id => selectedItems.value.delete(id));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('批量删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 总价计算\n  const totalPrice = computed(() => items.value.reduce((sum, item) => {\n    const price = Number(item.price) || 0;\n    const quantity = Number(item.quantity) || 1;\n    return sum + price * quantity;\n  }, 0));\n\n  // 选中商品总价\n  const selectedTotalPrice = computed(() => items.value.reduce((sum, item) => {\n    if (selectedItems.value.has(item.cartItemId)) {\n      const price = Number(item.price) || 0;\n      const quantity = Number(item.quantity) || 1;\n      return sum + price * quantity;\n    }\n    return sum;\n  }, 0));\n\n  // 选中的商品列表\n  const selectedItemsList = computed(() => items.value.filter(item => selectedItems.value.has(item.cartItemId)));\n  const toggleSelection = cartItemId => {\n    if (selectedItems.value.has(cartItemId)) {\n      selectedItems.value.delete(cartItemId);\n    } else {\n      selectedItems.value.add(cartItemId);\n    }\n  };\n\n  // 全选/取消全选\n  const toggleSelectAll = () => {\n    if (selectedItems.value.size === items.value.length) {\n      selectedItems.value.clear();\n    } else {\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId));\n    }\n  };\n  const clearSelected = () => selectedItems.value.clear();\n  return {\n    items: computed(() => items.value),\n    totalPrice,\n    selectedTotalPrice,\n    selectedItems: computed(() => selectedItems.value),\n    selectedItemsList,\n    loading: computed(() => loading.value),\n    error: computed(() => error.value),\n    fetchCart,\n    updateQuantity,\n    addItemToCart,\n    // 新增导出\n    removeItem,\n    removeItems,\n    toggleSelection,\n    toggleSelectAll,\n    clearSelected\n  };\n});","map":{"version":3,"names":["defineStore","ref","computed","axios","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","useCartStore","items","selectedItems","Set","loading","addItem","item","existing","value","find","i","id","quantity","Number","push","name","price","Math","max","image","persistCart","addItemToCart","localStorage","getItem","Error","payload","customerId","requestData","productId","selectedOptions","response","post","headers","data","errorMsg","status","message","fetchCart","log","get","Authorization","cartItemId","product","err","updateQuantity","put","removeItem","delete","filter","removeItems","cartItemIds","Promise","all","includes","forEach","totalPrice","reduce","sum","selectedTotalPrice","has","selectedItemsList","toggleSelection","add","toggleSelectAll","size","length","clear","clearSelected"],"sources":["E:/实验例子/project/src/stores/cart.js"],"sourcesContent":["// stores/cart.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\n// 解析JWT token的辅助函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\nexport const useCartStore = defineStore('cart', () => {\r\n  const items = ref([])\r\n  const selectedItems = ref(new Set())\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n  \r\n // 添加商品（本地方法）\r\n const addItem = (item) => {\r\n  const existing = items.value.find(i => i.id === item.id)\r\n  if (existing) {\r\n    existing.quantity += Number(item.quantity) || 1\r\n  } else {\r\n    items.value.push({\r\n      id: item.id,\r\n      name: item.name || '未知商品',\r\n      price: Number(item.price) || 0,\r\n      quantity: Math.max(1, Number(item.quantity) || 1),\r\n      image: item.image || '/placeholder-product.jpg'\r\n    })\r\n  }\r\n  persistCart()\r\n}\r\n\r\n// 新增：API方式添加商品到购物车\r\nconst addItemToCart = async (item) => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    throw new Error('请先登录后再添加商品到购物车')\r\n  }\r\n  \r\n  // 从token解析用户信息\r\n  const payload = parseJwt(token)\r\n  if (!payload || !payload.customerId) {\r\n    throw new Error('用户信息不完整，请重新登录')\r\n  }\r\n  \r\n  // 构造请求数据\r\n  const requestData = {\r\n    customerId: Number(payload.customerId),\r\n    productId: Number(item.id),  // 注意这里改为 item.id\r\n    quantity: Number(item.quantity),\r\n    selectedOptions: \"\"\r\n  }\r\n  \r\n  try {\r\n    // 调用后端加入购物车API\r\n    const response = await axios.post(\r\n      'http://algorineko.top:8080/api/customer/cart/add', \r\n      requestData,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 更新本地购物车状态\r\n    addItem({\r\n      id: item.id,  // 使用 item.id\r\n      name: item.name,\r\n      price: item.price,\r\n      quantity: item.quantity,\r\n      image: item.image\r\n    })\r\n    \r\n    return response.data\r\n  } catch (error) {\r\n    let errorMsg = '加入购物车失败'\r\n    \r\n    if (error.response) {\r\n      if (error.response.status === 400) {\r\n        errorMsg = error.response.data?.message || '请求参数错误'\r\n      } else if (error.response.status === 401) {\r\n        errorMsg = '身份验证失败，请重新登录'\r\n      } else if (error.response.status === 500) {\r\n        errorMsg = error.response.data?.message || '服务器内部错误'\r\n      } else {\r\n        errorMsg = error.response.data?.message || '未知错误'\r\n      }\r\n    } else {\r\n      errorMsg = error.message || '网络错误，请检查连接'\r\n    }\r\n    \r\n    throw new Error(errorMsg)\r\n  }\r\n}\r\n \r\n  // 从后端获取购物车数据\r\n  const fetchCart = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    try {\r\n  \r\n      const token = localStorage.getItem('token')\r\n      console.log('token:', token)\r\n      if (!token) throw new Error('用户未登录')\r\n   \r\n      const response = await axios.get(\r\n        'http://algorineko.top:8080/api/customer/cart/get',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 映射后端数据结构到前端格式\r\n      items.value = response.data.map(item => ({\r\n        id: item.productId,\r\n        cartItemId: item.cartItemId,\r\n        name: item.product?.name || '未知商品',\r\n        price: Number(item.product?.price) || 0,\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.product?.image || '/placeholder-product.jpg'\r\n      }))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('获取购物车失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新购物车项数量\r\n  const updateQuantity = async (cartItemId, quantity) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.put(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          cartItemId,\r\n          quantity,\r\n          selectedOptions: \"\" // 根据实际需求调整\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      const item = items.value.find(i => i.cartItemId === cartItemId)\r\n      if (item) {\r\n        item.quantity = quantity\r\n      }\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('更新购物车项失败:', err)\r\n      // 重新获取最新数据\r\n      await fetchCart()\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 移除商品\r\n  const removeItem = async (cartItemId) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.delete(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId)\r\n      selectedItems.value.delete(cartItemId)\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 批量移除商品\r\n  const removeItems = async (cartItemIds) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 并行删除所有选中项\r\n      await Promise.all(\r\n        cartItemIds.map(id => \r\n          axios.delete(\r\n            `http://algorineko.top:8080/api/customer/cart/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }\r\n          )\r\n        )\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId))\r\n      cartItemIds.forEach(id => selectedItems.value.delete(id))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('批量删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 总价计算\r\n  const totalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      const price = Number(item.price) || 0\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中商品总价\r\n  const selectedTotalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      if (selectedItems.value.has(item.cartItemId)) {\r\n        const price = Number(item.price) || 0\r\n        const quantity = Number(item.quantity) || 1\r\n        return sum + (price * quantity)\r\n      }\r\n      return sum\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中的商品列表\r\n  const selectedItemsList = computed(() => \r\n    items.value.filter(item => selectedItems.value.has(item.cartItemId))\r\n  )\r\n\r\n  const toggleSelection = (cartItemId) => {\r\n    if (selectedItems.value.has(cartItemId)) {\r\n      selectedItems.value.delete(cartItemId)\r\n    } else {\r\n      selectedItems.value.add(cartItemId)\r\n    }\r\n  }\r\n  \r\n  // 全选/取消全选\r\n  const toggleSelectAll = () => {\r\n    if (selectedItems.value.size === items.value.length) {\r\n      selectedItems.value.clear()\r\n    } else {\r\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId))\r\n    }\r\n  }\r\n\r\n  const clearSelected = () => selectedItems.value.clear()\r\n\r\n  return {\r\n    items: computed(() => items.value),\r\n    totalPrice,\r\n    selectedTotalPrice,\r\n    selectedItems: computed(() => selectedItems.value),\r\n    selectedItemsList,\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    fetchCart,\r\n    updateQuantity,\r\n    addItemToCart ,// 新增导出\r\n    removeItem,\r\n    removeItems,\r\n    toggleSelection,\r\n    toggleSelectAll,\r\n    clearSelected\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}