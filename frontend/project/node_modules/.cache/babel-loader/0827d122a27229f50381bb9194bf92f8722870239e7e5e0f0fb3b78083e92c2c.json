{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ElMessage } from 'element-plus';\nimport { useCartStore } from '@/stores/cart';\nimport { storeToRefs } from 'pinia';\nimport { computed } from 'vue';\nexport default {\n  __name: 'ShoppingCart',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const cartStore = useCartStore();\n\n    // 使用 storeToRefs 只解构响应式属性\n    const {\n      items: cartItems,\n      selectedItems,\n      selectedTotalPrice,\n      selectedItemsList\n    } = storeToRefs(cartStore);\n\n    // 计算是否全选\n    const allSelected = computed(() => {\n      return selectedItems.value.size === cartItems.value.length && cartItems.value.length > 0;\n    });\n\n    // 处理全选/取消全选\n    const handleToggleSelectAll = () => {\n      cartStore.toggleSelectAll();\n    };\n\n    // 处理单个选择项切换\n    const handleToggleSelection = id => {\n      cartStore.toggleSelection(id);\n    };\n    const updateQuantity = item => {\n      if (!item?.id) {\n        ElMessage.error('无效的商品数据');\n        return;\n      }\n      if (item.quantity < 1) {\n        cartStore.removeItem(item.id);\n        ElMessage.warning('商品已移除');\n      }\n    };\n    const removeItem = itemId => {\n      if (!itemId) {\n        ElMessage.error('无效操作');\n        return;\n      }\n      cartStore.removeItem(itemId);\n      ElMessage.success('已移除商品');\n    };\n\n    // 删除选中的商品\n    const removeSelectedItems = () => {\n      const selectedIds = [...selectedItems.value];\n      cartStore.removeItems(selectedIds);\n      ElMessage.success(`已删除 ${selectedIds.length} 件商品`);\n    };\n\n    // 结算功能\n    const checkout = () => {\n      if (selectedItems.value.size === 0) {\n        ElMessage.warning('请选择要结算的商品');\n        return;\n      }\n\n      // 生成订单\n      const orders = JSON.parse(localStorage.getItem('orders') || '[]');\n\n      // 获取下一个订单ID\n      let nextOrderId = 1;\n      if (orders.length > 0) {\n        const maxId = Math.max(...orders.map(order => order.orderId));\n        nextOrderId = maxId + 1;\n      }\n\n      // 创建新订单\n      const newOrder = {\n        orderId: nextOrderId,\n        createTime: new Date().toLocaleString(),\n        items: [...selectedItemsList.value],\n        totalAmount: selectedTotalPrice.value,\n        status: 'pending',\n        // 待付款\n        reviewed: false,\n        isPaid: false\n      };\n\n      // 保存订单\n      orders.push(newOrder);\n      localStorage.setItem('orders', JSON.stringify(orders));\n\n      // 从购物车移除已结算商品\n      const selectedIds = [...selectedItems.value];\n      cartStore.removeItems(selectedIds);\n      ElMessage.success(`订单 #${nextOrderId} 创建成功！`);\n\n      // 跳转到订单页面\n      // 在实际项目中，这里应该跳转到订单确认页面\n      // router.push(`/buyer/user/orders`)\n    };\n    const __returned__ = {\n      cartStore,\n      cartItems,\n      selectedItems,\n      selectedTotalPrice,\n      selectedItemsList,\n      allSelected,\n      handleToggleSelectAll,\n      handleToggleSelection,\n      updateQuantity,\n      removeItem,\n      removeSelectedItems,\n      checkout,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get useCartStore() {\n        return useCartStore;\n      },\n      get storeToRefs() {\n        return storeToRefs;\n      },\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ElMessage","useCartStore","storeToRefs","computed","cartStore","items","cartItems","selectedItems","selectedTotalPrice","selectedItemsList","allSelected","value","size","length","handleToggleSelectAll","toggleSelectAll","handleToggleSelection","id","toggleSelection","updateQuantity","item","error","quantity","removeItem","warning","itemId","success","removeSelectedItems","selectedIds","removeItems","checkout","orders","JSON","parse","localStorage","getItem","nextOrderId","maxId","Math","max","map","order","orderId","newOrder","createTime","Date","toLocaleString","totalAmount","status","reviewed","isPaid","push","setItem","stringify"],"sources":["E:/实验例子/project/src/components/ShoppingCart.vue"],"sourcesContent":["<template>\r\n  <div class=\"shopping-cart\">\r\n    <h2>购物车 ({{ cartItems?.length || 0 }})</h2>\r\n    \r\n    <div class=\"cart-actions\" v-if=\"cartItems?.length > 0\">\r\n      <el-checkbox \r\n        :model-value=\"allSelected\"\r\n        @change=\"handleToggleSelectAll\"\r\n      >\r\n        全选\r\n      </el-checkbox>\r\n      <el-button \r\n        type=\"danger\" \r\n        size=\"small\"\r\n        :disabled=\"selectedItems.size === 0\"\r\n        @click=\"removeSelectedItems\"\r\n      >\r\n        删除选中\r\n      </el-button>\r\n    </div>\r\n    \r\n    <el-table \r\n      :data=\"cartItems\"\r\n      v-if=\"cartItems?.length > 0\"\r\n      border\r\n      style=\"width: 100%\"\r\n    >\r\n      <!-- 选择列 -->\r\n      <el-table-column width=\"50\" align=\"center\">\r\n        <template #header>\r\n          <el-checkbox \r\n            :model-value=\"allSelected\"\r\n            @change=\"handleToggleSelectAll\" \r\n          />\r\n        </template>\r\n        <template #default=\"{ row }\">\r\n          <el-checkbox \r\n            :model-value=\"selectedItems.has(row.id)\" \r\n            @change=\"handleToggleSelection(row.id)\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 商品列 -->\r\n      <el-table-column label=\"商品\" width=\"300\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-info\" v-if=\"row\">\r\n            <router-link :to=\"`/buyer/product/${row.id}`\">\r\n              <el-image \r\n                :src=\"row.image || '/placeholder-product.jpg'\"\r\n                width=\"80\"\r\n                style=\"cursor: pointer\"\r\n              />\r\n            </router-link>\r\n            <router-link \r\n              :to=\"`/buyer/product/${row.id}`\"\r\n              class=\"product-link\"\r\n            >\r\n              {{ row.name || '未知商品' }}\r\n            </router-link>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <!-- 单价列 -->\r\n      <el-table-column label=\"单价\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ (row.price || 0).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <!-- 数量列 -->\r\n      <el-table-column label=\"数量\" width=\"150\">\r\n        <template #default=\"{ row }\">\r\n          <el-input-number \r\n            v-model=\"row.quantity\"\r\n            :min=\"1\"\r\n            :max=\"99\"\r\n            @change=\"updateQuantity(row)\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <!-- 小计列 -->\r\n      <el-table-column label=\"小计\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ ((row.price || 0) * (row.quantity || 1)).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 操作列 -->\r\n      <el-table-column label=\"操作\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          <el-button \r\n            type=\"danger\" \r\n            @click=\"removeItem(row?.id)\"\r\n          >\r\n            删除\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 空购物车提示 -->\r\n    <el-empty\r\n      v-else\r\n      description=\"您的购物车还是空的，快去选购商品吧！\"\r\n      class=\"empty-tip\"\r\n    />\r\n\r\n    <!-- 结算区域 -->\r\n    <div class=\"checkout\" v-if=\"cartItems?.length > 0\">\r\n      <div class=\"selected-info\">\r\n        已选 <span class=\"highlight\">{{ selectedItems.size }}</span> 件商品\r\n      </div>\r\n      <div class=\"total\">\r\n        合计：<span class=\"highlight\">¥{{ (selectedTotalPrice || 0).toFixed(2) }}</span>\r\n      </div>\r\n      <el-button \r\n        type=\"primary\" \r\n        size=\"large\"\r\n        :disabled=\"selectedItems.size === 0\"\r\n        @click=\"checkout\"\r\n      >\r\n        去结算\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ElMessage } from 'element-plus'\r\nimport { useCartStore } from '@/stores/cart'\r\nimport { storeToRefs } from 'pinia'\r\nimport { computed } from 'vue'\r\n\r\nconst cartStore = useCartStore()\r\n\r\n// 使用 storeToRefs 只解构响应式属性\r\nconst { \r\n  items: cartItems, \r\n  selectedItems,\r\n  selectedTotalPrice,\r\n  selectedItemsList\r\n} = storeToRefs(cartStore)\r\n\r\n// 计算是否全选\r\nconst allSelected = computed(() => {\r\n  return selectedItems.value.size === cartItems.value.length && cartItems.value.length > 0\r\n})\r\n\r\n// 处理全选/取消全选\r\nconst handleToggleSelectAll = () => {\r\n  cartStore.toggleSelectAll()\r\n}\r\n\r\n// 处理单个选择项切换\r\nconst handleToggleSelection = (id) => {\r\n  cartStore.toggleSelection(id)\r\n}\r\n\r\nconst updateQuantity = (item) => {\r\n  if (!item?.id) {\r\n    ElMessage.error('无效的商品数据')\r\n    return\r\n  }\r\n  if (item.quantity < 1) {\r\n    cartStore.removeItem(item.id)\r\n    ElMessage.warning('商品已移除')\r\n  }\r\n}\r\n\r\nconst removeItem = (itemId) => {\r\n  if (!itemId) {\r\n    ElMessage.error('无效操作')\r\n    return\r\n  }\r\n  cartStore.removeItem(itemId)\r\n  ElMessage.success('已移除商品')\r\n}\r\n\r\n// 删除选中的商品\r\nconst removeSelectedItems = () => {\r\n  const selectedIds = [...selectedItems.value]\r\n  cartStore.removeItems(selectedIds)\r\n  ElMessage.success(`已删除 ${selectedIds.length} 件商品`)\r\n}\r\n\r\n// 结算功能\r\nconst checkout = () => {\r\n  if (selectedItems.value.size === 0) {\r\n    ElMessage.warning('请选择要结算的商品')\r\n    return\r\n  }\r\n  \r\n  // 生成订单\r\n  const orders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n  \r\n  // 获取下一个订单ID\r\n  let nextOrderId = 1\r\n  if (orders.length > 0) {\r\n    const maxId = Math.max(...orders.map(order => order.orderId))\r\n    nextOrderId = maxId + 1\r\n  }\r\n  \r\n  // 创建新订单\r\n  const newOrder = {\r\n    orderId: nextOrderId,\r\n    createTime: new Date().toLocaleString(),\r\n    items: [...selectedItemsList.value],\r\n    totalAmount: selectedTotalPrice.value,\r\n    status: 'pending', // 待付款\r\n    reviewed: false,\r\n    isPaid: false\r\n  }\r\n  \r\n  // 保存订单\r\n  orders.push(newOrder)\r\n  localStorage.setItem('orders', JSON.stringify(orders))\r\n  \r\n  // 从购物车移除已结算商品\r\n  const selectedIds = [...selectedItems.value]\r\n  cartStore.removeItems(selectedIds)\r\n  \r\n  ElMessage.success(`订单 #${nextOrderId} 创建成功！`)\r\n  \r\n  // 跳转到订单页面\r\n  // 在实际项目中，这里应该跳转到订单确认页面\r\n  // router.push(`/buyer/user/orders`)\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.product-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-link {\r\n  color: #606266;\r\n  text-decoration: none;\r\n  &:hover {\r\n    color: #409eff;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n.checkout {\r\n  margin-top: 30px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  gap: 30px;\r\n}\r\n\r\n.total {\r\n  font-size: 20px;\r\n  color: #f56c6c;\r\n}\r\n\r\n.empty-tip {\r\n  margin-top: 50px;\r\n  padding: 40px 0;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.cart-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n  margin-bottom: 15px;\r\n  padding: 10px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.selected-info {\r\n  font-size: 14px;\r\n  color: #606266;\r\n}\r\n\r\n.highlight {\r\n  color: #f56c6c;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}