{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://algorineko.top:8080',\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    // 添加以下CORS头\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n  }\n});\nexport default {\n  async login(credentials) {\n    try {\n      // 添加代理前缀（开发环境使用）\n      const proxyUrl = '/api';\n      const response = await apiClient.post(proxyUrl + '/user/login', {\n        username: credentials.userId,\n        password: credentials.password,\n        userType: credentials.role\n      }, {\n        // 显式设置CORS模式\n        mode: 'cors'\n      });\n      return {\n        data: {\n          token: response.data.token || 'simulated-token',\n          userId: credentials.userId,\n          role: response.data.userType || '' // 使用后端返回的角色\n        }\n      };\n    } catch (error) {\n      let errorMessage = '登录失败';\n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = '用户ID或密码错误';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        errorMessage = error.message || '登录请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async register(user) {\n    try {\n      const proxyUrl = '/api';\n      const response = await apiClient.post(proxyUrl + '/user/register', {\n        username: user.userId,\n        password: user.password,\n        phone: user.phone || '',\n        userType: user.role,\n        address: user.address || ''\n      }, {\n        // 显式设置CORS模式\n        mode: 'cors'\n      });\n      return {\n        data: {\n          message: response.data.message || '注册成功'\n        }\n      };\n    } catch (error) {\n      let errorMessage = '注册失败';\n      if (error.response) {\n        if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        errorMessage = error.message || '注册请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","login","credentials","proxyUrl","response","post","username","userId","password","userType","role","mode","data","token","error","errorMessage","status","message","request","Error","register","user","phone","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://algorineko.top:8080',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    // 添加以下CORS头\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\r\n  }\r\n})\r\n\r\nexport default {\r\n  async login(credentials) {\r\n    try {\r\n       // 添加代理前缀（开发环境使用）\r\n       const proxyUrl = '/api';\r\n       const response = await apiClient.post(proxyUrl + '/user/login', {\r\n         username: credentials.userId,\r\n         password: credentials.password,\r\n         userType: credentials.role\r\n       }, {\r\n         // 显式设置CORS模式\r\n         mode: 'cors'\r\n       })\r\n      \r\n      return {\r\n        data: {\r\n          token: response.data.token || 'simulated-token',\r\n          userId: credentials.userId,\r\n          role: response.data.userType || ''  // 使用后端返回的角色\r\n        }\r\n      }\r\n    } catch (error) {\r\n      let errorMessage = '登录失败';\r\n      if (error.response) {\r\n        if (error.response.status === 401) {\r\n          errorMessage = '用户ID或密码错误';\r\n        } else if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        errorMessage = error.message || '登录请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      const proxyUrl = '/api';\r\n      const response = await apiClient.post(proxyUrl + '/user/register', {\r\n        username: user.userId,\r\n        password: user.password,\r\n        phone: user.phone || '',\r\n        userType: user.role,\r\n        address: user.address || ''\r\n      }, {\r\n        // 显式设置CORS模式\r\n        mode: 'cors'\r\n      })\r\n      \r\n      return {\r\n        data: {\r\n          message: response.data.message || '注册成功'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      let errorMessage = '注册失败';\r\n      if (error.response) {\r\n        if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        errorMessage = error.message || '注册请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}