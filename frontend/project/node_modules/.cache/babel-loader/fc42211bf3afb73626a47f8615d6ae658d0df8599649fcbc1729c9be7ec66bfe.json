{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport authService from '../services/auth';\nexport default {\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: '',\n        role: 'customer'\n      },\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.errorMessage = '';\n      try {\n        console.log('发送登录请求:', this.loginForm);\n        const response = await authService.login(this.loginForm);\n        console.log('token:', response.token);\n        // 打印完整响应以便调试\n        console.log('完整登录响应:', response);\n\n        // 更灵活地处理响应数据\n        const responseData = response.data || {};\n\n        // 提取token和角色信息\n        const token = responseData.token || responseData.accessToken || responseData.data?.token;\n\n        // 使用用户名作为用户标识\n        const username = responseData.username || responseData.data?.username || this.loginForm.username; // 如果后端未返回，使用前端输入的值\n\n        const role = responseData.role || responseData.userType || responseData.data?.userType || this.loginForm.role; // 如果后端未返回，使用前端选择的值\n\n        // 调试输出获取的值\n        console.log('提取的登录信息:', {\n          token,\n          username,\n          role\n        });\n        if (!token) {\n          throw new Error('登录响应缺少token字段');\n        }\n        if (!username) {\n          throw new Error('无法获取用户名信息');\n        }\n\n        // 存储认证信息（使用username作为用户标识）\n        localStorage.setItem('token', token);\n        localStorage.setItem('username', username);\n        localStorage.setItem('role', role);\n\n        // 根据角色跳转到对应页面，并在路由中携带用户名\n        switch (role) {\n          case 'merchant':\n            this.$router.push(`/business/${username}`);\n            break;\n          case 'customer':\n            this.$router.push(`/buyer/${username}`);\n            break;\n          case 'admin':\n            this.$router.push('/admin');\n            break;\n          default:\n            console.warn('未知用户角色:', role);\n            alert(`未知用户角色: ${role}，将跳转到默认页面`);\n            this.$router.push('/');\n        }\n      } catch (error) {\n        console.error('登录错误详情:', error);\n        let message = '登录失败，请稍后再试';\n        if (error.response) {\n          // 服务器返回了错误响应\n          const status = error.response.status;\n          const data = error.response.data || {};\n\n          // 尝试从错误响应中获取更具体的消息\n          message = data.message || data.error || data.msg || `服务器返回错误: ${status}`;\n\n          // 添加特定状态码的默认消息\n          if (status === 400 && !message.includes('请求参数错误')) {\n            message = '请求参数错误: ' + message;\n          } else if (status === 401 && !message.includes('用户名或密码错误')) {\n            message = '认证失败: ' + message;\n          } else if (status === 403) {\n            message = '无权限访问: ' + message;\n          } else if (status === 404) {\n            message = 'API接口不存在: ' + message;\n          } else if (status >= 500) {\n            message = '服务器错误: ' + message;\n          }\n        } else if (error.request) {\n          // 请求已发送但无响应\n          message = '服务器无响应，请检查网络连接';\n        } else {\n          // 请求未发送或处理逻辑错误\n          message = error.message || '请求处理失败';\n        }\n        this.errorMessage = message;\n      }\n    },\n    goToRegister() {\n      this.$router.push('/register');\n    }\n  }\n};","map":{"version":3,"names":["authService","data","loginForm","username","password","role","errorMessage","methods","handleLogin","console","log","response","login","token","responseData","accessToken","userType","Error","localStorage","setItem","$router","push","warn","alert","error","message","status","msg","includes","request","goToRegister"],"sources":["E:\\实验例子\\project\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <h2>用户登录</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div class=\"form-group\">\r\n        <label>用户名:</label>\r\n        <input type=\"text\" v-model=\"loginForm.username\" required>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>密码:</label>\r\n        <input type=\"password\" v-model=\"loginForm.password\" required>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>身份:</label>\r\n        <select v-model=\"loginForm.role\" required>\r\n          <option value=\"customer\">顾客</option>\r\n          <option value=\"merchant\">商家</option>\r\n          <option value=\"admin\">管理员</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"button-group\">\r\n        <button type=\"submit\">登录</button>\r\n        <button type=\"button\" @click=\"goToRegister\">注册</button>\r\n      </div>\r\n      <div v-if=\"errorMessage\" class=\"error-message\">\r\n        {{ errorMessage }}\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport authService from '../services/auth'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n        role: 'customer'\r\n      },\r\n      errorMessage: ''\r\n    }\r\n  },\r\n  methods: {\r\n    async handleLogin() {\r\n      this.errorMessage = ''\r\n      \r\n      try {\r\n        console.log('发送登录请求:', this.loginForm)\r\n        const response = await authService.login(this.loginForm)\r\n        console.log('token:', response.token)\r\n        // 打印完整响应以便调试\r\n        console.log('完整登录响应:', response)\r\n        \r\n        // 更灵活地处理响应数据\r\n        const responseData = response.data || {}\r\n        \r\n        // 提取token和角色信息\r\n        const token = responseData.token || \r\n                      responseData.accessToken || \r\n                      responseData.data?.token;\r\n        \r\n        // 使用用户名作为用户标识\r\n        const username = responseData.username || \r\n                         responseData.data?.username || \r\n                         this.loginForm.username; // 如果后端未返回，使用前端输入的值\r\n        \r\n        const role = responseData.role || \r\n                     responseData.userType || \r\n                     responseData.data?.userType ||\r\n                     this.loginForm.role; // 如果后端未返回，使用前端选择的值\r\n        \r\n        // 调试输出获取的值\r\n        console.log('提取的登录信息:', { token, username, role })\r\n        \r\n        if (!token) {\r\n          throw new Error('登录响应缺少token字段')\r\n        }\r\n        \r\n        if (!username) {\r\n          throw new Error('无法获取用户名信息')\r\n        }\r\n        \r\n        // 存储认证信息（使用username作为用户标识）\r\n        localStorage.setItem('token', token)\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('role', role)\r\n\r\n        // 根据角色跳转到对应页面，并在路由中携带用户名\r\n        switch (role) {\r\n          case 'merchant':\r\n            this.$router.push(`/business/${username}`)\r\n            break\r\n          case 'customer':\r\n            this.$router.push(`/buyer/${username}`)\r\n            break\r\n          case 'admin':\r\n            this.$router.push('/admin')\r\n            break\r\n          default:\r\n            console.warn('未知用户角色:', role)\r\n            alert(`未知用户角色: ${role}，将跳转到默认页面`)\r\n            this.$router.push('/')\r\n        }\r\n      } catch (error) {\r\n        console.error('登录错误详情:', error)\r\n        \r\n        let message = '登录失败，请稍后再试'\r\n        \r\n        if (error.response) {\r\n          // 服务器返回了错误响应\r\n          const status = error.response.status\r\n          const data = error.response.data || {}\r\n          \r\n          // 尝试从错误响应中获取更具体的消息\r\n          message = data.message || \r\n                    data.error || \r\n                    data.msg || \r\n                    `服务器返回错误: ${status}`\r\n          \r\n          // 添加特定状态码的默认消息\r\n          if (status === 400 && !message.includes('请求参数错误')) {\r\n            message = '请求参数错误: ' + message\r\n          } else if (status === 401 && !message.includes('用户名或密码错误')) {\r\n            message = '认证失败: ' + message\r\n          } else if (status === 403) {\r\n            message = '无权限访问: ' + message\r\n          } else if (status === 404) {\r\n            message = 'API接口不存在: ' + message\r\n          } else if (status >= 500) {\r\n            message = '服务器错误: ' + message\r\n          }\r\n        } else if (error.request) {\r\n          // 请求已发送但无响应\r\n          message = '服务器无响应，请检查网络连接'\r\n        } else {\r\n          // 请求未发送或处理逻辑错误\r\n          message = error.message || '请求处理失败'\r\n        }\r\n        \r\n        this.errorMessage = message\r\n      }\r\n    },\r\n    goToRegister() {\r\n      this.$router.push('/register')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 样式保持不变 */\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 2rem auto;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  position: relative;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\n.button-group {\r\n  margin-top: 1.5rem;\r\n  display: flex;\r\n  gap: 1rem;\r\n}\r\n\r\nbutton {\r\n  flex: 1;\r\n  padding: 0.5rem;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.error-message {\r\n  margin-top: 1rem;\r\n  padding: 0.75rem;\r\n  background-color: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n  border-radius: 4px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}