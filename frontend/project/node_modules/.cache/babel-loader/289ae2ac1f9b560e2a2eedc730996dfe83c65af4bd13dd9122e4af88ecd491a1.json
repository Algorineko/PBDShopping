{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://47.110.160.226:8080',\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  async login(user) {\n    try {\n      const response = await apiClient.post('/user/login', {\n        username: user.userId,\n        // 映射到后端字段\n        password: user.password\n      });\n\n      // 检查响应码\n      if (response.data.code !== 200) {\n        throw new Error(response.data.message || '登录失败');\n      }\n\n      // 存储用户数据\n      const userData = response.data.data;\n      localStorage.setItem('token', userData.token || 'simulated-token');\n      localStorage.setItem('userId', userData.userId || userData.username);\n      localStorage.setItem('userName', userData.username);\n      localStorage.setItem('role', userData.userType);\n      return response;\n    } catch (error) {\n      let errorMessage = '登录失败，请重试';\n      if (error.response) {\n        errorMessage = error.response.data.message || errorMessage;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async register(user) {\n    try {\n      // 构造符合后端要求的数据结构\n      const registerData = {\n        username: user.userId,\n        // 映射到后端字段\n        password: user.password,\n        phone: user.phone,\n        userType: user.role,\n        // 映射到后端字段\n        address: user.address\n      };\n      const response = await apiClient.post('/user/register', registerData);\n\n      // 检查响应码\n      if (response.data.code !== 200) {\n        throw new Error(response.data.message || '注册失败');\n      }\n      return response;\n    } catch (error) {\n      let errorMessage = '注册失败，请重试';\n      if (error.response) {\n        // 提取后端返回的具体错误信息\n        errorMessage = error.response.data.message || errorMessage;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","login","user","response","post","username","userId","password","data","code","Error","message","userData","localStorage","setItem","token","userType","error","errorMessage","register","registerData","phone","role","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://47.110.160.226:8080',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default {\r\n  async login(user) {\r\n    try {\r\n      const response = await apiClient.post('/user/login', {\r\n        username: user.userId,  // 映射到后端字段\r\n        password: user.password\r\n      })\r\n      \r\n      // 检查响应码\r\n      if (response.data.code !== 200) {\r\n        throw new Error(response.data.message || '登录失败')\r\n      }\r\n      \r\n      // 存储用户数据\r\n      const userData = response.data.data\r\n      localStorage.setItem('token', userData.token || 'simulated-token')\r\n      localStorage.setItem('userId', userData.userId || userData.username)\r\n      localStorage.setItem('userName', userData.username)\r\n      localStorage.setItem('role', userData.userType)\r\n      \r\n      return response\r\n    } catch (error) {\r\n      let errorMessage = '登录失败，请重试'\r\n      if (error.response) {\r\n        errorMessage = error.response.data.message || errorMessage\r\n      } else if (error.message) {\r\n        errorMessage = error.message\r\n      }\r\n      throw new Error(errorMessage)\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      // 构造符合后端要求的数据结构\r\n      const registerData = {\r\n        username: user.userId,  // 映射到后端字段\r\n        password: user.password,\r\n        phone: user.phone,\r\n        userType: user.role,    // 映射到后端字段\r\n        address: user.address\r\n      }\r\n      \r\n      const response = await apiClient.post('/user/register', registerData)\r\n      \r\n      // 检查响应码\r\n      if (response.data.code !== 200) {\r\n        throw new Error(response.data.message || '注册失败')\r\n      }\r\n      \r\n      return response\r\n    } catch (error) {\r\n      let errorMessage = '注册失败，请重试'\r\n      if (error.response) {\r\n        // 提取后端返回的具体错误信息\r\n        errorMessage = error.response.data.message || errorMessage\r\n      } else if (error.message) {\r\n        errorMessage = error.message\r\n      }\r\n      throw new Error(errorMessage)\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}