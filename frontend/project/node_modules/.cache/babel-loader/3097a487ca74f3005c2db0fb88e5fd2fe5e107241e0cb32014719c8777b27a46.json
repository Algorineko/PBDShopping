{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"order-section\"\n};\nconst _hoisted_2 = {\n  class: \"filter-bar\"\n};\nconst _hoisted_3 = {\n  class: \"filter-group\"\n};\nconst _hoisted_4 = {\n  class: \"product-row\"\n};\nconst _hoisted_5 = {\n  class: \"product-details\"\n};\nconst _hoisted_6 = {\n  class: \"product-name\"\n};\nconst _hoisted_7 = {\n  class: \"product-meta\"\n};\nconst _hoisted_8 = {\n  class: \"product-price\"\n};\nconst _hoisted_9 = {\n  class: \"product-subtotal\"\n};\nconst _hoisted_10 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = _resolveComponent(\"el-option\");\n  const _component_el_select = _resolveComponent(\"el-select\");\n  const _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_image = _resolveComponent(\"el-image\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[12] || (_cache[12] = _createElementVNode(\"h2\", null, [_createElementVNode(\"i\", {\n    class: \"el-icon-tickets\"\n  }), _createTextVNode(\" 订单管理\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_select, {\n    modelValue: $setup.orderFilter.status,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.orderFilter.status = $event),\n    placeholder: \"订单状态\",\n    style: {\n      \"width\": \"150px\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_option, {\n      label: \"全部\",\n      value: \"all\"\n    }), _createVNode(_component_el_option, {\n      label: \"待付款\",\n      value: \"pending\"\n    }), _createVNode(_component_el_option, {\n      label: \"已付款\",\n      value: \"paid\"\n    }), _createVNode(_component_el_option, {\n      label: \"已发货\",\n      value: \"shipped\"\n    }), _createVNode(_component_el_option, {\n      label: \"已完成\",\n      value: \"completed\"\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_date_picker, {\n    modelValue: $setup.orderFilter.dateRange,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.orderFilter.dateRange = $event),\n    type: \"daterange\",\n    \"range-separator\": \"至\",\n    \"start-placeholder\": \"开始日期\",\n    \"end-placeholder\": \"结束日期\",\n    style: {\n      \"width\": \"350px\"\n    }\n  }, null, 8 /* PROPS */, [\"modelValue\"])]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    icon: \"el-icon-search\",\n    onClick: $setup.loadOrders\n  }, {\n    default: _withCtx(() => _cache[7] || (_cache[7] = [_createTextVNode(\"搜索\")])),\n    _: 1 /* STABLE */,\n    __: [7]\n  })]), _createVNode(_component_el_table, {\n    data: $setup.flattenedOrders,\n    border: \"\",\n    style: {\n      \"width\": \"100%\"\n    },\n    class: \"data-table\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_table_column, {\n      prop: \"orderId\",\n      label: \"订单号\",\n      width: \"180\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"createTime\",\n      label: \"下单时间\",\n      width: \"180\"\n    }), _createVNode(_component_el_table_column, {\n      label: \"商品信息\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_image, {\n        src: row.item.image || '/placeholder-product.jpg',\n        style: {\n          \"width\": \"60px\",\n          \"height\": \"60px\",\n          \"border-radius\": \"4px\"\n        },\n        fit: \"cover\"\n      }, null, 8 /* PROPS */, [\"src\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(row.item.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"span\", _hoisted_8, \"¥\" + _toDisplayString((row.item.price || 0).toFixed(2)) + \" × \" + _toDisplayString(row.item.quantity || 1), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_9, \"小计: ¥\" + _toDisplayString(((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2)), 1 /* TEXT */)])])])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_table_column, {\n      label: \"金额\",\n      width: \"120\",\n      align: \"right\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [_createTextVNode(\" ¥\" + _toDisplayString(((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2)), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_table_column, {\n      label: \"状态\",\n      width: \"120\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [_createVNode(_component_el_tag, {\n        type: $setup.statusMap[row?.status]?.type || 'info'\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.statusMap[row?.status]?.text || '未知状态'), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]),\n      _: 1 /* STABLE */\n    }), _createCommentVNode(\" 操作列：增加发货按钮 \"), _createVNode(_component_el_table_column, {\n      label: \"操作\",\n      width: \"150\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [row ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createCommentVNode(\" 发货按钮：只对已付款订单显示 \"), (row.status === 'paid' || row.status === 'PAID') && row.isFirstItem ? (_openBlock(), _createBlock(_component_el_button, {\n        key: 0,\n        size: \"small\",\n        type: \"success\",\n        icon: \"el-icon-truck\",\n        onClick: $event => $setup.handleShip(row.orderId)\n      }, {\n        default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\"发货\")])),\n        _: 2 /* DYNAMIC */,\n        __: [8]\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])) : (row.status === 'shipped' || row.status === 'SHIPPED') && row.isFirstItem ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 1\n      }, [_createCommentVNode(\" 已发货状态显示 \"), _createElementVNode(\"span\", null, [_createVNode(_component_el_tag, {\n        type: \"success\"\n      }, {\n        default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"已发货\")])),\n        _: 1 /* STABLE */,\n        __: [9]\n      })])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"]), _createCommentVNode(\" 发货对话框 \"), _createVNode(_component_el_dialog, {\n    modelValue: $setup.shipDialogVisible,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $setup.shipDialogVisible = $event),\n    title: \"订单发货\",\n    width: \"500px\"\n  }, {\n    footer: _withCtx(() => [_createVNode(_component_el_button, {\n      onClick: _cache[5] || (_cache[5] = $event => $setup.shipDialogVisible = false)\n    }, {\n      default: _withCtx(() => _cache[10] || (_cache[10] = [_createTextVNode(\"取消\")])),\n      _: 1 /* STABLE */,\n      __: [10]\n    }), _createVNode(_component_el_button, {\n      type: \"primary\",\n      onClick: $setup.confirmShip\n    }, {\n      default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\"确定发货\")])),\n      _: 1 /* STABLE */,\n      __: [11]\n    })]),\n    default: _withCtx(() => [_createVNode(_component_el_form, {\n      model: $setup.shipForm,\n      \"label-width\": \"100px\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_form_item, {\n        label: \"订单号\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $setup.currentOrderId,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.currentOrderId = $event),\n          disabled: \"\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_form_item, {\n        label: \"物流公司\",\n        required: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $setup.shipForm.trackingCompany,\n          \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.shipForm.trackingCompany = $event),\n          placeholder: \"请输入物流公司名称\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_form_item, {\n        label: \"物流单号\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $setup.shipForm.trackingNumber,\n          \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.shipForm.trackingNumber = $event),\n          disabled: \"\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createTextVNode","_hoisted_2","_hoisted_3","_createVNode","_component_el_select","modelValue","$setup","orderFilter","status","_cache","$event","placeholder","style","default","_withCtx","_component_el_option","label","value","_","_component_el_date_picker","dateRange","type","_component_el_button","icon","onClick","loadOrders","__","_component_el_table","data","flattenedOrders","border","_component_el_table_column","prop","width","row","_hoisted_4","_component_el_image","src","item","image","fit","_hoisted_5","_hoisted_6","_toDisplayString","name","_hoisted_7","_hoisted_8","price","toFixed","quantity","_hoisted_9","align","_component_el_tag","statusMap","text","_createCommentVNode","_hoisted_10","isFirstItem","_createBlock","size","handleShip","orderId","_Fragment","_component_el_dialog","shipDialogVisible","title","footer","confirmShip","_component_el_form","model","shipForm","_component_el_form_item","_component_el_input","currentOrderId","disabled","required","trackingCompany","trackingNumber"],"sources":["E:\\实验例子\\project\\src\\views\\business\\OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-section\">\r\n    <h2><i class=\"el-icon-tickets\"></i> 订单管理</h2>\r\n    <div class=\"filter-bar\">\r\n      <div class=\"filter-group\">\r\n        <el-select \r\n          v-model=\"orderFilter.status\" \r\n          placeholder=\"订单状态\" \r\n          style=\"width: 150px\"\r\n        >\r\n          <el-option label=\"全部\" value=\"all\" />\r\n          <el-option label=\"待付款\" value=\"pending\" />\r\n          <el-option label=\"已付款\" value=\"paid\" />\r\n          <el-option label=\"已发货\" value=\"shipped\" />\r\n          <el-option label=\"已完成\" value=\"completed\" />\r\n        </el-select>\r\n        <el-date-picker\r\n          v-model=\"orderFilter.dateRange\"\r\n          type=\"daterange\"\r\n          range-separator=\"至\"\r\n          start-placeholder=\"开始日期\"\r\n          end-placeholder=\"结束日期\"\r\n          style=\"width: 350px\"\r\n        />\r\n      </div>\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"loadOrders\">搜索</el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"flattenedOrders\" border style=\"width: 100%\" class=\"data-table\">\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"180\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      \r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-row\">\r\n            <el-image \r\n              :src=\"row.item.image || '/placeholder-product.jpg'\"\r\n              style=\"width: 60px; height: 60px; border-radius: 4px;\"\r\n              fit=\"cover\"\r\n            />\r\n            <div class=\"product-details\">\r\n              <div class=\"product-name\">{{ row.item.name }}</div>\r\n              <div class=\"product-meta\">\r\n                <span class=\"product-price\">¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}</span>\r\n                <span class=\"product-subtotal\">小计: ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row?.status]?.type || 'info'\">\r\n            {{ statusMap[row?.status]?.text || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 操作列：增加发货按钮 -->\r\n      <el-table-column label=\"操作\" width=\"150\">\r\n        <template #default=\"{ row }\">\r\n          <div v-if=\"row\">\r\n            <!-- 发货按钮：只对已付款订单显示 -->\r\n            <el-button \r\n              v-if=\"(row.status === 'paid' || row.status === 'PAID') && row.isFirstItem\"\r\n              size=\"small\" \r\n              type=\"success\"\r\n              icon=\"el-icon-truck\"\r\n              @click=\"handleShip(row.orderId)\"\r\n            >发货</el-button>\r\n            <!-- 已发货状态显示 -->\r\n            <span v-else-if=\"(row.status === 'shipped' || row.status === 'SHIPPED') && row.isFirstItem\">\r\n              <el-tag type=\"success\">已发货</el-tag>\r\n            </span>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    \r\n    <!-- 发货对话框 -->\r\n    <el-dialog v-model=\"shipDialogVisible\" title=\"订单发货\" width=\"500px\">\r\n      <el-form :model=\"shipForm\" label-width=\"100px\">\r\n        <el-form-item label=\"订单号\">\r\n          <el-input v-model=\"currentOrderId\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流公司\" required>\r\n          <el-input v-model=\"shipForm.trackingCompany\" placeholder=\"请输入物流公司名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号\">\r\n          <el-input v-model=\"shipForm.trackingNumber\" disabled />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"shipDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmShip\">确定发货</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\nconst orderFilter = ref({ status: 'all', dateRange: [] })\r\nconst orders = ref([])\r\n\r\n// 发货相关状态\r\nconst shipDialogVisible = ref(false)\r\nconst currentOrderId = ref('')\r\nconst shipForm = ref({\r\n  trackingCompany: '',\r\n  trackingNumber: ''\r\n})\r\n\r\n// 从token解析商家ID\r\nconst getMerchantIdFromToken = () => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    ElMessage.error('用户未登录，请先登录')\r\n    return null\r\n  }\r\n  \r\n  try {\r\n    // 解析JWT Token\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    const payload = JSON.parse(jsonPayload)\r\n    return payload.merchantId || null\r\n  } catch (error) {\r\n    console.error('Token解析失败:', error)\r\n    ElMessage.error('商家信息解析失败')\r\n    return null\r\n  }\r\n}\r\n\r\n// 状态映射（支持大小写状态）\r\nconst statusMap = {\r\n  pending: { text: '待付款', type: 'warning' },\r\n  PENDING: { text: '待付款', type: 'warning' },\r\n  paid: { text: '已付款', type: 'primary' },\r\n  PAID: { text: '已付款', type: 'primary' },\r\n  shipped: { text: '已发货', type: 'success' },\r\n  SHIPPED: { text: '已发货', type: 'success' },\r\n  completed: { text: '已完成', type: 'info' },\r\n  COMPLETED: { text: '已完成', type: 'info' }\r\n}\r\n\r\n// 更新订单状态 - 使用新的发货API\r\nconst shipOrder = async (orderId, trackingCompany, trackingNumber) => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return false\r\n    }\r\n    \r\n    // 查找当前订单的所有订单项\r\n    const order = orders.value.find(o => o.orderId === orderId)\r\n    if (!order || !order.items) {\r\n      ElMessage.error('未找到订单项信息')\r\n      return false\r\n    }\r\n    \r\n\r\n    // 构建物流列表\r\n    const logisticsList = order.items.map(item => ({\r\n      orderItemId: item.id, // 订单项ID\r\n      logisticsCompany: trackingCompany,\r\n      trackingNumber: trackingNumber,\r\n      status: \"SHIPPED\" // 发货状态\r\n    }))\r\n    console.log('物流列表:', logisticsList)\r\n    console.log('item:', item)\r\n    // 调用新的发货API\r\n    const response = await axios.post(\r\n      `http://algorineko.top:8080/api/order/shipping`,\r\n      {\r\n        orderId: orderId,\r\n        logisticsList: logisticsList\r\n      },\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    return response.status === 200\r\n  } catch (error) {\r\n    console.error('发货操作失败:', error)\r\n    \r\n    let errorMessage = '发货失败'\r\n    if (error.response) {\r\n      if (error.response.status === 400) {\r\n        errorMessage = '请求参数错误'\r\n      } else if (error.response.status === 401) {\r\n        errorMessage = '未授权操作'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    return false\r\n  }\r\n}\r\n\r\n// 创建扁平化的订单数据结构（每个商品一行）\r\nconst flattenedOrders = computed(() => {\r\n  const result = []\r\n  \r\n  filteredOrders.value.forEach(order => {\r\n    order.items.forEach((item, index) => {\r\n      result.push({\r\n        ...order,\r\n        item,\r\n        isFirstItem: index === 0  // 标记是否是订单中的第一个商品\r\n      })\r\n    })\r\n  })\r\n  \r\n  return result\r\n})\r\n\r\n// 过滤订单\r\nconst filteredOrders = computed(() => {\r\n  return (orders.value || [])\r\n    .filter(o => {\r\n      // 状态筛选\r\n      const statusMatch = orderFilter.value.status === 'all' || \r\n                       o.status.toLowerCase() === orderFilter.value.status.toLowerCase()\r\n      \r\n      // 日期筛选\r\n      const dateMatch = !orderFilter.value.dateRange?.length || (\r\n        new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) &&\r\n        new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]))\r\n      \r\n      return statusMatch && dateMatch\r\n    })\r\n})\r\n\r\n// 生成递增的物流单号\r\nconst generateTrackingNumber = () => {\r\n  let lastNumber = localStorage.getItem('lastTrackingNumber') || 0\r\n  lastNumber = parseInt(lastNumber) + 1\r\n  localStorage.setItem('lastTrackingNumber', lastNumber.toString())\r\n  return lastNumber.toString().padStart(10, '0') // 生成10位数字，不足前面补0\r\n}\r\n\r\n// 发货操作 - 打开发货对话框\r\nconst handleShip = (orderId) => {\r\n  currentOrderId.value = orderId\r\n  // 生成物流单号\r\n  shipForm.value.trackingNumber = generateTrackingNumber()\r\n  shipForm.value.trackingCompany = '' // 清空物流公司\r\n  shipDialogVisible.value = true\r\n}\r\n\r\n// 确认发货\r\nconst confirmShip = async () => {\r\n  if (!shipForm.value.trackingCompany) {\r\n    ElMessage.warning('请输入物流公司')\r\n    return\r\n  }\r\n  \r\n  // 使用新的发货API\r\n  const success = await shipOrder(\r\n    currentOrderId.value,\r\n    shipForm.value.trackingCompany,\r\n    shipForm.value.trackingNumber\r\n  )\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(o => {\r\n      if (o.orderId === currentOrderId.value) {\r\n        return {\r\n          ...o,\r\n          status: 'SHIPPED', // 使用大写状态保持一致性\r\n          shipTime: new Date().toLocaleString(),\r\n          trackingCompany: shipForm.value.trackingCompany,\r\n          trackingNumber: shipForm.value.trackingNumber\r\n        }\r\n      }\r\n      return o\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success('发货成功！')\r\n    shipDialogVisible.value = false\r\n    loadOrders() // 重新加载订单\r\n  }\r\n}\r\n\r\n// 从后端加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return\r\n    }\r\n    \r\n    // 调用后端API获取订单\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/merchant/${merchantId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 转换数据结构\r\n    const backendOrders = response.data.map(order => ({\r\n      orderId: order.orderId,\r\n      merchantId: order.merchantId,\r\n      totalPrice: order.totalPrice,\r\n      status: order.status, // 保持大写状态\r\n      createTime: new Date().toLocaleString(), // 添加时间字段\r\n      items: order.items.map(item => ({\r\n        id: item.productId,\r\n        name: `商品 ${item.productId}`, // 默认商品名称（稍后会替换）\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: '/placeholder-product.jpg' // 默认图片（稍后会替换）\r\n      }))\r\n    }))\r\n\r\n    // 获取所有唯一商品ID\r\n    const productIds = [...new Set(\r\n      backendOrders.flatMap(order => \r\n        order.items.map(item => item.id)\r\n      )\r\n    )]\r\n\r\n    // 并发获取所有商品详情\r\n    const productRequests = productIds.map(id => \r\n      axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }).catch(error => {\r\n        console.error(`获取商品${id}详情失败:`, error)\r\n        return null\r\n      })\r\n    )\r\n\r\n    // 等待所有商品详情请求完成\r\n    const productResponses = await Promise.all(productRequests)\r\n    \r\n    // 构建商品信息映射表\r\n    const productMap = {}\r\n    productResponses.forEach((res, index) => {\r\n      if (res && res.data) {\r\n        const product = res.data\r\n        productMap[productIds[index]] = {\r\n          name: product.productName,\r\n          // 使用第一张图片或默认图片\r\n          image: product.images && product.images.length > 0 \r\n            ? product.images[0] \r\n            : '/placeholder-product.jpg'\r\n        }\r\n      }\r\n    })\r\n\r\n    // 更新订单中的商品信息\r\n    backendOrders.forEach(order => {\r\n      order.items.forEach(item => {\r\n        const productInfo = productMap[item.id]\r\n        if (productInfo) {\r\n          item.name = productInfo.name\r\n          item.image = productInfo.image\r\n        }\r\n      })\r\n    })\r\n\r\n    // 保存到本地存储（保持原有功能）\r\n    localStorage.setItem('orders', JSON.stringify(backendOrders))\r\n    \r\n    orders.value = backendOrders\r\n  } catch (error) {\r\n    console.error('加载订单失败:', error)\r\n    \r\n    // 更详细的错误信息\r\n    let errorMessage = '订单加载失败'\r\n    if (error.response) {\r\n      // 服务器响应了错误状态码\r\n      if (error.response.status === 401) {\r\n        errorMessage = '用户未认证，请重新登录'\r\n      } else if (error.response.status === 403) {\r\n        errorMessage = '没有权限访问订单数据'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发出但没有收到响应\r\n      errorMessage = '无法连接到服务器，请检查网络连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    orders.value = []\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  loadOrders() // 加载订单数据\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.order-section h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 25px;\r\n  color: #303133;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.order-section h2 i {\r\n  margin-right: 12px;\r\n  font-size: 24px;\r\n  color: #409eff;\r\n}\r\n\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.data-table {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\n.product-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  font-size: 14px;\r\n}\r\n\r\n.product-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.product-price {\r\n  color: #666;\r\n  font-size: 13px;\r\n}\r\n\r\n.product-subtotal {\r\n  font-weight: 600;\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}