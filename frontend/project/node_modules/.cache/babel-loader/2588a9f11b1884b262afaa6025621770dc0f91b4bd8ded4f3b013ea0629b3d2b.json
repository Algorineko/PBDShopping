{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport { createPinia } from 'pinia';\nimport ElementPlus from 'element-plus';\nimport 'element-plus/dist/index.css';\nimport axios from 'axios'; // 导入 axios\n\n// 创建Vue应用实例\nconst app = createApp(App);\n\n// 创建Pinia实例\nconst pinia = createPinia();\n\n// ================== Axios 全局配置 ==================\n// 1. 设置基础URL（可选）\naxios.defaults.baseURL = 'http://algorineko.top:8080/api';\n\n// 2. 设置默认请求头\naxios.defaults.headers.common['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Accept'] = 'application/json';\n\n// 3. 允许跨域请求携带凭据\naxios.defaults.withCredentials = true;\n\n// 4. 设置请求拦截器 - 自动添加 Token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 5. 设置响应拦截器 - 处理401未授权错误\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // 处理未授权错误（例如跳转到登录页）\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    router.push('/login');\n  }\n  return Promise.reject(error);\n});\n\n// 将 axios 添加为全局属性（可选）\napp.config.globalProperties.$axios = axios;\n\n// ================== 按顺序安装插件 ==================\napp.use(pinia);\napp.use(router);\napp.use(ElementPlus);\n\n// 最后挂载应用\napp.mount('#app');","map":{"version":3,"names":["createApp","App","router","createPinia","ElementPlus","axios","app","pinia","defaults","baseURL","headers","common","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","push","globalProperties","$axios","mount"],"sources":["E:/实验例子/project/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport { createPinia } from 'pinia'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport axios from 'axios' // 导入 axios\n\n// 创建Vue应用实例\nconst app = createApp(App)\n\n// 创建Pinia实例\nconst pinia = createPinia()\n\n// ================== Axios 全局配置 ==================\n// 1. 设置基础URL（可选）\naxios.defaults.baseURL = 'http://algorineko.top:8080/api'\n\n// 2. 设置默认请求头\naxios.defaults.headers.common['Content-Type'] = 'application/json'\naxios.defaults.headers.common['Accept'] = 'application/json'\n\n// 3. 允许跨域请求携带凭据\naxios.defaults.withCredentials = true\n\n// 4. 设置请求拦截器 - 自动添加 Token\naxios.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 5. 设置响应拦截器 - 处理401未授权错误\naxios.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response && error.response.status === 401) {\n      // 处理未授权错误（例如跳转到登录页）\n      localStorage.removeItem('token')\n      localStorage.removeItem('userInfo')\n      router.push('/login')\n    }\n    return Promise.reject(error)\n  }\n)\n\n// 将 axios 添加为全局属性（可选）\napp.config.globalProperties.$axios = axios\n\n// ================== 按顺序安装插件 ==================\napp.use(pinia)\napp.use(router)\napp.use(ElementPlus)\n\n// 最后挂载应用\napp.mount('#app')"],"mappings":";AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAO,6BAA6B;AACpC,OAAOC,KAAK,MAAM,OAAO,EAAC;;AAE1B;AACA,MAAMC,GAAG,GAAGN,SAAS,CAACC,GAAG,CAAC;;AAE1B;AACA,MAAMM,KAAK,GAAGJ,WAAW,CAAC,CAAC;;AAE3B;AACA;AACAE,KAAK,CAACG,QAAQ,CAACC,OAAO,GAAG,gCAAgC;;AAEzD;AACAJ,KAAK,CAACG,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAClEN,KAAK,CAACG,QAAQ,CAACE,OAAO,CAACC,MAAM,CAAC,QAAQ,CAAC,GAAG,kBAAkB;;AAE5D;AACAN,KAAK,CAACG,QAAQ,CAACI,eAAe,GAAG,IAAI;;AAErC;AACAP,KAAK,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACN,OAAO,CAACU,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,KAAK,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC7BS,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC;IACnCxB,MAAM,CAACyB,IAAI,CAAC,QAAQ,CAAC;EACvB;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACU,MAAM,CAACY,gBAAgB,CAACC,MAAM,GAAGxB,KAAK;;AAE1C;AACAC,GAAG,CAACS,GAAG,CAACR,KAAK,CAAC;AACdD,GAAG,CAACS,GAAG,CAACb,MAAM,CAAC;AACfI,GAAG,CAACS,GAAG,CAACX,WAAW,CAAC;;AAEpB;AACAE,GAAG,CAACwB,KAAK,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}