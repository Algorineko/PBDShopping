{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://algorineko.top:8080/api',\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\n\n// 添加请求拦截器\napiClient.interceptors.request.use(config => {\n  console.log('Sending request:', config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\napiClient.interceptors.response.use(response => {\n  console.log('Received response:', response);\n  return response;\n}, error => {\n  console.error('API error:', error);\n  return Promise.reject(error);\n});\nexport default {\n  login(user) {\n    return apiClient.post('/user/login', {\n      username: user.userId,\n      password: user.password,\n      userType: this.mapRoleToUserType(user.role) // 添加userType参数\n    });\n  },\n  register(user) {\n    return apiClient.post('/user/register', {\n      username: user.userId,\n      password: user.password,\n      phone: user.phone,\n      address: user.address,\n      userType: this.mapRoleToUserType(user.role)\n    });\n  },\n  mapRoleToUserType(role) {\n    const mapping = {\n      'merchant': 'merchant',\n      'customer': 'customer',\n      'admin': 'admin'\n    };\n    return mapping[role] || 'customer';\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","headers","Accept","interceptors","request","use","config","console","log","error","Promise","reject","response","login","user","post","username","userId","password","userType","mapRoleToUserType","role","register","phone","address","mapping"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://algorineko.top:8080/api',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\n// 添加请求拦截器\r\napiClient.interceptors.request.use(config => {\r\n  console.log('Sending request:', config)\r\n  return config\r\n}, error => {\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器\r\napiClient.interceptors.response.use(response => {\r\n  console.log('Received response:', response)\r\n  return response\r\n}, error => {\r\n  console.error('API error:', error)\r\n  return Promise.reject(error)\r\n})\r\n\r\nexport default {\r\n  login(user) {\r\n    return apiClient.post('/user/login', {\r\n      username: user.userId,\r\n      password: user.password,\r\n      userType: this.mapRoleToUserType(user.role) // 添加userType参数\r\n    })\r\n  },\r\n\r\n  register(user) {\r\n    return apiClient.post('/user/register', {\r\n      username: user.userId,\r\n      password: user.password,\r\n      phone: user.phone,\r\n      address: user.address,\r\n      userType: this.mapRoleToUserType(user.role)\r\n    })\r\n  },\r\n\r\n  mapRoleToUserType(role) {\r\n    const mapping = {\r\n      'merchant': 'merchant',\r\n      'customer': 'customer',\r\n      'admin': 'admin'\r\n    }\r\n    return mapping[role] || 'customer'\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,gCAAgC;EACzCC,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE;IACPC,MAAM,EAAE,kBAAkB;IAC1B,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAL,SAAS,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC3CC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CAAC;EACvC,OAAOA,MAAM;AACf,CAAC,EAAEG,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAZ,SAAS,CAACM,YAAY,CAACS,QAAQ,CAACP,GAAG,CAACO,QAAQ,IAAI;EAC9CL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,QAAQ,CAAC;EAC3C,OAAOA,QAAQ;AACjB,CAAC,EAAEH,KAAK,IAAI;EACVF,OAAO,CAACE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAe;EACbI,KAAKA,CAACC,IAAI,EAAE;IACV,OAAOjB,SAAS,CAACkB,IAAI,CAAC,aAAa,EAAE;MACnCC,QAAQ,EAAEF,IAAI,CAACG,MAAM;MACrBC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACN,IAAI,CAACO,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC;EACJ,CAAC;EAEDC,QAAQA,CAACR,IAAI,EAAE;IACb,OAAOjB,SAAS,CAACkB,IAAI,CAAC,gBAAgB,EAAE;MACtCC,QAAQ,EAAEF,IAAI,CAACG,MAAM;MACrBC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;MACvBK,KAAK,EAAET,IAAI,CAACS,KAAK;MACjBC,OAAO,EAAEV,IAAI,CAACU,OAAO;MACrBL,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACN,IAAI,CAACO,IAAI;IAC5C,CAAC,CAAC;EACJ,CAAC;EAEDD,iBAAiBA,CAACC,IAAI,EAAE;IACtB,MAAMI,OAAO,GAAG;MACd,UAAU,EAAE,UAAU;MACtB,UAAU,EAAE,UAAU;MACtB,OAAO,EAAE;IACX,CAAC;IACD,OAAOA,OAAO,CAACJ,IAAI,CAAC,IAAI,UAAU;EACpC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}