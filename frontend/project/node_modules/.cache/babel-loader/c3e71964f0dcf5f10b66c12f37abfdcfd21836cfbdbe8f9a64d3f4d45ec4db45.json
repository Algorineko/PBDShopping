{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"order-section\"\n};\nconst _hoisted_2 = {\n  class: \"filter-bar\"\n};\nconst _hoisted_3 = {\n  class: \"filter-group\"\n};\nconst _hoisted_4 = {\n  class: \"product-row\"\n};\nconst _hoisted_5 = {\n  class: \"product-details\"\n};\nconst _hoisted_6 = {\n  class: \"product-name\"\n};\nconst _hoisted_7 = {\n  class: \"product-meta\"\n};\nconst _hoisted_8 = {\n  class: \"product-price\"\n};\nconst _hoisted_9 = {\n  class: \"product-subtotal\"\n};\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = {\n  key: 1\n};\nconst _hoisted_12 = {\n  class: \"tracking-input\"\n};\nimport { ref, computed, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios';\nexport default {\n  __name: 'OrderManagement',\n  setup(__props) {\n    const orderFilter = ref({\n      status: 'all',\n      dateRange: []\n    });\n    const orders = ref([]);\n\n    // 发货相关状态\n    const shipDialogVisible = ref(false);\n    const currentOrderId = ref('');\n    const shipForm = ref({\n      trackingCompany: '',\n      trackingNumber: ''\n    });\n\n    // 从token解析商家ID\n    const getMerchantIdFromToken = () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        ElMessage.error('用户未登录，请先登录');\n        return null;\n      }\n      try {\n        // 解析JWT Token\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n        const payload = JSON.parse(jsonPayload);\n        return payload.merchantId || null;\n      } catch (error) {\n        console.error('Token解析失败:', error);\n        ElMessage.error('商家信息解析失败');\n        return null;\n      }\n    };\n\n    // 状态映射（支持大小写状态）\n    const statusMap = {\n      pending: {\n        text: '待付款',\n        type: 'warning'\n      },\n      PENDING: {\n        text: '待付款',\n        type: 'warning'\n      },\n      paid: {\n        text: '已付款',\n        type: 'primary'\n      },\n      PAID: {\n        text: '已付款',\n        type: 'primary'\n      },\n      shipped: {\n        text: '已发货',\n        type: 'success'\n      },\n      SHIPPED: {\n        text: '已发货',\n        type: 'success'\n      },\n      completed: {\n        text: '已完成',\n        type: 'info'\n      },\n      COMPLETED: {\n        text: '已完成',\n        type: 'info'\n      }\n    };\n\n    // 更新订单状态 - 使用新的发货API\n    const shipOrder = async (orderId, trackingCompany, trackingNumber) => {\n      try {\n        const merchantId = getMerchantIdFromToken();\n        if (!merchantId) {\n          ElMessage.error('无法获取商家信息');\n          return false;\n        }\n\n        // 查找当前订单的所有订单项\n        const order = orders.value.find(o => o.orderId === orderId);\n        if (!order || !order.items) {\n          ElMessage.error('未找到订单项信息');\n          return false;\n        }\n\n        // 构建物流列表 - 使用正确的订单项ID\n        const logisticsList = order.items.map(item => ({\n          orderItemId: item.orderItemId,\n          // 使用正确的订单项ID\n          logisticsCompany: trackingCompany,\n          trackingNumber: trackingNumber,\n          status: \"SHIPPED\" // 发货状态\n        }));\n        console.log('物流列表:', logisticsList);\n        // 调用发货API\n        const response = await axios.post(`http://algorineko.top:8080/api/order/shipping`, {\n          orderId: orderId,\n          logisticsList: logisticsList\n        }, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        return response.status === 200;\n      } catch (error) {\n        console.error('发货操作失败:', error);\n        let errorMessage = '发货失败';\n        if (error.response) {\n          if (error.response.status === 400) {\n            errorMessage = '请求参数错误';\n          } else if (error.response.status === 401) {\n            errorMessage = '未授权操作';\n          } else if (error.response.data && error.response.data.message) {\n            errorMessage = error.response.data.message;\n          }\n        }\n        ElMessage.error(errorMessage);\n        return false;\n      }\n    };\n\n    // 创建扁平化的订单数据结构（每个商品一行）\n    const flattenedOrders = computed(() => {\n      const result = [];\n      filteredOrders.value.forEach(order => {\n        order.items.forEach((item, index) => {\n          result.push({\n            ...order,\n            item,\n            isFirstItem: index === 0 // 标记是否是订单中的第一个商品\n          });\n        });\n      });\n      return result;\n    });\n\n    // 过滤订单\n    const filteredOrders = computed(() => {\n      return (orders.value || []).filter(o => {\n        // 状态筛选\n        const statusMatch = orderFilter.value.status === 'all' || o.status.toLowerCase() === orderFilter.value.status.toLowerCase();\n\n        // 日期筛选\n        const dateMatch = !orderFilter.value.dateRange?.length || new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) && new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]);\n        return statusMatch && dateMatch;\n      });\n    });\n\n    // 生成递增的物流单号\n    const generateTrackingNumber = () => {\n      let lastNumber = localStorage.getItem('lastTrackingNumber') || 0;\n      lastNumber = parseInt(lastNumber) + 1;\n      localStorage.setItem('lastTrackingNumber', lastNumber.toString());\n      return lastNumber.toString().padStart(10, '0'); // 生成10位数字，不足前面补0\n    };\n\n    // 发货操作 - 打开发货对话框\n    const handleShip = orderId => {\n      currentOrderId.value = orderId;\n      // 生成物流单号（作为默认值）\n      shipForm.value.trackingNumber = generateTrackingNumber();\n      shipForm.value.trackingCompany = ''; // 清空物流公司\n      shipDialogVisible.value = true;\n    };\n\n    // 确认发货\n    const confirmShip = async () => {\n      if (!shipForm.value.trackingCompany) {\n        ElMessage.warning('请输入物流公司');\n        return;\n      }\n      if (!shipForm.value.trackingNumber) {\n        ElMessage.warning('请输入物流单号');\n        return;\n      }\n\n      // 使用发货API\n      const success = await shipOrder(currentOrderId.value, shipForm.value.trackingCompany, shipForm.value.trackingNumber);\n      if (success) {\n        // 更新本地存储\n        const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]');\n        const updatedOrders = savedOrders.map(o => {\n          if (o.orderId === currentOrderId.value) {\n            return {\n              ...o,\n              status: 'SHIPPED',\n              // 使用大写状态保持一致性\n              shipTime: new Date().toLocaleString(),\n              trackingCompany: shipForm.value.trackingCompany,\n              trackingNumber: shipForm.value.trackingNumber\n            };\n          }\n          return o;\n        });\n        localStorage.setItem('orders', JSON.stringify(updatedOrders));\n        ElMessage.success('发货成功！');\n        shipDialogVisible.value = false;\n        loadOrders(); // 重新加载订单\n      }\n    };\n\n    // 从后端加载订单数据\n    const loadOrders = async () => {\n      try {\n        const merchantId = getMerchantIdFromToken();\n        if (!merchantId) {\n          ElMessage.error('无法获取商家信息');\n          return;\n        }\n\n        // 调用后端API获取订单\n        const response = await axios.get(`http://algorineko.top:8080/api/order/merchant/${merchantId}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n\n        // 转换数据结构 - 保留订单项ID\n        const backendOrders = response.data.map(order => ({\n          orderId: order.orderId,\n          merchantId: order.merchantId,\n          totalPrice: order.totalPrice,\n          status: order.status,\n          // 保持大写状态\n          createTime: new Date().toLocaleString(),\n          // 添加时间字段\n          items: order.items.map(item => ({\n            orderItemId: item.orderItemId,\n            // 保留订单项ID (后端返回的订单项ID)\n            productId: item.productId,\n            // 商品ID\n            name: `商品 ${item.productId}`,\n            // 默认商品名称（稍后会替换）\n            price: item.price,\n            quantity: item.quantity,\n            image: '/placeholder-product.jpg' // 默认图片（稍后会替换）\n          }))\n        }));\n        console.log('订单列表:', backendOrders);\n        // 获取所有唯一商品ID\n        const productIds = [...new Set(backendOrders.flatMap(order => order.items.map(item => item.productId) // 使用商品ID获取详情\n        ))];\n\n        // 并发获取所有商品详情\n        const productRequests = productIds.map(id => axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        }).catch(error => {\n          console.error(`获取商品${id}详情失败:`, error);\n          return null;\n        }));\n\n        // 等待所有商品详情请求完成\n        const productResponses = await Promise.all(productRequests);\n\n        // 构建商品信息映射表\n        const productMap = {};\n        productResponses.forEach((res, index) => {\n          if (res && res.data) {\n            const product = res.data;\n            productMap[productIds[index]] = {\n              name: product.productName,\n              // 使用第一张图片或默认图片\n              image: product.images && product.images.length > 0 ? product.images[0] : '/placeholder-product.jpg'\n            };\n          }\n        });\n\n        // 更新订单中的商品信息\n        backendOrders.forEach(order => {\n          order.items.forEach(item => {\n            const productInfo = productMap[item.productId]; // 使用商品ID获取详情\n            if (productInfo) {\n              item.name = productInfo.name;\n              item.image = productInfo.image;\n            }\n          });\n        });\n\n        // 保存到本地存储（保持原有功能）\n        localStorage.setItem('orders', JSON.stringify(backendOrders));\n        orders.value = backendOrders;\n      } catch (error) {\n        console.error('加载订单失败:', error);\n\n        // 更详细的错误信息\n        let errorMessage = '订单加载失败';\n        if (error.response) {\n          // 服务器响应了错误状态码\n          if (error.response.status === 401) {\n            errorMessage = '用户未认证，请重新登录';\n          } else if (error.response.status === 403) {\n            errorMessage = '没有权限访问订单数据';\n          } else if (error.response.data && error.response.data.message) {\n            errorMessage = error.response.data.message;\n          }\n        } else if (error.request) {\n          // 请求已发出但没有收到响应\n          errorMessage = '无法连接到服务器，请检查网络连接';\n        }\n        ElMessage.error(errorMessage);\n        orders.value = [];\n      }\n    };\n    onMounted(() => {\n      loadOrders(); // 加载订单数据\n    });\n    return (_ctx, _cache) => {\n      const _component_el_option = _resolveComponent(\"el-option\");\n      const _component_el_select = _resolveComponent(\"el-select\");\n      const _component_el_date_picker = _resolveComponent(\"el-date-picker\");\n      const _component_el_button = _resolveComponent(\"el-button\");\n      const _component_el_table_column = _resolveComponent(\"el-table-column\");\n      const _component_el_image = _resolveComponent(\"el-image\");\n      const _component_el_tag = _resolveComponent(\"el-tag\");\n      const _component_el_table = _resolveComponent(\"el-table\");\n      const _component_el_input = _resolveComponent(\"el-input\");\n      const _component_el_form_item = _resolveComponent(\"el-form-item\");\n      const _component_el_form = _resolveComponent(\"el-form\");\n      const _component_el_dialog = _resolveComponent(\"el-dialog\");\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[14] || (_cache[14] = _createElementVNode(\"h2\", null, [_createElementVNode(\"i\", {\n        class: \"el-icon-tickets\"\n      }), _createTextVNode(\" 订单管理\")], -1)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_el_select, {\n        modelValue: orderFilter.value.status,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => orderFilter.value.status = $event),\n        placeholder: \"订单状态\",\n        style: {\n          \"width\": \"150px\"\n        }\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_option, {\n          label: \"全部\",\n          value: \"all\"\n        }), _createVNode(_component_el_option, {\n          label: \"待付款\",\n          value: \"pending\"\n        }), _createVNode(_component_el_option, {\n          label: \"已付款\",\n          value: \"paid\"\n        }), _createVNode(_component_el_option, {\n          label: \"已发货\",\n          value: \"shipped\"\n        }), _createVNode(_component_el_option, {\n          label: \"已完成\",\n          value: \"completed\"\n        })]),\n        _: 1\n      }, 8, [\"modelValue\"]), _createVNode(_component_el_date_picker, {\n        modelValue: orderFilter.value.dateRange,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => orderFilter.value.dateRange = $event),\n        type: \"daterange\",\n        \"range-separator\": \"至\",\n        \"start-placeholder\": \"开始日期\",\n        \"end-placeholder\": \"结束日期\",\n        style: {\n          \"width\": \"350px\"\n        }\n      }, null, 8, [\"modelValue\"])]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        icon: \"el-icon-search\",\n        onClick: loadOrders\n      }, {\n        default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\"搜索\")])),\n        _: 1,\n        __: [8]\n      })]), _createVNode(_component_el_table, {\n        data: flattenedOrders.value,\n        border: \"\",\n        style: {\n          \"width\": \"100%\"\n        },\n        class: \"data-table\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          prop: \"orderId\",\n          label: \"订单号\",\n          width: \"180\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"createTime\",\n          label: \"下单时间\",\n          width: \"180\"\n        }), _createVNode(_component_el_table_column, {\n          label: \"商品信息\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_image, {\n            src: row.item.image || '/placeholder-product.jpg',\n            style: {\n              \"width\": \"60px\",\n              \"height\": \"60px\",\n              \"border-radius\": \"4px\"\n            },\n            fit: \"cover\"\n          }, null, 8, [\"src\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(row.item.name), 1), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"span\", _hoisted_8, \"¥\" + _toDisplayString((row.item.price || 0).toFixed(2)) + \" × \" + _toDisplayString(row.item.quantity || 1), 1), _createElementVNode(\"span\", _hoisted_9, \"小计: ¥\" + _toDisplayString(((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2)), 1)])])])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"金额\",\n          width: \"120\",\n          align: \"right\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createTextVNode(\" ¥\" + _toDisplayString(((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2)), 1)]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"状态\",\n          width: \"120\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_tag, {\n            type: statusMap[row?.status]?.type || 'info'\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(statusMap[row?.status]?.text || '未知状态'), 1)]),\n            _: 2\n          }, 1032, [\"type\"])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          label: \"操作\",\n          width: \"150\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [row ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [(row.status === 'paid' || row.status === 'PAID') && row.isFirstItem ? (_openBlock(), _createBlock(_component_el_button, {\n            key: 0,\n            size: \"small\",\n            type: \"success\",\n            icon: \"el-icon-truck\",\n            onClick: $event => handleShip(row.orderId)\n          }, {\n            default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"发货\")])),\n            _: 2,\n            __: [9]\n          }, 1032, [\"onClick\"])) : (row.status === 'shipped' || row.status === 'SHIPPED') && row.isFirstItem ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, [_createVNode(_component_el_tag, {\n            type: \"success\"\n          }, {\n            default: _withCtx(() => _cache[10] || (_cache[10] = [_createTextVNode(\"已发货\")])),\n            _: 1,\n            __: [10]\n          })])) : _createCommentVNode(\"\", true)])) : _createCommentVNode(\"\", true)]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"data\"]), _createVNode(_component_el_dialog, {\n        modelValue: shipDialogVisible.value,\n        \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => shipDialogVisible.value = $event),\n        title: \"订单发货\",\n        width: \"500px\"\n      }, {\n        footer: _withCtx(() => [_createVNode(_component_el_button, {\n          onClick: _cache[6] || (_cache[6] = $event => shipDialogVisible.value = false)\n        }, {\n          default: _withCtx(() => _cache[12] || (_cache[12] = [_createTextVNode(\"取消\")])),\n          _: 1,\n          __: [12]\n        }), _createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: confirmShip\n        }, {\n          default: _withCtx(() => _cache[13] || (_cache[13] = [_createTextVNode(\"确定发货\")])),\n          _: 1,\n          __: [13]\n        })]),\n        default: _withCtx(() => [_createVNode(_component_el_form, {\n          model: shipForm.value,\n          \"label-width\": \"100px\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"订单号\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: currentOrderId.value,\n              \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => currentOrderId.value = $event),\n              disabled: \"\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"物流公司\",\n            required: \"\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: shipForm.value.trackingCompany,\n              \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => shipForm.value.trackingCompany = $event),\n              placeholder: \"请输入物流公司名称\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"物流单号\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_12, [_createVNode(_component_el_input, {\n              modelValue: shipForm.value.trackingNumber,\n              \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => shipForm.value.trackingNumber = $event),\n              placeholder: \"请输入物流单号\",\n              clearable: \"\"\n            }, null, 8, [\"modelValue\"]), _createVNode(_component_el_button, {\n              type: \"primary\",\n              plain: \"\",\n              size: \"small\",\n              onClick: _cache[5] || (_cache[5] = $event => shipForm.value.trackingNumber = generateTrackingNumber())\n            }, {\n              default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\" 生成单号 \")])),\n              _: 1,\n              __: [11]\n            })])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"model\"])]),\n        _: 1\n      }, 8, [\"modelValue\"])]);\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","ElMessage","axios","orderFilter","status","dateRange","orders","shipDialogVisible","currentOrderId","shipForm","trackingCompany","trackingNumber","getMerchantIdFromToken","token","localStorage","getItem","error","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","merchantId","console","statusMap","pending","text","type","PENDING","paid","PAID","shipped","SHIPPED","completed","COMPLETED","shipOrder","orderId","order","value","find","o","items","logisticsList","item","orderItemId","logisticsCompany","log","response","post","headers","errorMessage","data","message","flattenedOrders","result","filteredOrders","forEach","index","push","isFirstItem","filter","statusMatch","toLowerCase","dateMatch","length","Date","createTime","generateTrackingNumber","lastNumber","parseInt","setItem","padStart","handleShip","confirmShip","warning","success","savedOrders","updatedOrders","shipTime","toLocaleString","stringify","loadOrders","get","backendOrders","totalPrice","productId","name","price","quantity","image","productIds","Set","flatMap","productRequests","id","catch","productResponses","Promise","all","productMap","res","product","productName","images","productInfo","request"],"sources":["E:/实验例子/project/src/views/business/OrderManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-section\">\r\n    <h2><i class=\"el-icon-tickets\"></i> 订单管理</h2>\r\n    <div class=\"filter-bar\">\r\n      <div class=\"filter-group\">\r\n        <el-select \r\n          v-model=\"orderFilter.status\" \r\n          placeholder=\"订单状态\" \r\n          style=\"width: 150px\"\r\n        >\r\n          <el-option label=\"全部\" value=\"all\" />\r\n          <el-option label=\"待付款\" value=\"pending\" />\r\n          <el-option label=\"已付款\" value=\"paid\" />\r\n          <el-option label=\"已发货\" value=\"shipped\" />\r\n          <el-option label=\"已完成\" value=\"completed\" />\r\n        </el-select>\r\n        <el-date-picker\r\n          v-model=\"orderFilter.dateRange\"\r\n          type=\"daterange\"\r\n          range-separator=\"至\"\r\n          start-placeholder=\"开始日期\"\r\n          end-placeholder=\"结束日期\"\r\n          style=\"width: 350px\"\r\n        />\r\n      </div>\r\n      <el-button type=\"primary\" icon=\"el-icon-search\" @click=\"loadOrders\">搜索</el-button>\r\n    </div>\r\n\r\n    <el-table :data=\"flattenedOrders\" border style=\"width: 100%\" class=\"data-table\">\r\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"180\" />\r\n      <el-table-column prop=\"createTime\" label=\"下单时间\" width=\"180\" />\r\n      \r\n      <el-table-column label=\"商品信息\">\r\n        <template #default=\"{ row }\">\r\n          <div class=\"product-row\">\r\n            <el-image \r\n              :src=\"row.item.image || '/placeholder-product.jpg'\"\r\n              style=\"width: 60px; height: 60px; border-radius: 4px;\"\r\n              fit=\"cover\"\r\n            />\r\n            <div class=\"product-details\">\r\n              <div class=\"product-name\">{{ row.item.name }}</div>\r\n              <div class=\"product-meta\">\r\n                <span class=\"product-price\">¥{{ (row.item.price || 0).toFixed(2) }} × {{ row.item.quantity || 1 }}</span>\r\n                <span class=\"product-subtotal\">小计: ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"金额\" width=\"120\" align=\"right\">\r\n        <template #default=\"{ row }\">\r\n          ¥{{ ((row.item.price || 0) * (row.item.quantity || 1)).toFixed(2) }}\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column label=\"状态\" width=\"120\">\r\n        <template #default=\"{ row }\">\r\n          <el-tag :type=\"statusMap[row?.status]?.type || 'info'\">\r\n            {{ statusMap[row?.status]?.text || '未知状态' }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <!-- 操作列：增加发货按钮 -->\r\n      <el-table-column label=\"操作\" width=\"150\">\r\n        <template #default=\"{ row }\">\r\n          <div v-if=\"row\">\r\n            <!-- 发货按钮：只对已付款订单显示 -->\r\n            <el-button \r\n              v-if=\"(row.status === 'paid' || row.status === 'PAID') && row.isFirstItem\"\r\n              size=\"small\" \r\n              type=\"success\"\r\n              icon=\"el-icon-truck\"\r\n              @click=\"handleShip(row.orderId)\"\r\n            >发货</el-button>\r\n            <!-- 已发货状态显示 -->\r\n            <span v-else-if=\"(row.status === 'shipped' || row.status === 'SHIPPED') && row.isFirstItem\">\r\n              <el-tag type=\"success\">已发货</el-tag>\r\n            </span>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    \r\n    <!-- 发货对话框 -->\r\n    <el-dialog v-model=\"shipDialogVisible\" title=\"订单发货\" width=\"500px\">\r\n      <el-form :model=\"shipForm\" label-width=\"100px\">\r\n        <el-form-item label=\"订单号\">\r\n          <el-input v-model=\"currentOrderId\" disabled />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流公司\" required>\r\n          <el-input v-model=\"shipForm.trackingCompany\" placeholder=\"请输入物流公司名称\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"物流单号\">\r\n          <div class=\"tracking-input\">\r\n            <el-input \r\n              v-model=\"shipForm.trackingNumber\" \r\n              placeholder=\"请输入物流单号\" \r\n              clearable\r\n            />\r\n            <el-button \r\n              type=\"primary\" \r\n              plain \r\n              size=\"small\" \r\n              @click=\"shipForm.trackingNumber = generateTrackingNumber()\"\r\n            >\r\n              生成单号\r\n            </el-button>\r\n          </div>\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <el-button @click=\"shipDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmShip\">确定发货</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport { ElMessage } from 'element-plus'\r\nimport axios from 'axios'\r\n\r\nconst orderFilter = ref({ status: 'all', dateRange: [] })\r\nconst orders = ref([])\r\n\r\n// 发货相关状态\r\nconst shipDialogVisible = ref(false)\r\nconst currentOrderId = ref('')\r\nconst shipForm = ref({\r\n  trackingCompany: '',\r\n  trackingNumber: ''\r\n})\r\n\r\n// 从token解析商家ID\r\nconst getMerchantIdFromToken = () => {\r\n  const token = localStorage.getItem('token')\r\n  if (!token) {\r\n    ElMessage.error('用户未登录，请先登录')\r\n    return null\r\n  }\r\n  \r\n  try {\r\n    // 解析JWT Token\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    const payload = JSON.parse(jsonPayload)\r\n    return payload.merchantId || null\r\n  } catch (error) {\r\n    console.error('Token解析失败:', error)\r\n    ElMessage.error('商家信息解析失败')\r\n    return null\r\n  }\r\n}\r\n\r\n// 状态映射（支持大小写状态）\r\nconst statusMap = {\r\n  pending: { text: '待付款', type: 'warning' },\r\n  PENDING: { text: '待付款', type: 'warning' },\r\n  paid: { text: '已付款', type: 'primary' },\r\n  PAID: { text: '已付款', type: 'primary' },\r\n  shipped: { text: '已发货', type: 'success' },\r\n  SHIPPED: { text: '已发货', type: 'success' },\r\n  completed: { text: '已完成', type: 'info' },\r\n  COMPLETED: { text: '已完成', type: 'info' }\r\n}\r\n\r\n// 更新订单状态 - 使用新的发货API\r\nconst shipOrder = async (orderId, trackingCompany, trackingNumber) => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return false\r\n    }\r\n    \r\n    // 查找当前订单的所有订单项\r\n    const order = orders.value.find(o => o.orderId === orderId)\r\n    if (!order || !order.items) {\r\n      ElMessage.error('未找到订单项信息')\r\n      return false\r\n    }\r\n    \r\n    // 构建物流列表 - 使用正确的订单项ID\r\n    const logisticsList = order.items.map(item => ({\r\n      orderItemId: item.orderItemId, // 使用正确的订单项ID\r\n      logisticsCompany: trackingCompany,\r\n      trackingNumber: trackingNumber,\r\n      status: \"SHIPPED\" // 发货状态\r\n    }))\r\n    console.log('物流列表:', logisticsList)\r\n    // 调用发货API\r\n    const response = await axios.post(\r\n      `http://algorineko.top:8080/api/order/shipping`,\r\n      {\r\n        orderId: orderId,\r\n        logisticsList: logisticsList\r\n      },\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    return response.status === 200\r\n  } catch (error) {\r\n    console.error('发货操作失败:', error)\r\n    \r\n    let errorMessage = '发货失败'\r\n    if (error.response) {\r\n      if (error.response.status === 400) {\r\n        errorMessage = '请求参数错误'\r\n      } else if (error.response.status === 401) {\r\n        errorMessage = '未授权操作'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    return false\r\n  }\r\n}\r\n\r\n// 创建扁平化的订单数据结构（每个商品一行）\r\nconst flattenedOrders = computed(() => {\r\n  const result = []\r\n  \r\n  filteredOrders.value.forEach(order => {\r\n    order.items.forEach((item, index) => {\r\n      result.push({\r\n        ...order,\r\n        item,\r\n        isFirstItem: index === 0  // 标记是否是订单中的第一个商品\r\n      })\r\n    })\r\n  })\r\n  \r\n  return result\r\n})\r\n\r\n// 过滤订单\r\nconst filteredOrders = computed(() => {\r\n  return (orders.value || [])\r\n    .filter(o => {\r\n      // 状态筛选\r\n      const statusMatch = orderFilter.value.status === 'all' || \r\n                       o.status.toLowerCase() === orderFilter.value.status.toLowerCase()\r\n      \r\n      // 日期筛选\r\n      const dateMatch = !orderFilter.value.dateRange?.length || (\r\n        new Date(o.createTime) >= new Date(orderFilter.value.dateRange[0]) &&\r\n        new Date(o.createTime) <= new Date(orderFilter.value.dateRange[1]))\r\n      \r\n      return statusMatch && dateMatch\r\n    })\r\n})\r\n\r\n// 生成递增的物流单号\r\nconst generateTrackingNumber = () => {\r\n  let lastNumber = localStorage.getItem('lastTrackingNumber') || 0\r\n  lastNumber = parseInt(lastNumber) + 1\r\n  localStorage.setItem('lastTrackingNumber', lastNumber.toString())\r\n  return lastNumber.toString().padStart(10, '0') // 生成10位数字，不足前面补0\r\n}\r\n\r\n// 发货操作 - 打开发货对话框\r\nconst handleShip = (orderId) => {\r\n  currentOrderId.value = orderId\r\n  // 生成物流单号（作为默认值）\r\n  shipForm.value.trackingNumber = generateTrackingNumber()\r\n  shipForm.value.trackingCompany = '' // 清空物流公司\r\n  shipDialogVisible.value = true\r\n}\r\n\r\n// 确认发货\r\nconst confirmShip = async () => {\r\n  if (!shipForm.value.trackingCompany) {\r\n    ElMessage.warning('请输入物流公司')\r\n    return\r\n  }\r\n  \r\n  if (!shipForm.value.trackingNumber) {\r\n    ElMessage.warning('请输入物流单号')\r\n    return\r\n  }\r\n  \r\n  // 使用发货API\r\n  const success = await shipOrder(\r\n    currentOrderId.value,\r\n    shipForm.value.trackingCompany,\r\n    shipForm.value.trackingNumber\r\n  )\r\n  \r\n  if (success) {\r\n    // 更新本地存储\r\n    const savedOrders = JSON.parse(localStorage.getItem('orders') || '[]')\r\n    const updatedOrders = savedOrders.map(o => {\r\n      if (o.orderId === currentOrderId.value) {\r\n        return {\r\n          ...o,\r\n          status: 'SHIPPED', // 使用大写状态保持一致性\r\n          shipTime: new Date().toLocaleString(),\r\n          trackingCompany: shipForm.value.trackingCompany,\r\n          trackingNumber: shipForm.value.trackingNumber\r\n        }\r\n      }\r\n      return o\r\n    })\r\n    \r\n    localStorage.setItem('orders', JSON.stringify(updatedOrders))\r\n    \r\n    ElMessage.success('发货成功！')\r\n    shipDialogVisible.value = false\r\n    loadOrders() // 重新加载订单\r\n  }\r\n}\r\n\r\n// 从后端加载订单数据\r\nconst loadOrders = async () => {\r\n  try {\r\n    const merchantId = getMerchantIdFromToken()\r\n    if (!merchantId) {\r\n      ElMessage.error('无法获取商家信息')\r\n      return\r\n    }\r\n    \r\n    // 调用后端API获取订单\r\n    const response = await axios.get(\r\n      `http://algorineko.top:8080/api/order/merchant/${merchantId}`,\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }\r\n    )\r\n    \r\n    // 转换数据结构 - 保留订单项ID\r\n    const backendOrders = response.data.map(order => ({\r\n      orderId: order.orderId,\r\n      merchantId: order.merchantId,\r\n      totalPrice: order.totalPrice,\r\n      status: order.status, // 保持大写状态\r\n      createTime: new Date().toLocaleString(), // 添加时间字段\r\n      items: order.items.map(item => ({\r\n        orderItemId: item.orderItemId, // 保留订单项ID (后端返回的订单项ID)\r\n        productId: item.productId, // 商品ID\r\n        name: `商品 ${item.productId}`, // 默认商品名称（稍后会替换）\r\n        price: item.price,\r\n        quantity: item.quantity,\r\n        image: '/placeholder-product.jpg' // 默认图片（稍后会替换）\r\n      }))\r\n    }))\r\n    console.log('订单列表:', backendOrders)\r\n    // 获取所有唯一商品ID\r\n    const productIds = [...new Set(\r\n      backendOrders.flatMap(order => \r\n        order.items.map(item => item.productId) // 使用商品ID获取详情\r\n      )\r\n    )]\r\n\r\n    // 并发获取所有商品详情\r\n    const productRequests = productIds.map(id => \r\n      axios.get(`http://algorineko.top:8080/api/merchant/product/detail/${id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      }).catch(error => {\r\n        console.error(`获取商品${id}详情失败:`, error)\r\n        return null\r\n      })\r\n    )\r\n\r\n    // 等待所有商品详情请求完成\r\n    const productResponses = await Promise.all(productRequests)\r\n    \r\n    // 构建商品信息映射表\r\n    const productMap = {}\r\n    productResponses.forEach((res, index) => {\r\n      if (res && res.data) {\r\n        const product = res.data\r\n        productMap[productIds[index]] = {\r\n          name: product.productName,\r\n          // 使用第一张图片或默认图片\r\n          image: product.images && product.images.length > 0 \r\n            ? product.images[0] \r\n            : '/placeholder-product.jpg'\r\n        }\r\n      }\r\n    })\r\n\r\n    // 更新订单中的商品信息\r\n    backendOrders.forEach(order => {\r\n      order.items.forEach(item => {\r\n        const productInfo = productMap[item.productId] // 使用商品ID获取详情\r\n        if (productInfo) {\r\n          item.name = productInfo.name\r\n          item.image = productInfo.image\r\n        }\r\n      })\r\n    })\r\n\r\n    // 保存到本地存储（保持原有功能）\r\n    localStorage.setItem('orders', JSON.stringify(backendOrders))\r\n    \r\n    orders.value = backendOrders\r\n  } catch (error) {\r\n    console.error('加载订单失败:', error)\r\n    \r\n    // 更详细的错误信息\r\n    let errorMessage = '订单加载失败'\r\n    if (error.response) {\r\n      // 服务器响应了错误状态码\r\n      if (error.response.status === 401) {\r\n        errorMessage = '用户未认证，请重新登录'\r\n      } else if (error.response.status === 403) {\r\n        errorMessage = '没有权限访问订单数据'\r\n      } else if (error.response.data && error.response.data.message) {\r\n        errorMessage = error.response.data.message\r\n      }\r\n    } else if (error.request) {\r\n      // 请求已发出但没有收到响应\r\n      errorMessage = '无法连接到服务器，请检查网络连接'\r\n    }\r\n    \r\n    ElMessage.error(errorMessage)\r\n    orders.value = []\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  loadOrders() // 加载订单数据\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.order-section h2 {\r\n  margin-top: 0;\r\n  margin-bottom: 25px;\r\n  color: #303133;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  align-items: center;\r\n  padding-bottom: 15px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.order-section h2 i {\r\n  margin-right: 12px;\r\n  font-size: 24px;\r\n  color: #409eff;\r\n}\r\n\r\n.filter-bar {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-group {\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.data-table {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\n.product-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.product-details {\r\n  flex: 1;\r\n}\r\n\r\n.product-name {\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  font-size: 14px;\r\n}\r\n\r\n.product-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.product-price {\r\n  color: #666;\r\n  font-size: 13px;\r\n}\r\n\r\n.product-subtotal {\r\n  font-weight: 600;\r\n  color: #f56c6c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 物流单号输入框样式 */\r\n.tracking-input {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.tracking-input .el-input {\r\n  flex: 1;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}