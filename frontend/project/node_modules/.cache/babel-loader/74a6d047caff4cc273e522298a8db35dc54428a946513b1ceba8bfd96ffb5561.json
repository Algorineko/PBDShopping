{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n\nexport default {\n  login(user) {\n    return new Promise((resolve, reject) => {\n      const roles = ['business', 'buyer', 'admin'];\n      let foundUser = null;\n      for (const role of roles) {\n        const key = `${role}Users`;\n        const users = JSON.parse(localStorage.getItem(key) || '[]');\n\n        // 确保正确处理空数组情况\n        if (Array.isArray(users)) {\n          foundUser = users.find(u => u.userId === user.userId && u.password === user.password);\n        }\n        if (foundUser) {\n          return resolve({\n            data: {\n              token: 'simulated-token',\n              userId: foundUser.userId,\n              userName: foundUser.userName,\n              role: foundUser.role\n            }\n          });\n        }\n      }\n      reject(new Error('用户ID或密码错误'));\n    });\n  },\n  register(user) {\n    return new Promise((resolve, reject) => {\n      const key = `${user.role}Users`;\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\n\n      // 检查用户ID是否已存在\n      if (users.some(u => u.userId === user.userId)) {\n        reject(new Error('用户ID已存在'));\n        return;\n      }\n\n      // 创建新用户对象\n      const newUser = {\n        userId: user.userId,\n        userName: user.userName,\n        password: user.password,\n        role: user.role\n      };\n\n      // 更新存储\n      users.push(newUser);\n      localStorage.setItem(key, JSON.stringify(users));\n      resolve({\n        data: {\n          message: '注册成功',\n          user: newUser\n        }\n      });\n    });\n  }\n};","map":{"version":3,"names":["login","user","Promise","resolve","reject","roles","foundUser","role","key","users","JSON","parse","localStorage","getItem","Array","isArray","find","u","userId","password","data","token","userName","Error","register","some","newUser","push","setItem","stringify","message"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;EACbA,KAAKA,CAACC,IAAI,EAAE;IACV,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,KAAK,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC;MAC5C,IAAIC,SAAS,GAAG,IAAI;MAEpB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;QACxB,MAAMG,GAAG,GAAG,GAAGD,IAAI,OAAO;QAC1B,MAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;;QAE3D;QACA,IAAIM,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,EAAE;UACxBH,SAAS,GAAGG,KAAK,CAACO,IAAI,CAACC,CAAC,IACtBA,CAAC,CAACC,MAAM,KAAKjB,IAAI,CAACiB,MAAM,IAAID,CAAC,CAACE,QAAQ,KAAKlB,IAAI,CAACkB,QAClD,CAAC;QACH;QAEA,IAAIb,SAAS,EAAE;UACb,OAAOH,OAAO,CAAC;YACbiB,IAAI,EAAE;cACJC,KAAK,EAAE,iBAAiB;cACxBH,MAAM,EAAEZ,SAAS,CAACY,MAAM;cACxBI,QAAQ,EAAEhB,SAAS,CAACgB,QAAQ;cAC5Bf,IAAI,EAAED,SAAS,CAACC;YAClB;UACF,CAAC,CAAC;QACJ;MACF;MAEAH,MAAM,CAAC,IAAImB,KAAK,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC;EAEDC,QAAQA,CAACvB,IAAI,EAAE;IACb,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMI,GAAG,GAAG,GAAGP,IAAI,CAACM,IAAI,OAAO;MAC/B,MAAME,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;;MAE3D;MACA,IAAIC,KAAK,CAACgB,IAAI,CAACR,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKjB,IAAI,CAACiB,MAAM,CAAC,EAAE;QAC7Cd,MAAM,CAAC,IAAImB,KAAK,CAAC,SAAS,CAAC,CAAC;QAC5B;MACF;;MAEA;MACA,MAAMG,OAAO,GAAG;QACdR,MAAM,EAAEjB,IAAI,CAACiB,MAAM;QACnBI,QAAQ,EAAErB,IAAI,CAACqB,QAAQ;QACvBH,QAAQ,EAAElB,IAAI,CAACkB,QAAQ;QACvBZ,IAAI,EAAEN,IAAI,CAACM;MACb,CAAC;;MAED;MACAE,KAAK,CAACkB,IAAI,CAACD,OAAO,CAAC;MACnBd,YAAY,CAACgB,OAAO,CAACpB,GAAG,EAAEE,IAAI,CAACmB,SAAS,CAACpB,KAAK,CAAC,CAAC;MAEhDN,OAAO,CAAC;QACNiB,IAAI,EAAE;UACJU,OAAO,EAAE,MAAM;UACf7B,IAAI,EAAEyB;QACR;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}