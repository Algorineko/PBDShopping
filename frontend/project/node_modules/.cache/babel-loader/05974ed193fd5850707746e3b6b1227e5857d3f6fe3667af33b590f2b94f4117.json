{"ast":null,"code":"/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\nimport axios from 'axios';\n\n// 根据环境变量设置基础URL\nconst getBaseURL = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return '/api'; // 开发环境使用代理\n  } else {\n    return 'http://algorineko.top:8080'; // 生产环境直接访问\n  }\n};\nconst apiClient = axios.create({\n  baseURL: getBaseURL(),\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  async login(credentials) {\n    try {\n      const response = await apiClient.post('/user/login', {\n        username: credentials.userId,\n        password: credentials.password\n      });\n      return {\n        data: {\n          token: response.data.token,\n          userId: response.data.userId,\n          role: response.data.userType\n        }\n      };\n    } catch (error) {\n      let errorMessage = '登录失败';\n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = '用户ID或密码错误';\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        errorMessage = error.message || '登录请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  async register(user) {\n    try {\n      await apiClient.post('/user/register', {\n        username: user.userId,\n        password: user.password,\n        phone: user.phone,\n        userType: user.role,\n        address: user.address\n      });\n      return {\n        data: {\n          message: '注册成功'\n        }\n      };\n    } catch (error) {\n      let errorMessage = '注册失败';\n      if (error.response) {\n        if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        } else {\n          errorMessage = `服务器错误: ${error.response.status}`;\n        }\n      } else if (error.request) {\n        errorMessage = '无法连接到服务器，请检查网络';\n      } else {\n        errorMessage = error.message || '注册请求设置错误';\n      }\n      throw new Error(errorMessage);\n    }\n  }\n};","map":{"version":3,"names":["axios","getBaseURL","process","env","NODE_ENV","apiClient","create","baseURL","withCredentials","headers","Accept","login","credentials","response","post","username","userId","password","data","token","role","userType","error","errorMessage","status","request","message","Error","register","user","phone","address"],"sources":["E:/实验例子/project/src/services/auth.js"],"sourcesContent":["/*\r\n\r\nimport axios from 'axios'\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://ajax-api.itheima.net',\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n*/\r\n/*\r\nexport default {\r\n  login(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const roles = ['business', 'buyer', 'admin'];\r\n      let foundUser = null;\r\n      \r\n      for (const role of roles) {\r\n        const key = `${role}Users`;\r\n        const users = JSON.parse(localStorage.getItem(key) || '[]')\r\n        \r\n        // 确保正确处理空数组情况\r\n        if (Array.isArray(users)) {\r\n          foundUser = users.find(u => \r\n            u.userId === user.userId && u.password === user.password\r\n          );\r\n        }\r\n\r\n        if (foundUser) {\r\n          return resolve({\r\n            data: {\r\n              token: 'simulated-token',\r\n              userId: foundUser.userId,\r\n              userName: foundUser.userName,\r\n              role: foundUser.role\r\n            }\r\n          });\r\n        }\r\n      }\r\n      \r\n      reject(new Error('用户ID或密码错误'));\r\n    });\r\n  },\r\n\r\n  register(user) {\r\n    return new Promise((resolve, reject) => {\r\n      const key = `${user.role}Users`;\r\n      const users = JSON.parse(localStorage.getItem(key) || '[]');\r\n\r\n      // 检查用户ID是否已存在\r\n      if (users.some(u => u.userId === user.userId)) {\r\n        reject(new Error('用户ID已存在'));\r\n        return;\r\n      }\r\n\r\n      // 创建新用户对象\r\n      const newUser = {\r\n        userId: user.userId,\r\n        userName: user.userName,\r\n        password: user.password,\r\n        role: user.role\r\n      };\r\n\r\n      // 更新存储\r\n      users.push(newUser);\r\n      localStorage.setItem(key, JSON.stringify(users));\r\n      \r\n      resolve({ \r\n        data: {\r\n          message: '注册成功',\r\n          user: newUser\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n*/\r\nimport axios from 'axios'\r\n\r\n// 根据环境变量设置基础URL\r\nconst getBaseURL = () => {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    return '/api' // 开发环境使用代理\r\n  } else {\r\n    return 'http://algorineko.top:8080' // 生产环境直接访问\r\n  }\r\n}\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: getBaseURL(),\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  }\r\n})\r\n\r\nexport default {\r\n  async login(credentials) {\r\n    try {\r\n      const response = await apiClient.post('/user/login', {\r\n        username: credentials.userId,\r\n        password: credentials.password\r\n      })\r\n      \r\n      return {\r\n        data: {\r\n          token: response.data.token,\r\n          userId: response.data.userId,\r\n          role: response.data.userType\r\n        }\r\n      }\r\n    } catch (error) {\r\n      let errorMessage = '登录失败';\r\n      if (error.response) {\r\n        if (error.response.status === 401) {\r\n          errorMessage = '用户ID或密码错误';\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        errorMessage = error.message || '登录请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  },\r\n\r\n  async register(user) {\r\n    try {\r\n      await apiClient.post('/user/register', {\r\n        username: user.userId,\r\n        password: user.password,\r\n        phone: user.phone,\r\n        userType: user.role,\r\n        address: user.address\r\n      })\r\n      \r\n      return { data: { message: '注册成功' } }\r\n    } catch (error) {\r\n      let errorMessage = '注册失败';\r\n      if (error.response) {\r\n        if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else {\r\n          errorMessage = `服务器错误: ${error.response.status}`;\r\n        }\r\n      } else if (error.request) {\r\n        errorMessage = '无法连接到服务器，请检查网络';\r\n      } else {\r\n        errorMessage = error.message || '注册请求设置错误';\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C,OAAO,MAAM,EAAC;EAChB,CAAC,MAAM;IACL,OAAO,4BAA4B,EAAC;EACtC;AACF,CAAC;AAED,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,UAAU,CAAC,CAAC;EACrBO,eAAe,EAAE,KAAK;EACtBC,OAAO,EAAE;IACPC,MAAM,EAAE,kBAAkB;IAC1B,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAe;EACb,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,SAAS,CAACS,IAAI,CAAC,aAAa,EAAE;QACnDC,QAAQ,EAAEH,WAAW,CAACI,MAAM;QAC5BC,QAAQ,EAAEL,WAAW,CAACK;MACxB,CAAC,CAAC;MAEF,OAAO;QACLC,IAAI,EAAE;UACJC,KAAK,EAAEN,QAAQ,CAACK,IAAI,CAACC,KAAK;UAC1BH,MAAM,EAAEH,QAAQ,CAACK,IAAI,CAACF,MAAM;UAC5BI,IAAI,EAAEP,QAAQ,CAACK,IAAI,CAACG;QACtB;MACF,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIC,YAAY,GAAG,MAAM;MACzB,IAAID,KAAK,CAACT,QAAQ,EAAE;QAClB,IAAIS,KAAK,CAACT,QAAQ,CAACW,MAAM,KAAK,GAAG,EAAE;UACjCD,YAAY,GAAG,WAAW;QAC5B,CAAC,MAAM;UACLA,YAAY,GAAG,UAAUD,KAAK,CAACT,QAAQ,CAACW,MAAM,EAAE;QAClD;MACF,CAAC,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;QACxBF,YAAY,GAAG,gBAAgB;MACjC,CAAC,MAAM;QACLA,YAAY,GAAGD,KAAK,CAACI,OAAO,IAAI,UAAU;MAC5C;MACA,MAAM,IAAIC,KAAK,CAACJ,YAAY,CAAC;IAC/B;EACF,CAAC;EAED,MAAMK,QAAQA,CAACC,IAAI,EAAE;IACnB,IAAI;MACF,MAAMxB,SAAS,CAACS,IAAI,CAAC,gBAAgB,EAAE;QACrCC,QAAQ,EAAEc,IAAI,CAACb,MAAM;QACrBC,QAAQ,EAAEY,IAAI,CAACZ,QAAQ;QACvBa,KAAK,EAAED,IAAI,CAACC,KAAK;QACjBT,QAAQ,EAAEQ,IAAI,CAACT,IAAI;QACnBW,OAAO,EAAEF,IAAI,CAACE;MAChB,CAAC,CAAC;MAEF,OAAO;QAAEb,IAAI,EAAE;UAAEQ,OAAO,EAAE;QAAO;MAAE,CAAC;IACtC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,IAAIC,YAAY,GAAG,MAAM;MACzB,IAAID,KAAK,CAACT,QAAQ,EAAE;QAClB,IAAIS,KAAK,CAACT,QAAQ,CAACK,IAAI,IAAII,KAAK,CAACT,QAAQ,CAACK,IAAI,CAACQ,OAAO,EAAE;UACtDH,YAAY,GAAGD,KAAK,CAACT,QAAQ,CAACK,IAAI,CAACQ,OAAO;QAC5C,CAAC,MAAM;UACLH,YAAY,GAAG,UAAUD,KAAK,CAACT,QAAQ,CAACW,MAAM,EAAE;QAClD;MACF,CAAC,MAAM,IAAIF,KAAK,CAACG,OAAO,EAAE;QACxBF,YAAY,GAAG,gBAAgB;MACjC,CAAC,MAAM;QACLA,YAAY,GAAGD,KAAK,CAACI,OAAO,IAAI,UAAU;MAC5C;MACA,MAAM,IAAIC,KAAK,CAACJ,YAAY,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}