{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n// stores/cart.js\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\n\n// 解析JWT token的辅助函数\nconst parseJwt = token => {\n  try {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (e) {\n    console.error('Token解析失败:', e);\n    return null;\n  }\n};\nexport const useCartStore = defineStore('cart', () => {\n  const items = ref([]);\n  const selectedItems = ref(new Set());\n  const loading = ref(false);\n  const error = ref(null);\n\n  // 从后端获取购物车数据\n  const fetchCart = async () => {\n    loading.value = true;\n    error.value = null;\n    try {\n      const token = localStorage.getItem('token');\n      console.log('token:', token);\n      if (!token) throw new Error('用户未登录');\n      const response = await axios.get('http://algorineko.top:8080/api/customer/cart/get', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 映射后端数据结构到前端格式\n      items.value = response.data.map(item => ({\n        id: item.productId,\n        cartItemId: item.cartItemId,\n        name: item.product?.name || '未知商品',\n        price: Number(item.product?.price) || 0,\n        quantity: Math.max(1, Number(item.quantity) || 1),\n        image: item.product?.image || '/placeholder-product.jpg'\n      }));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('获取购物车失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 更新购物车项数量\n  const updateQuantity = async (cartItemId, quantity) => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.put(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, {\n        cartItemId,\n        quantity,\n        selectedOptions: \"\" // 根据实际需求调整\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // 更新本地状态\n      const item = items.value.find(i => i.cartItemId === cartItemId);\n      if (item) {\n        item.quantity = quantity;\n      }\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('更新购物车项失败:', err);\n      // 重新获取最新数据\n      await fetchCart();\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 移除商品\n  const removeItem = async cartItemId => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n      await axios.delete(`http://algorineko.top:8080/api/customer/cart/${cartItemId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // 更新本地状态\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId);\n      selectedItems.value.delete(cartItemId);\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 批量移除商品\n  const removeItems = async cartItemIds => {\n    loading.value = true;\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error('用户未登录');\n\n      // 并行删除所有选中项\n      await Promise.all(cartItemIds.map(id => axios.delete(`http://algorineko.top:8080/api/customer/cart/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })));\n\n      // 更新本地状态\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId));\n      cartItemIds.forEach(id => selectedItems.value.delete(id));\n    } catch (err) {\n      error.value = err.response?.data?.message || err.message;\n      console.error('批量删除购物车项失败:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 总价计算\n  const totalPrice = computed(() => items.value.reduce((sum, item) => {\n    const price = Number(item.price) || 0;\n    const quantity = Number(item.quantity) || 1;\n    return sum + price * quantity;\n  }, 0));\n\n  // 选中商品总价\n  const selectedTotalPrice = computed(() => items.value.reduce((sum, item) => {\n    if (selectedItems.value.has(item.cartItemId)) {\n      const price = Number(item.price) || 0;\n      const quantity = Number(item.quantity) || 1;\n      return sum + price * quantity;\n    }\n    return sum;\n  }, 0));\n\n  // 选中的商品列表\n  const selectedItemsList = computed(() => items.value.filter(item => selectedItems.value.has(item.cartItemId)));\n  const toggleSelection = cartItemId => {\n    if (selectedItems.value.has(cartItemId)) {\n      selectedItems.value.delete(cartItemId);\n    } else {\n      selectedItems.value.add(cartItemId);\n    }\n  };\n\n  // 全选/取消全选\n  const toggleSelectAll = () => {\n    if (selectedItems.value.size === items.value.length) {\n      selectedItems.value.clear();\n    } else {\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId));\n    }\n  };\n  const clearSelected = () => selectedItems.value.clear();\n  return {\n    items: computed(() => items.value),\n    totalPrice,\n    selectedTotalPrice,\n    selectedItems: computed(() => selectedItems.value),\n    selectedItemsList,\n    loading: computed(() => loading.value),\n    error: computed(() => error.value),\n    fetchCart,\n    updateQuantity,\n    addItem,\n    removeItem,\n    removeItems,\n    toggleSelection,\n    toggleSelectAll,\n    clearSelected\n  };\n});","map":{"version":3,"names":["defineStore","ref","computed","axios","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","useCartStore","items","selectedItems","Set","loading","fetchCart","value","localStorage","getItem","log","Error","response","get","headers","Authorization","data","item","id","productId","cartItemId","name","product","price","Number","quantity","Math","max","image","err","message","updateQuantity","put","selectedOptions","find","i","removeItem","delete","filter","removeItems","cartItemIds","Promise","all","includes","forEach","totalPrice","reduce","sum","selectedTotalPrice","has","selectedItemsList","toggleSelection","add","toggleSelectAll","size","length","clear","clearSelected","addItem"],"sources":["E:/实验例子/project/src/stores/cart.js"],"sourcesContent":["// stores/cart.js\r\nimport { defineStore } from 'pinia'\r\nimport { ref, computed } from 'vue'\r\nimport axios from 'axios'\r\n\r\n// 解析JWT token的辅助函数\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1]\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    )\r\n    return JSON.parse(jsonPayload)\r\n  } catch (e) {\r\n    console.error('Token解析失败:', e)\r\n    return null\r\n  }\r\n}\r\nexport const useCartStore = defineStore('cart', () => {\r\n  const items = ref([])\r\n  const selectedItems = ref(new Set())\r\n  const loading = ref(false)\r\n  const error = ref(null)\r\n  \r\n\r\n \r\n  // 从后端获取购物车数据\r\n  const fetchCart = async () => {\r\n    loading.value = true\r\n    error.value = null\r\n    try {\r\n  \r\n      const token = localStorage.getItem('token')\r\n      console.log('token:', token)\r\n      if (!token) throw new Error('用户未登录')\r\n   \r\n      const response = await axios.get(\r\n        'http://algorineko.top:8080/api/customer/cart/get',\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 映射后端数据结构到前端格式\r\n      items.value = response.data.map(item => ({\r\n        id: item.productId,\r\n        cartItemId: item.cartItemId,\r\n        name: item.product?.name || '未知商品',\r\n        price: Number(item.product?.price) || 0,\r\n        quantity: Math.max(1, Number(item.quantity) || 1),\r\n        image: item.product?.image || '/placeholder-product.jpg'\r\n      }))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('获取购物车失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 更新购物车项数量\r\n  const updateQuantity = async (cartItemId, quantity) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.put(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          cartItemId,\r\n          quantity,\r\n          selectedOptions: \"\" // 根据实际需求调整\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      const item = items.value.find(i => i.cartItemId === cartItemId)\r\n      if (item) {\r\n        item.quantity = quantity\r\n      }\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('更新购物车项失败:', err)\r\n      // 重新获取最新数据\r\n      await fetchCart()\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 移除商品\r\n  const removeItem = async (cartItemId) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      await axios.delete(\r\n        `http://algorineko.top:8080/api/customer/cart/${cartItemId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`\r\n          }\r\n        }\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => i.cartItemId !== cartItemId)\r\n      selectedItems.value.delete(cartItemId)\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 批量移除商品\r\n  const removeItems = async (cartItemIds) => {\r\n    loading.value = true\r\n    try {\r\n      const token = localStorage.getItem('token')\r\n      if (!token) throw new Error('用户未登录')\r\n      \r\n      // 并行删除所有选中项\r\n      await Promise.all(\r\n        cartItemIds.map(id => \r\n          axios.delete(\r\n            `http://algorineko.top:8080/api/customer/cart/${id}`,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${token}`\r\n              }\r\n            }\r\n          )\r\n        )\r\n      )\r\n      \r\n      // 更新本地状态\r\n      items.value = items.value.filter(i => !cartItemIds.includes(i.cartItemId))\r\n      cartItemIds.forEach(id => selectedItems.value.delete(id))\r\n    } catch (err) {\r\n      error.value = err.response?.data?.message || err.message\r\n      console.error('批量删除购物车项失败:', err)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  // 总价计算\r\n  const totalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      const price = Number(item.price) || 0\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中商品总价\r\n  const selectedTotalPrice = computed(() => \r\n    items.value.reduce((sum, item) => {\r\n      if (selectedItems.value.has(item.cartItemId)) {\r\n        const price = Number(item.price) || 0\r\n        const quantity = Number(item.quantity) || 1\r\n        return sum + (price * quantity)\r\n      }\r\n      return sum\r\n    }, 0)\r\n  )\r\n  \r\n  // 选中的商品列表\r\n  const selectedItemsList = computed(() => \r\n    items.value.filter(item => selectedItems.value.has(item.cartItemId))\r\n  )\r\n\r\n  const toggleSelection = (cartItemId) => {\r\n    if (selectedItems.value.has(cartItemId)) {\r\n      selectedItems.value.delete(cartItemId)\r\n    } else {\r\n      selectedItems.value.add(cartItemId)\r\n    }\r\n  }\r\n  \r\n  // 全选/取消全选\r\n  const toggleSelectAll = () => {\r\n    if (selectedItems.value.size === items.value.length) {\r\n      selectedItems.value.clear()\r\n    } else {\r\n      items.value.forEach(item => selectedItems.value.add(item.cartItemId))\r\n    }\r\n  }\r\n\r\n  const clearSelected = () => selectedItems.value.clear()\r\n\r\n  return {\r\n    items: computed(() => items.value),\r\n    totalPrice,\r\n    selectedTotalPrice,\r\n    selectedItems: computed(() => selectedItems.value),\r\n    selectedItemsList,\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    fetchCart,\r\n    updateQuantity,\r\n    addItem,\r\n    removeItem,\r\n    removeItems,\r\n    toggleSelection,\r\n    toggleSelectAll,\r\n    clearSelected\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}